(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb2, mod) => function __require() {
    return mod || (0, cb2[__getOwnPropNames(cb2)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from2;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from2 = Object(arguments[s]);
          for (var key in from2) {
            if (hasOwnProperty2.call(from2, key)) {
              to[key] = from2[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from2);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from2, symbols[i])) {
                to[symbols[i]] = from2[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var _assign = require_object_assign();
          var ReactVersion = "17.0.2";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports.Fragment = 60107;
          exports.StrictMode = 60108;
          exports.Profiler = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          exports.Suspense = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports.Fragment = symbolFor("react.fragment");
            exports.StrictMode = symbolFor("react.strict_mode");
            exports.Profiler = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            exports.Suspense = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: 0
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var IsSomeRendererActing = {
            current: false
          };
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner,
            IsSomeRendererActing,
            assign: _assign
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          }
          function warn2(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error2(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error2("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component2(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component2.prototype.isReactComponent = {};
          Component2.prototype.setState = function(partialState, callback) {
            if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
              {
                throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
              }
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component2.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component2.prototype, methodName, {
                get: function() {
                  warn2("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component2.prototype;
          function PureComponent2(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent2.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent2;
          _assign(pureComponentPrototype, Component2.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error2("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case exports.Profiler:
                return "Profiler";
              case exports.StrictMode:
                return "StrictMode";
              case exports.Suspense:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config2) {
            {
              if (hasOwnProperty2.call(config2, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.ref !== void 0;
          }
          function hasValidKey(config2) {
            {
              if (hasOwnProperty2.call(config2, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config2) {
            {
              if (typeof config2.ref === "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement37(type, config2, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config2);
                }
              }
              if (hasValidKey(config2)) {
                key = "" + config2.key;
              }
              self2 = config2.__self === void 0 ? null : config2.__self;
              source = config2.__source === void 0 ? null : config2.__source;
              for (propName in config2) {
                if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config2[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps2 = type.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement7(element, config2, children) {
            if (!!(element === null || element === void 0)) {
              {
                throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
              }
            }
            var propName;
            var props = _assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config2)) {
                key = "" + config2.key;
              }
              var defaultProps2;
              if (element.type && element.type.defaultProps) {
                defaultProps2 = element.type.defaultProps;
              }
              for (propName in config2) {
                if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config2[propName] === void 0 && defaultProps2 !== void 0) {
                    props[propName] = defaultProps2[propName];
                  } else {
                    props[propName] = config2[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement5(object2) {
            return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape3(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              return escape3("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (Array.isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c2) {
                  return c2;
                });
              } else if (mappedChild != null) {
                if (isValidElement5(mappedChild)) {
                  mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = "" + children;
                {
                  {
                    throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                  }
                }
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func2, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func2.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray2(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement5(children)) {
              {
                throw Error("React.Children.only expected to receive a single React element child.");
              }
            }
            return children;
          }
          function createContext14(defaultValue, calculateChangedBits) {
            if (calculateChangedBits === void 0) {
              calculateChangedBits = null;
            } else {
              {
                if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                  error2("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
                }
              }
            }
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _calculateChangedBits: calculateChangedBits,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context,
                _calculateChangedBits: context._calculateChangedBits
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error2("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error2("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn2("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
              thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                  var defaultExport = moduleObject.default;
                  {
                    if (defaultExport === void 0) {
                      error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    }
                  }
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = defaultExport;
                }
              }, function(error3) {
                if (payload._status === Pending) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error3;
                }
              });
            }
            if (payload._status === Resolved) {
              return payload._result;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: -1,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps2;
              var propTypes2;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps2;
                  },
                  set: function(newDefaultProps) {
                    error2("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps2 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes2;
                  },
                  set: function(newPropTypes) {
                    error2("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes2 = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef13(render3) {
            {
              if (render3 != null && render3.$$typeof === REACT_MEMO_TYPE) {
                error2("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render3 !== "function") {
                error2("forwardRef requires a render function but was given %s.", render3 === null ? "null" : typeof render3);
              } else {
                if (render3.length !== 0 && render3.length !== 2) {
                  error2("forwardRef render functions accept exactly two parameters: props and ref. %s", render3.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render3 != null) {
                if (render3.defaultProps != null || render3.propTypes != null) {
                  error2("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render: render3
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (render3.displayName == null) {
                    render3.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function memo3(type, compare) {
            {
              if (!isValidElementType(type)) {
                error2("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (type.displayName == null) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            if (!(dispatcher !== null)) {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext22(Context, unstable_observedBits) {
            var dispatcher = resolveDispatcher();
            {
              if (unstable_observedBits !== void 0) {
                error2("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
              }
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error2("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error2("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context, unstable_observedBits);
          }
          function useState22(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef23(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect30(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useLayoutEffect6(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback14(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo16(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame3 = componentFrameCache.get(fn);
              if (frame3 !== void 0) {
                return frame3;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s >= 1 && c2 >= 0 && sampleLines[s] !== controlLines[c2]) {
                  c2--;
                }
                for (; s >= 1 && c2 >= 0; s--, c2--) {
                  if (sampleLines[s] !== controlLines[c2]) {
                    if (s !== 1 || c2 !== 1) {
                      do {
                        s--;
                        c2--;
                        if (c2 < 0 || sampleLines[s] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component3) {
            var prototype = Component3.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case exports.Suspense:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error2("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentName(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node3, parentType) {
            if (typeof node3 !== "object") {
              return;
            }
            if (Array.isArray(node3)) {
              for (var i = 0; i < node3.length; i++) {
                var child = node3[i];
                if (isValidElement5(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement5(node3)) {
              if (node3._store) {
                node3._store.validated = true;
              }
            } else if (node3) {
              var iteratorFn = getIteratorFn(node3);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node3.entries) {
                  var iterator = iteratorFn.call(node3);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement5(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes2;
              if (typeof type === "function") {
                propTypes2 = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes2 = type.propTypes;
              } else {
                return;
              }
              if (propTypes2) {
                var name = getComponentName(type);
                checkPropTypes(propTypes2, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys3 = Object.keys(fragment.props);
              for (var i = 0; i < keys3.length; i++) {
                var key = keys3[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error2("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (Array.isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error2("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement37.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === exports.Fragment) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn2("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn2("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement7.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          {
            try {
              var frozenObject = Object.freeze({});
              /* @__PURE__ */ new Map([[frozenObject, null]]);
              /* @__PURE__ */ new Set([frozenObject]);
            } catch (e) {
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children6 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray2,
            only: onlyChild
          };
          exports.Children = Children6;
          exports.Component = Component2;
          exports.PureComponent = PureComponent2;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext14;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef13;
          exports.isValidElement = isValidElement5;
          exports.lazy = lazy;
          exports.memo = memo3;
          exports.useCallback = useCallback14;
          exports.useContext = useContext22;
          exports.useDebugValue = useDebugValue;
          exports.useEffect = useEffect30;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useLayoutEffect = useLayoutEffect6;
          exports.useMemo = useMemo16;
          exports.useReducer = useReducer;
          exports.useRef = useRef23;
          exports.useState = useState22;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var requestHostCallback;
          var requestHostTimeout;
          var cancelHostTimeout;
          var requestPaint;
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          if (typeof window === "undefined" || typeof MessageChannel !== "function") {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = function() {
              if (_callback !== null) {
                try {
                  var currentTime = exports.unstable_now();
                  var hasRemainingTime = true;
                  _callback(hasRemainingTime, currentTime);
                  _callback = null;
                } catch (e) {
                  setTimeout(_flushCallback, 0);
                  throw e;
                }
              }
            };
            requestHostCallback = function(cb2) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb2);
              } else {
                _callback = cb2;
                setTimeout(_flushCallback, 0);
              }
            };
            requestHostTimeout = function(cb2, ms) {
              _timeoutID = setTimeout(cb2, ms);
            };
            cancelHostTimeout = function() {
              clearTimeout(_timeoutID);
            };
            exports.unstable_shouldYield = function() {
              return false;
            };
            requestPaint = exports.unstable_forceFrameRate = function() {
            };
          } else {
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== "undefined") {
              var requestAnimationFrame3 = window.requestAnimationFrame;
              var cancelAnimationFrame3 = window.cancelAnimationFrame;
              if (typeof requestAnimationFrame3 !== "function") {
                console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
              if (typeof cancelAnimationFrame3 !== "function") {
                console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
              exports.unstable_shouldYield = function() {
                return exports.unstable_now() >= deadline;
              };
              requestPaint = function() {
              };
            }
            exports.unstable_forceFrameRate = function(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps);
              } else {
                yieldInterval = 5;
              }
            };
            var performWorkUntilDeadline = function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now();
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  } else {
                    port.postMessage(null);
                  }
                } catch (error2) {
                  port.postMessage(null);
                  throw error2;
                }
              } else {
                isMessageLoopRunning = false;
              }
            };
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = function(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
              }
            };
            requestHostTimeout = function(callback, ms) {
              taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
              }, ms);
            };
            cancelHostTimeout = function() {
              _clearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            };
          }
          function push(heap, node3) {
            var index = heap.length;
            heap.push(node3);
            siftUp(heap, node3, index);
          }
          function peek2(heap) {
            var first = heap[0];
            return first === void 0 ? null : first;
          }
          function pop(heap) {
            var first = heap[0];
            if (first !== void 0) {
              var last3 = heap.pop();
              if (last3 !== first) {
                heap[0] = last3;
                siftDown(heap, last3, 0);
              }
              return first;
            } else {
              return null;
            }
          }
          function siftUp(heap, node3, i) {
            var index = i;
            while (true) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (parent !== void 0 && compare(parent, node3) > 0) {
                heap[parentIndex] = node3;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node3, i) {
            var index = i;
            var length2 = heap.length;
            while (index < length2) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (left !== void 0 && compare(left, node3) < 0) {
                if (right !== void 0 && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node3;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node3;
                  index = leftIndex;
                }
              } else if (right !== void 0 && compare(right, node3) < 0) {
                heap[index] = right;
                heap[rightIndex] = node3;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a2, b2) {
            var diff = a2.sortIndex - b2.sortIndex;
            return diff !== 0 ? diff : a2.id - b2.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          function advanceTimers(currentTime) {
            var timer = peek2(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek2(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek2(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek2(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error2) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error2;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek2(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek2(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek2(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime = currentTime + delay;
              } else {
                startTime = currentTime;
              }
            } else {
              startTime = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime,
              expirationTime,
              sortIndex: -1
            };
            if (startTime > currentTime) {
              newTask.sortIndex = startTime;
              push(timerQueue, newTask);
              if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek2(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_wrapCallback = unstable_wrapCallback;
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler-tracing.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var DEFAULT_THREAD_ID = 0;
          var interactionIDCounter = 0;
          var threadIDCounter = 0;
          exports.__interactionsRef = null;
          exports.__subscriberRef = null;
          {
            exports.__interactionsRef = {
              current: /* @__PURE__ */ new Set()
            };
            exports.__subscriberRef = {
              current: null
            };
          }
          function unstable_clear(callback) {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = /* @__PURE__ */ new Set();
            try {
              return callback();
            } finally {
              exports.__interactionsRef.current = prevInteractions;
            }
          }
          function unstable_getCurrent() {
            {
              return exports.__interactionsRef.current;
            }
          }
          function unstable_getThreadID() {
            return ++threadIDCounter;
          }
          function unstable_trace(name, timestamp, callback) {
            var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
            var interaction = {
              __count: 1,
              id: interactionIDCounter++,
              name,
              timestamp
            };
            var prevInteractions = exports.__interactionsRef.current;
            var interactions = new Set(prevInteractions);
            interactions.add(interaction);
            exports.__interactionsRef.current = interactions;
            var subscriber = exports.__subscriberRef.current;
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onInteractionTraced(interaction);
              }
            } finally {
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(interactions, threadID);
                }
              } finally {
                try {
                  returnValue = callback();
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(interactions, threadID);
                    }
                  } finally {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  }
                }
              }
            }
            return returnValue;
          }
          function unstable_wrap(callback) {
            var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
            var wrappedInteractions = exports.__interactionsRef.current;
            var subscriber = exports.__subscriberRef.current;
            if (subscriber !== null) {
              subscriber.onWorkScheduled(wrappedInteractions, threadID);
            }
            wrappedInteractions.forEach(function(interaction) {
              interaction.__count++;
            });
            var hasRun = false;
            function wrapped() {
              var prevInteractions = exports.__interactionsRef.current;
              exports.__interactionsRef.current = wrappedInteractions;
              subscriber = exports.__subscriberRef.current;
              try {
                var returnValue;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(wrappedInteractions, threadID);
                  }
                } finally {
                  try {
                    returnValue = callback.apply(void 0, arguments);
                  } finally {
                    exports.__interactionsRef.current = prevInteractions;
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                  }
                }
                return returnValue;
              } finally {
                if (!hasRun) {
                  hasRun = true;
                  wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  });
                }
              }
            }
            wrapped.cancel = function cancel() {
              subscriber = exports.__subscriberRef.current;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkCanceled(wrappedInteractions, threadID);
                }
              } finally {
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            };
            return wrapped;
          }
          var subscribers = null;
          {
            subscribers = /* @__PURE__ */ new Set();
          }
          function unstable_subscribe(subscriber) {
            {
              subscribers.add(subscriber);
              if (subscribers.size === 1) {
                exports.__subscriberRef.current = {
                  onInteractionScheduledWorkCompleted,
                  onInteractionTraced,
                  onWorkCanceled,
                  onWorkScheduled,
                  onWorkStarted,
                  onWorkStopped
                };
              }
            }
          }
          function unstable_unsubscribe(subscriber) {
            {
              subscribers.delete(subscriber);
              if (subscribers.size === 0) {
                exports.__subscriberRef.current = null;
              }
            }
          }
          function onInteractionTraced(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionTraced(interaction);
              } catch (error2) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error2;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onInteractionScheduledWorkCompleted(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              } catch (error2) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error2;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkScheduled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkScheduled(interactions, threadID);
              } catch (error2) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error2;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStarted(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error2) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error2;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStopped(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStopped(interactions, threadID);
              } catch (error2) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error2;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkCanceled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkCanceled(interactions, threadID);
              } catch (error2) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error2;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          exports.unstable_clear = unstable_clear;
          exports.unstable_getCurrent = unstable_getCurrent;
          exports.unstable_getThreadID = unstable_getThreadID;
          exports.unstable_subscribe = unstable_subscribe;
          exports.unstable_trace = unstable_trace;
          exports.unstable_unsubscribe = unstable_unsubscribe;
          exports.unstable_wrap = unstable_wrap;
        })();
      }
    }
  });

  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS({
    "node_modules/scheduler/tracing.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_tracing_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React50 = require_react();
          var _assign = require_object_assign();
          var Scheduler = require_scheduler();
          var tracing = require_tracing();
          var ReactSharedInternals = React50.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function warn2(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error2(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          if (!React50) {
            {
              throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment11 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var FundamentalComponent = 20;
          var ScopeComponent = 21;
          var Block = 22;
          var OffscreenComponent = 23;
          var LegacyHiddenComponent = 24;
          var enableProfilerTimer = true;
          var enableFundamentalAPI = false;
          var enableNewReconciler = false;
          var warnAboutStringRefs = false;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error2("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM3 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var ROOT_ATTRIBUTE_NAME = "data-reactroot";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error2("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix3 = name.toLowerCase().slice(0, 5);
                  return prefix3 !== "data-" && prefix3 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref2) {
            var name = _ref2[0], attributeName = _ref2[1];
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
          });
          [
            "capture",
            "download"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token2) {
            return token2[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error2("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node3, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node3[propertyName];
              } else {
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node3.hasAttribute(attributeName)) {
                    var value = node3.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node3.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node3.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node3.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node3, name, expected) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (isOpaqueHydratingObject(expected)) {
                return expected;
              }
              if (!node3.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node3.getAttribute(name);
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node3, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node3.removeAttribute(_attributeName);
                } else {
                  node3.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node3[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node3[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node3.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node3.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node3.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame3 = componentFrameCache.get(fn);
              if (frame3 !== void 0) {
                return frame3;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s >= 1 && c2 >= 0 && sampleLines[s] !== controlLines[c2]) {
                  c2--;
                }
                for (; s >= 1 && c2 >= 0; s--, c2--) {
                  if (sampleLines[s] !== controlLines[c2]) {
                    if (s !== 1 || c2 !== 1) {
                      do {
                        s--;
                        c2--;
                        if (c2 < 0 || sampleLines[s] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case Block:
                return describeFunctionComponentFrame(fiber.type._render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node3 = workInProgress2;
              do {
                info += describeFiber(node3);
                node3 = node3.return;
              } while (node3);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error2("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentName(owner.type);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function getIsRendering() {
            {
              return isRendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "object":
              case "string":
              case "undefined":
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error2("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error2("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node3) {
            return node3._valueTracker;
          }
          function detachTracker(node3) {
            node3._valueTracker = null;
          }
          function getValueFromNode(node3) {
            var value = "";
            if (!node3) {
              return value;
            }
            if (isCheckable(node3)) {
              value = node3.checked ? "true" : "false";
            } else {
              value = node3.value;
            }
            return value;
          }
          function trackValueOnNode(node3) {
            var valueField = isCheckable(node3) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node3.constructor.prototype, valueField);
            var currentValue = "" + node3[valueField];
            if (node3.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get5 = descriptor.get, set4 = descriptor.set;
            Object.defineProperty(node3, valueField, {
              configurable: true,
              get: function() {
                return get5.call(this);
              },
              set: function(value) {
                currentValue = "" + value;
                set4.call(this, value);
              }
            });
            Object.defineProperty(node3, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node3);
                delete node3[valueField];
              }
            };
            return tracker;
          }
          function track(node3) {
            if (getTracker(node3)) {
              return;
            }
            node3._valueTracker = trackValueOnNode(node3);
          }
          function updateValueIfChanged(node3) {
            if (!node3) {
              return false;
            }
            var tracker = getTracker(node3);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node3);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement2(doc2) {
            doc2 = doc2 || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc2 === "undefined") {
              return null;
            }
            try {
              return doc2.activeElement || doc2.body;
            } catch (e) {
              return doc2.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node3 = element;
            var checked2 = props.checked;
            var hostProps = _assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked2 != null ? checked2 : node3._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error2("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error2("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node3 = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node3._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node3 = element;
            var checked2 = props.checked;
            if (checked2 != null) {
              setValueForProperty(node3, "checked", checked2, false);
            }
          }
          function updateWrapper(element, props) {
            var node3 = element;
            {
              var controlled = isControlled(props);
              if (!node3._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error2("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node3._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error2("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node3.value === "" || node3.value != value) {
                  node3.value = toString(value);
                }
              } else if (node3.value !== toString(value)) {
                node3.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node3.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node3, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node3, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node3.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node3 = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node3._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node3.value) {
                    node3.value = initialValue;
                  }
                }
              }
              {
                node3.defaultValue = initialValue;
              }
            }
            var name = node3.name;
            if (name !== "") {
              node3.name = "";
            }
            {
              node3.defaultChecked = !node3.defaultChecked;
              node3.defaultChecked = !!node3._wrapperState.initialChecked;
            }
            if (name !== "") {
              node3.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node3 = element;
            updateWrapper(node3, props);
            updateNamedCousins(node3, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  {
                    throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                  }
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node3, type, value) {
            if (type !== "number" || getActiveElement2(node3.ownerDocument) !== node3) {
              if (value == null) {
                node3.defaultValue = toString(node3._wrapperState.initialValue);
              } else if (node3.defaultValue !== toString(value)) {
                node3.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          function flattenChildren(children) {
            var content = "";
            React50.Children.forEach(children, function(child) {
              if (child == null) {
                return;
              }
              content += child;
            });
            return content;
          }
          function validateProps(element, props) {
            {
              if (typeof props.children === "object" && props.children !== null) {
                React50.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (typeof child.type !== "string") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error2("Only strings and numbers are supported as <option> children.");
                  }
                });
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error2("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          function getHostProps$1(element, props) {
            var hostProps = _assign({
              children: void 0
            }, props);
            var content = flattenChildren(props.children);
            if (content) {
              hostProps.children = content;
            }
            return hostProps;
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var isArray3 = Array.isArray(props[propName]);
                if (props.multiple && !isArray3) {
                  error2("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && isArray3) {
                  error2("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node3, multiple, propValue, setDefaultSelected) {
            var options2 = node3.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$2(element, props) {
            return _assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node3 = element;
            {
              checkSelectPropTypes(props);
            }
            node3._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error2("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node3 = element;
            node3.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node3, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node3, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node3 = element;
            var wasMultiple = node3._wrapperState.wasMultiple;
            node3._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node3, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node3, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node3, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node3 = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node3, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$3(element, props) {
            var node3 = element;
            if (!(props.dangerouslySetInnerHTML == null)) {
              {
                throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              }
            }
            var hostProps = _assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node3._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node3 = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error2("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error2("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (!(defaultValue == null)) {
                    {
                      throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                    }
                  }
                  if (Array.isArray(children)) {
                    if (!(children.length <= 1)) {
                      {
                        throw Error("<textarea> can only have at most one child.");
                      }
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node3._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node3 = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node3.value) {
                node3.value = newValue;
              }
              if (props.defaultValue == null && node3.defaultValue !== newValue) {
                node3.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node3.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node3 = element;
            var textContent = node3.textContent;
            if (textContent === node3._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node3.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          var Namespaces = {
            html: HTML_NAMESPACE,
            mathml: MATH_NAMESPACE,
            svg: SVG_NAMESPACE
          };
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func2) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func2(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func2;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node3, html) {
            if (node3.namespaceURI === Namespaces.svg) {
              if (!("innerHTML" in node3)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node3.firstChild) {
                  node3.removeChild(node3.firstChild);
                }
                while (svgNode.firstChild) {
                  node3.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node3.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node3, text) {
            if (text) {
              var firstChild = node3.firstChild;
              if (firstChild && firstChild === node3.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node3.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix3, key) {
            return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop2) {
            prefixes.forEach(function(prefix3) {
              isUnitlessNumber[prefixKey(prefix3, prop2)] = isUnitlessNumber[prop2];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty3) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty3 && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string2) {
              return string2.replace(hyphenPattern, function(_, character2) {
                return character2.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error2("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error2("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error2(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error2("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error2("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles2) {
            {
              var serialized = "";
              var delimiter2 = "";
              for (var styleName in styles2) {
                if (!styles2.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles2[styleName];
                if (styleValue != null) {
                  var isCustomProperty3 = styleName.indexOf("--") === 0;
                  serialized += delimiter2 + (isCustomProperty3 ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty3);
                  delimiter2 = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node3, styles2) {
            var style2 = node3.style;
            for (var styleName in styles2) {
              if (!styles2.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty3 = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty3) {
                  warnValidStyle$1(styleName, styles2[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles2[styleName], isCustomProperty3);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty3) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles2) {
            var expanded2 = {};
            for (var key in styles2) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded2[longhands[i]] = key;
              }
            }
            return expanded2;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error2("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = _assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag2, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag2]) {
              if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
                {
                  throw Error(tag2 + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                }
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (!(props.children == null)) {
                {
                  throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                }
              }
              if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
                {
                  throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
                }
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error2("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (!(props.style == null || typeof props.style === "object")) {
              {
                throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
              }
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error2("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error2("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error2("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop2) {
                return "`" + prop2 + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error2("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error2("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error2("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error2("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var _hasOwnProperty = Object.prototype.hasOwnProperty;
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error2("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error2("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error2("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error2("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error2("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error2("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error2("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error2("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error2("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error2("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error2("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop2) {
                return "`" + prop2 + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error2("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error2("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var IS_REPLAYED = 1 << 4;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (!(typeof restoreImpl === "function")) {
              {
                throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var discreteUpdatesImpl = function(fn, a2, b2, c2, d) {
            return fn(a2, b2, c2, d);
          };
          var flushDiscreteUpdatesImpl = function() {
          };
          var batchedEventUpdatesImpl = batchedUpdatesImpl;
          var isInsideEventHandler = false;
          var isBatchingEventUpdates = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushDiscreteUpdatesImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, bookkeeping) {
            if (isInsideEventHandler) {
              return fn(bookkeeping);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, bookkeeping);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function batchedEventUpdates(fn, a2, b2) {
            if (isBatchingEventUpdates) {
              return fn(a2, b2);
            }
            isBatchingEventUpdates = true;
            try {
              return batchedEventUpdatesImpl(fn, a2, b2);
            } finally {
              isBatchingEventUpdates = false;
              finishEventHandler();
            }
          }
          function discreteUpdates(fn, a2, b2, c2, d) {
            var prevIsInsideEventHandler = isInsideEventHandler;
            isInsideEventHandler = true;
            try {
              return discreteUpdatesImpl(fn, a2, b2, c2, d);
            } finally {
              isInsideEventHandler = prevIsInsideEventHandler;
              if (!isInsideEventHandler) {
                finishEventHandler();
              }
            }
          }
          function flushDiscreteUpdatesIfNeeded(timeStamp) {
            {
              if (!isInsideEventHandler) {
                flushDiscreteUpdatesImpl();
              }
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            discreteUpdatesImpl = _discreteUpdatesImpl;
            flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
            batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
          }
          function isInteractive(tag2) {
            return tag2 === "button" || tag2 === "input" || tag2 === "select" || tag2 === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (!(!listener || typeof listener === "function")) {
              {
                throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
              }
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM3) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func2, context, a2, b2, c2, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func2.apply(context, funcArgs);
            } catch (error3) {
              this.onError(error3);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func2, context, a2, b2, c2, d, e, f) {
                if (!(typeof document !== "undefined")) {
                  {
                    throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                  }
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func2.apply(context, funcArgs);
                  didError = false;
                }
                var error3;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error3 = event.error;
                  didSetError = true;
                  if (error3 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error3 != null && typeof error3 === "object") {
                      try {
                        error3._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error3 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error3 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error3);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error3) {
              hasError = true;
              caughtError = error3;
            }
          };
          function invokeGuardedCallback(name, func2, context, a2, b2, c2, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func2, context, a2, b2, c2, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error3 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error3;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error3 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error3;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error3 = caughtError;
              hasError = false;
              caughtError = null;
              return error3;
            } else {
              {
                {
                  throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          function get4(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set3(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var PlacementAndUpdate = 6;
          var Deletion = 8;
          var ContentReset = 16;
          var Callback = 32;
          var DidCapture = 64;
          var Ref = 128;
          var Snapshot = 256;
          var Passive = 512;
          var PassiveUnmountPendingDev = 8192;
          var Hydrating = 1024;
          var HydratingAndUpdate = 1028;
          var LifecycleEffectMask = 932;
          var HostEffectMask = 2047;
          var Incomplete = 2048;
          var ShouldCapture = 4096;
          var ForceUpdateForLegacySuspense = 16384;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node3 = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node3;
              do {
                node3 = nextNode;
                if ((node3.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node3.return;
                }
                nextNode = node3.return;
              } while (nextNode);
            } else {
              while (node3.return) {
                node3 = node3.return;
              }
            }
            if (node3.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error2("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get4(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (!(getNearestMountedFiber(fiber) === fiber)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (!(nearestMounted !== null)) {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a2 = fiber;
            var b2 = alternate;
            while (true) {
              var parentA = a2.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a2 = b2 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a2) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b2) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              }
              if (a2.return !== b2.return) {
                a2 = parentA;
                b2 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentA;
                    b2 = parentB;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentA;
                    a2 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a2) {
                      didFindChild = true;
                      a2 = parentB;
                      b2 = parentA;
                      break;
                    }
                    if (_child === b2) {
                      didFindChild = true;
                      b2 = parentB;
                      a2 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    {
                      throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                    }
                  }
                }
              }
              if (!(a2.alternate === b2)) {
                {
                  throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (!(a2.tag === HostRoot)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (a2.stateNode.current === a2) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node3 = currentParent;
            while (true) {
              if (node3.tag === HostComponent || node3.tag === HostText) {
                return node3;
              } else if (node3.child) {
                node3.child.return = node3;
                node3 = node3.child;
                continue;
              }
              if (node3 === currentParent) {
                return null;
              }
              while (!node3.sibling) {
                if (!node3.return || node3.return === currentParent) {
                  return null;
                }
                node3 = node3.return;
              }
              node3.sibling.return = node3.return;
              node3 = node3.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node3 = currentParent;
            while (true) {
              if (node3.tag === HostComponent || node3.tag === HostText || enableFundamentalAPI) {
                return node3;
              } else if (node3.child && node3.tag !== HostPortal) {
                node3.child.return = node3;
                node3 = node3.child;
                continue;
              }
              if (node3 === currentParent) {
                return null;
              }
              while (!node3.sibling) {
                if (!node3.return || node3.return === currentParent) {
                  return null;
                }
                node3 = node3.return;
              }
              node3.sibling.return = node3.return;
              node3 = node3.sibling;
            }
            return null;
          }
          function doesFiberContain(parentFiber, childFiber) {
            var node3 = childFiber;
            var parentFiberAlternate = parentFiber.alternate;
            while (node3 !== null) {
              if (node3 === parentFiber || node3 === parentFiberAlternate) {
                return true;
              }
              node3 = node3.return;
            }
            return false;
          }
          var attemptUserBlockingHydration;
          function setAttemptUserBlockingHydration(fn) {
            attemptUserBlockingHydration = fn;
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          function hasQueuedDiscreteEvents() {
            return queuedDiscreteEvents.length > 0;
          }
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isReplayableDiscreteEvent(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags: eventSystemFlags | IS_REPLAYED,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            queuedDiscreteEvents.push(queuedEvent);
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag2 = nearestMounted.tag;
                if (tag2 === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                      Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                        attemptHydrationAtCurrentPriority(nearestMounted);
                      });
                    });
                    return;
                  }
                } else if (tag2 === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (root3.hydrate) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            while (queuedDiscreteEvents.length > 0) {
              var nextDiscreteEvent = queuedDiscreteEvents[0];
              if (nextDiscreteEvent.blockedOn !== null) {
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) {
                  attemptUserBlockingHydration(_fiber4);
                }
                break;
              }
              var targetContainers = nextDiscreteEvent.targetContainers;
              while (targetContainers.length > 0) {
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                  nextDiscreteEvent.blockedOn = nextBlockedOn;
                  break;
                }
                targetContainers.shift();
              }
              if (nextDiscreteEvent.blockedOn === null) {
                queuedDiscreteEvents.shift();
              }
            }
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var DiscreteEvent = 0;
          var UserBlockingEvent = 1;
          var ContinuousEvent = 2;
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM3) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var eventPriorities = /* @__PURE__ */ new Map();
          var discreteEventPairsForSimpleEventPlugin = [
            "cancel",
            "cancel",
            "click",
            "click",
            "close",
            "close",
            "contextmenu",
            "contextMenu",
            "copy",
            "copy",
            "cut",
            "cut",
            "auxclick",
            "auxClick",
            "dblclick",
            "doubleClick",
            "dragend",
            "dragEnd",
            "dragstart",
            "dragStart",
            "drop",
            "drop",
            "focusin",
            "focus",
            "focusout",
            "blur",
            "input",
            "input",
            "invalid",
            "invalid",
            "keydown",
            "keyDown",
            "keypress",
            "keyPress",
            "keyup",
            "keyUp",
            "mousedown",
            "mouseDown",
            "mouseup",
            "mouseUp",
            "paste",
            "paste",
            "pause",
            "pause",
            "play",
            "play",
            "pointercancel",
            "pointerCancel",
            "pointerdown",
            "pointerDown",
            "pointerup",
            "pointerUp",
            "ratechange",
            "rateChange",
            "reset",
            "reset",
            "seeked",
            "seeked",
            "submit",
            "submit",
            "touchcancel",
            "touchCancel",
            "touchend",
            "touchEnd",
            "touchstart",
            "touchStart",
            "volumechange",
            "volumeChange"
          ];
          var otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"];
          var userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"];
          var continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
          function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
            for (var i = 0; i < eventTypes.length; i += 2) {
              var topEvent = eventTypes[i];
              var event = eventTypes[i + 1];
              var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
              var reactName = "on" + capitalizedEvent;
              eventPriorities.set(topEvent, priority);
              topLevelEventsToReactNames.set(topEvent, reactName);
              registerTwoPhaseEvent(reactName, [topEvent]);
            }
          }
          function setEventPriorities(eventTypes, priority) {
            for (var i = 0; i < eventTypes.length; i++) {
              eventPriorities.set(eventTypes[i], priority);
            }
          }
          function getEventPriorityForPluginSystem(domEventName) {
            var priority = eventPriorities.get(domEventName);
            return priority === void 0 ? ContinuousEvent : priority;
          }
          function registerSimpleEvents() {
            registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
            registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
            registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
            setEventPriorities(otherDiscreteEvents, DiscreteEvent);
          }
          var Scheduler_now = Scheduler.unstable_now;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var ImmediatePriority = 99;
          var UserBlockingPriority = 98;
          var NormalPriority = 97;
          var LowPriority = 96;
          var IdlePriority = 95;
          var NoPriority = 90;
          var initialTimeMs = Scheduler_now();
          var SyncLanePriority = 15;
          var SyncBatchedLanePriority = 14;
          var InputDiscreteHydrationLanePriority = 13;
          var InputDiscreteLanePriority = 12;
          var InputContinuousHydrationLanePriority = 11;
          var InputContinuousLanePriority = 10;
          var DefaultHydrationLanePriority = 9;
          var DefaultLanePriority = 8;
          var TransitionHydrationPriority = 7;
          var TransitionPriority = 6;
          var RetryLanePriority = 5;
          var SelectiveHydrationLanePriority = 4;
          var IdleHydrationLanePriority = 3;
          var IdleLanePriority = 2;
          var OffscreenLanePriority = 1;
          var NoLanePriority = 0;
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var SyncBatchedLane = 2;
          var InputDiscreteHydrationLane = 4;
          var InputDiscreteLanes = 24;
          var InputContinuousHydrationLane = 32;
          var InputContinuousLanes = 192;
          var DefaultHydrationLane = 256;
          var DefaultLanes = 3584;
          var TransitionHydrationLane = 4096;
          var TransitionLanes = 4186112;
          var RetryLanes = 62914560;
          var SomeRetryLane = 33554432;
          var SelectiveHydrationLane = 67108864;
          var NonIdleLanes = 134217727;
          var IdleHydrationLane = 134217728;
          var IdleLanes = 805306368;
          var OffscreenLane = 1073741824;
          var NoTimestamp = -1;
          function setCurrentUpdateLanePriority(newLanePriority) {
          }
          var return_highestLanePriority = DefaultLanePriority;
          function getHighestPriorityLanes(lanes) {
            if ((SyncLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncLanePriority;
              return SyncLane;
            }
            if ((SyncBatchedLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncBatchedLanePriority;
              return SyncBatchedLane;
            }
            if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
              return_highestLanePriority = InputDiscreteHydrationLanePriority;
              return InputDiscreteHydrationLane;
            }
            var inputDiscreteLanes = InputDiscreteLanes & lanes;
            if (inputDiscreteLanes !== NoLanes) {
              return_highestLanePriority = InputDiscreteLanePriority;
              return inputDiscreteLanes;
            }
            if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
              return_highestLanePriority = InputContinuousHydrationLanePriority;
              return InputContinuousHydrationLane;
            }
            var inputContinuousLanes = InputContinuousLanes & lanes;
            if (inputContinuousLanes !== NoLanes) {
              return_highestLanePriority = InputContinuousLanePriority;
              return inputContinuousLanes;
            }
            if ((lanes & DefaultHydrationLane) !== NoLanes) {
              return_highestLanePriority = DefaultHydrationLanePriority;
              return DefaultHydrationLane;
            }
            var defaultLanes = DefaultLanes & lanes;
            if (defaultLanes !== NoLanes) {
              return_highestLanePriority = DefaultLanePriority;
              return defaultLanes;
            }
            if ((lanes & TransitionHydrationLane) !== NoLanes) {
              return_highestLanePriority = TransitionHydrationPriority;
              return TransitionHydrationLane;
            }
            var transitionLanes = TransitionLanes & lanes;
            if (transitionLanes !== NoLanes) {
              return_highestLanePriority = TransitionPriority;
              return transitionLanes;
            }
            var retryLanes = RetryLanes & lanes;
            if (retryLanes !== NoLanes) {
              return_highestLanePriority = RetryLanePriority;
              return retryLanes;
            }
            if (lanes & SelectiveHydrationLane) {
              return_highestLanePriority = SelectiveHydrationLanePriority;
              return SelectiveHydrationLane;
            }
            if ((lanes & IdleHydrationLane) !== NoLanes) {
              return_highestLanePriority = IdleHydrationLanePriority;
              return IdleHydrationLane;
            }
            var idleLanes = IdleLanes & lanes;
            if (idleLanes !== NoLanes) {
              return_highestLanePriority = IdleLanePriority;
              return idleLanes;
            }
            if ((OffscreenLane & lanes) !== NoLanes) {
              return_highestLanePriority = OffscreenLanePriority;
              return OffscreenLane;
            }
            {
              error2("Should have found matching lanes. This is a bug in React.");
            }
            return_highestLanePriority = DefaultLanePriority;
            return lanes;
          }
          function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
            switch (schedulerPriorityLevel) {
              case ImmediatePriority:
                return SyncLanePriority;
              case UserBlockingPriority:
                return InputContinuousLanePriority;
              case NormalPriority:
              case LowPriority:
                return DefaultLanePriority;
              case IdlePriority:
                return IdleLanePriority;
              default:
                return NoLanePriority;
            }
          }
          function lanePriorityToSchedulerPriority(lanePriority) {
            switch (lanePriority) {
              case SyncLanePriority:
              case SyncBatchedLanePriority:
                return ImmediatePriority;
              case InputDiscreteHydrationLanePriority:
              case InputDiscreteLanePriority:
              case InputContinuousHydrationLanePriority:
              case InputContinuousLanePriority:
                return UserBlockingPriority;
              case DefaultHydrationLanePriority:
              case DefaultLanePriority:
              case TransitionHydrationPriority:
              case TransitionPriority:
              case SelectiveHydrationLanePriority:
              case RetryLanePriority:
                return NormalPriority;
              case IdleHydrationLanePriority:
              case IdleLanePriority:
              case OffscreenLanePriority:
                return IdlePriority;
              case NoLanePriority:
                return NoPriority;
              default: {
                {
                  throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
                }
              }
            }
          }
          function getNextLanes(root3, wipLanes) {
            var pendingLanes = root3.pendingLanes;
            if (pendingLanes === NoLanes) {
              return_highestLanePriority = NoLanePriority;
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var nextLanePriority = NoLanePriority;
            var expiredLanes = root3.expiredLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            if (expiredLanes !== NoLanes) {
              nextLanes = expiredLanes;
              nextLanePriority = return_highestLanePriority = SyncLanePriority;
            } else {
              var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
              if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                  if (nonIdlePingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              } else {
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(unblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              getHighestPriorityLanes(wipLanes);
              var wipLanePriority = return_highestLanePriority;
              if (nextLanePriority <= wipLanePriority) {
                return wipLanes;
              } else {
                return_highestLanePriority = nextLanePriority;
              }
            }
            var entangledLanes = root3.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root3.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root3, lanes) {
            var eventTimes = root3.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            getHighestPriorityLanes(lane);
            var priority = return_highestLanePriority;
            if (priority >= InputContinuousLanePriority) {
              return currentTime + 250;
            } else if (priority >= TransitionPriority) {
              return currentTime + 5e3;
            } else {
              return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root3, currentTime) {
            var pendingLanes = root3.pendingLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root3.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getLanesToRetrySynchronouslyOnError(root3) {
            var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function returnNextLanesPriority() {
            return return_highestLanePriority;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function findUpdateLane(lanePriority, wipLanes) {
            switch (lanePriority) {
              case NoLanePriority:
                break;
              case SyncLanePriority:
                return SyncLane;
              case SyncBatchedLanePriority:
                return SyncBatchedLane;
              case InputDiscreteLanePriority: {
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) {
                  return findUpdateLane(InputContinuousLanePriority, wipLanes);
                }
                return _lane;
              }
              case InputContinuousLanePriority: {
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) {
                  return findUpdateLane(DefaultLanePriority, wipLanes);
                }
                return _lane2;
              }
              case DefaultLanePriority: {
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                  if (_lane3 === NoLane) {
                    _lane3 = pickArbitraryLane(DefaultLanes);
                  }
                }
                return _lane3;
              }
              case TransitionPriority:
              case RetryLanePriority:
                break;
              case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) {
                  lane = pickArbitraryLane(IdleLanes);
                }
                return lane;
            }
            {
              {
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
              }
            }
          }
          function findTransitionLane(wipLanes, pendingLanes) {
            var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
              if (lane === NoLane) {
                lane = pickArbitraryLane(TransitionLanes);
              }
            }
            return lane;
          }
          function findRetryLane(wipLanes) {
            var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(RetryLanes);
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function getLowestPriorityLane(lanes) {
            var index2 = 31 - clz32(lanes);
            return index2 < 0 ? NoLanes : 1 << index2;
          }
          function getEqualOrHigherPriorityLanes(lanes) {
            return (getLowestPriorityLane(lanes) << 1) - 1;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a2, b2) {
            return (a2 & b2) !== NoLanes;
          }
          function isSubsetOfLanes(set4, subset) {
            return (set4 & subset) === subset;
          }
          function mergeLanes(a2, b2) {
            return a2 | b2;
          }
          function removeLanes(set4, subset) {
            return set4 & ~subset;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a2, b2) {
            return a2 !== NoLane && a2 < b2 ? a2 : b2;
          }
          function createLaneMap(initial3) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial3);
            }
            return laneMap;
          }
          function markRootUpdated(root3, updateLane, eventTime) {
            root3.pendingLanes |= updateLane;
            var higherPriorityLanes = updateLane - 1;
            root3.suspendedLanes &= higherPriorityLanes;
            root3.pingedLanes &= higherPriorityLanes;
            var eventTimes = root3.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root3, suspendedLanes) {
            root3.suspendedLanes |= suspendedLanes;
            root3.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root3, pingedLanes, eventTime) {
            root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
          }
          function markDiscreteUpdatesExpired(root3) {
            root3.expiredLanes |= InputDiscreteLanes & root3.pendingLanes;
          }
          function hasDiscreteLanes(lanes) {
            return (lanes & InputDiscreteLanes) !== NoLanes;
          }
          function markRootMutableRead(root3, updateLane) {
            root3.mutableReadLanes |= updateLane & root3.pendingLanes;
          }
          function markRootFinished(root3, remainingLanes) {
            var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
            root3.pendingLanes = remainingLanes;
            root3.suspendedLanes = 0;
            root3.pingedLanes = 0;
            root3.expiredLanes &= remainingLanes;
            root3.mutableReadLanes &= remainingLanes;
            root3.entangledLanes &= remainingLanes;
            var entanglements = root3.entanglements;
            var eventTimes = root3.eventTimes;
            var expirationTimes = root3.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root3, entangledLanes) {
            root3.entangledLanes |= entangledLanes;
            var entanglements = root3.entanglements;
            var lanes = entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] |= entangledLanes;
              lanes &= ~lane;
            }
          }
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(lanes) {
            if (lanes === 0) {
              return 32;
            }
            return 31 - (log(lanes) / LN2 | 0) | 0;
          }
          var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriorityForPluginSystem(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
              case ContinuousEvent:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container3, nativeEvent) {
            {
              flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
            }
            discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container3, nativeEvent);
          }
          function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container3, nativeEvent) {
            {
              runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container3, nativeEvent));
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            var allowReplay = true;
            {
              allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
            }
            if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
              queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              return;
            }
            var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              if (allowReplay) {
                clearIfContinuousEvent(domEventName, nativeEvent);
              }
              return;
            }
            if (allowReplay) {
              if (isReplayableDiscreteEvent(domEventName)) {
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
              }
              if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
                return;
              }
              clearIfContinuousEvent(domEventName, nativeEvent);
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag2 = nearestMounted.tag;
                if (tag2 === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag2 === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (root3.hydrate) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
            return null;
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root2 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root2 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root2 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root2) {
              return root2.value;
            }
            return root2.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize2 = Interface[_propName];
                if (normalize2) {
                  this[_propName] = normalize2(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            _assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = _assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = _assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = _assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = _assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = _assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = _assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = _assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = _assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = _assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = _assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = _assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = _assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM3 && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM3 && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM3 && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM3 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM3) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM3) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node3) {
            var state2 = node3._wrapperState;
            if (!state2 || !state2.controlled || node3.type !== "number") {
              return;
            }
            {
              setDefaultValue(node3, "number", node3.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win2;
            if (nativeEventTarget.window === nativeEventTarget) {
              win2 = nativeEventTarget;
            } else {
              var doc2 = nativeEventTarget.ownerDocument;
              if (doc2) {
                win2 = doc2.defaultView || doc2.parentWindow;
              } else {
                win2 = window;
              }
            }
            var from2;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from2 = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from2 = null;
              to = targetInst;
            }
            if (from2 === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from2 == null ? win2 : getNodeFromInstance(from2);
            var toNode = to == null ? win2 : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter7 = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter7 = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter7, from2, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node3) {
            while (node3 && node3.firstChild) {
              node3 = node3.firstChild;
            }
            return node3;
          }
          function getSiblingNode(node3) {
            while (node3) {
              if (node3.nextSibling) {
                return node3.nextSibling;
              }
              node3 = node3.parentNode;
            }
          }
          function getNodeForCharacterOffset(root3, offset) {
            var node3 = getLeafNode(root3);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node3) {
              if (node3.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node3.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node: node3,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node3 = getLeafNode(getSiblingNode(node3));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win2 = ownerDocument && ownerDocument.defaultView || window;
            var selection = win2.getSelection && win2.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length2 = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node3 = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next2 = null;
                while (true) {
                  if (node3 === anchorNode && (anchorOffset === 0 || node3.nodeType === TEXT_NODE)) {
                    start = length2 + anchorOffset;
                  }
                  if (node3 === focusNode && (focusOffset === 0 || node3.nodeType === TEXT_NODE)) {
                    end = length2 + focusOffset;
                  }
                  if (node3.nodeType === TEXT_NODE) {
                    length2 += node3.nodeValue.length;
                  }
                  if ((next2 = node3.firstChild) === null) {
                    break;
                  }
                  parentNode = node3;
                  node3 = next2;
                }
                while (true) {
                  if (node3 === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length2;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length2;
                  }
                  if ((next2 = node3.nextSibling) !== null) {
                    break;
                  }
                  node3 = parentNode;
                  parentNode = node3.parentNode;
                }
                node3 = next2;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node3, offsets) {
            var doc2 = node3.ownerDocument || document;
            var win2 = doc2 && doc2.defaultView || window;
            if (!win2.getSelection) {
              return;
            }
            var selection = win2.getSelection();
            var length2 = node3.textContent.length;
            var start = Math.min(offsets.start, length2);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length2);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node3, start);
            var endMarker = getNodeForCharacterOffset(node3, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc2.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node3) {
            return node3 && node3.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node3) {
            return node3 && node3.ownerDocument && containsNode(node3.ownerDocument.documentElement, node3);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win2 = window;
            var element = getActiveElement2();
            while (element instanceof win2.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win2 = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement2(win2.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM3 && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node3) {
            if ("selectionStart" in node3 && hasSelectionCapabilities(node3)) {
              return {
                start: node3.selectionStart,
                end: node3.selectionEnd
              };
            } else {
              var win2 = node3.ownerDocument && node3.ownerDocument.defaultView || window;
              var selection = win2.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc2 = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement2(doc2)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            {
              if (rootContainerElement[listeningMarker]) {
                return;
              }
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement, null);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement, null);
              });
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
            var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
            var target = rootContainerElement;
            if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE) {
              target = rootContainerElement.ownerDocument;
            }
            if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
              if (domEventName !== "scroll") {
                return;
              }
              eventSystemFlags |= IS_NON_DELEGATED;
              target = targetElement;
            }
            var listenerSet = getEventListenerSet(target);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              if (isCapturePhaseListener) {
                eventSystemFlags |= IS_CAPTURE_PHASE;
              }
              addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node3 = targetInst;
                mainLoop:
                  while (true) {
                    if (node3 === null) {
                      return;
                    }
                    var nodeTag = node3.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container3 = node3.stateNode.containerInfo;
                      if (isMatchingRootContainer(container3, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node3.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container3 !== null) {
                        var parentNode = getClosestInstanceFromNode(container3);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node3 = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container3 = container3.parentNode;
                      }
                    }
                    node3 = node3.return;
                  }
              }
            }
            batchedEventUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag2 = _instance2.tag;
              if (tag2 === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag2 = _instance3.tag;
              if (tag2 === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag2 = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag2 === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to) {
            var common = from2 && to ? getLowestCommonAncestor(from2, to) : null;
            if (from2 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var HTML_NAMESPACE$1 = Namespaces.html;
          var warnedUnknownTags;
          var suppressHydrationWarning;
          var validatePropertiesInDevelopment;
          var warnForTextDifference;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeMarkupForTextOrAttribute;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM3 && !document.documentMode;
            var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
            var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
            normalizeMarkupForTextOrAttribute = function(markup) {
              var markupString = typeof markup === "string" ? markup : "" + markup;
              return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
            };
            warnForTextDifference = function(serverText, clientText) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
              var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
              if (normalizedServerText === normalizedClientText) {
                return;
              }
              didWarnInvalidHydration = true;
              error2('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            };
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names3 = [];
              attributeNames.forEach(function(name) {
                names3.push(name);
              });
              error2("Extra attributes from the server: %s", names3);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error2("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error2("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop6() {
          }
          function trapClickOnNonInteractiveElement(node3) {
            node3.onclick = noop6;
          }
          function setInitialDOMProperties(tag2, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag2 !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement37(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE$1) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE$1) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error2("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node3 = domElement;
                  if (props.multiple) {
                    node3.multiple = true;
                  } else if (props.size) {
                    node3.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE$1) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error2("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag2, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag2, rawProps);
            {
              validatePropertiesInDevelopment(tag2, rawProps);
            }
            var props;
            switch (tag2) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag2, props);
            setInitialDOMProperties(tag2, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag2) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag2, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag2, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag2) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "option":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag2, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else if (typeof nextProp === "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
                nextProp.toString();
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag2, lastRawProps, nextRawProps) {
            if (tag2 === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag2, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag2, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag2) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag2, rawProps, parentNamespace, rootContainerElement) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
              isCustomComponentTag = isCustomComponent(tag2, rawProps);
              validatePropertiesInDevelopment(tag2, rawProps);
            }
            switch (tag2) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag2, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "data-reactroot":
                    break;
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      ownNamespace = getIntrinsicNamespace(tag2);
                    }
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
            switch (tag2) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForUnmatchedText(textNode, text) {
            {
              warnForTextDifference(textNode.nodeValue, text);
            }
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag2, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Expected server HTML to contain a matching <%s> in <%s>.", tag2, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag2, props) {
            switch (tag2) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag2) {
              var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag: tag2
              };
              if (inScopeTags.indexOf(tag2) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag2) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag2) !== -1 && tag2 !== "address" && tag2 !== "div" && tag2 !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag2 === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag2 === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag2 === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag2 === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag2 === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag2 === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag2 === "dd" || tag2 === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag2, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag2 === "option" || tag2 === "optgroup" || tag2 === "#text";
                case "optgroup":
                  return tag2 === "option" || tag2 === "#text";
                case "option":
                  return tag2 === "#text";
                case "tr":
                  return tag2 === "th" || tag2 === "td" || tag2 === "style" || tag2 === "script" || tag2 === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag2 === "tr" || tag2 === "style" || tag2 === "script" || tag2 === "template";
                case "colgroup":
                  return tag2 === "col" || tag2 === "template";
                case "table":
                  return tag2 === "caption" || tag2 === "colgroup" || tag2 === "tbody" || tag2 === "tfoot" || tag2 === "thead" || tag2 === "style" || tag2 === "script" || tag2 === "template";
                case "head":
                  return tag2 === "base" || tag2 === "basefont" || tag2 === "bgsound" || tag2 === "link" || tag2 === "meta" || tag2 === "title" || tag2 === "noscript" || tag2 === "noframes" || tag2 === "style" || tag2 === "script" || tag2 === "template";
                case "html":
                  return tag2 === "head" || tag2 === "body" || tag2 === "frameset";
                case "frameset":
                  return tag2 === "frame";
                case "#document":
                  return tag2 === "html";
              }
              switch (tag2) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag2, ancestorInfo) {
              switch (tag2) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error2("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error2("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error2("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1;
          {
            SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          }
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function shouldAutoFocusHostComponent(type, props) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
            }
            return false;
          }
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root3 = rootContainerInstance.documentElement;
                namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container3 = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container3.namespaceURI || null;
                type = container3.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string2 = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string2, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement37(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            return shouldAutoFocusHostComponent(type, props);
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string2 = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string2, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            if (shouldAutoFocusHostComponent(type, newProps)) {
              domElement.focus();
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateFiberProps(domElement, newProps);
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container3, child) {
            var parentNode;
            if (container3.nodeType === COMMENT_NODE) {
              parentNode = container3.parentNode;
              parentNode.insertBefore(child, container3);
            } else {
              parentNode = container3;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container3._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container3, child, beforeChild) {
            if (container3.nodeType === COMMENT_NODE) {
              container3.parentNode.insertBefore(child, beforeChild);
            } else {
              container3.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container3, child) {
            if (container3.nodeType === COMMENT_NODE) {
              container3.parentNode.removeChild(child);
            } else {
              container3.removeChild(child);
            }
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container3) {
            if (container3.nodeType === ELEMENT_NODE) {
              container3.textContent = "";
            } else if (container3.nodeType === DOCUMENT_NODE) {
              var body = container3.body;
              if (body != null) {
                body.textContent = "";
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getNextHydratable(node3) {
            for (; node3 != null; node3 = node3.nextSibling) {
              var nodeType = node3.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
            }
            return node3;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            return diffHydratedProperties(instance, type, props, parentNamespace);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            return diffHydratedText(textInstance, text);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node3 = suspenseInstance.nextSibling;
            var depth = 0;
            while (node3) {
              if (node3.nodeType === COMMENT_NODE) {
                var data = node3.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node3);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node3 = node3.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node3 = targetInstance.previousSibling;
            var depth = 0;
            while (node3) {
              if (node3.nodeType === COMMENT_NODE) {
                var data = node3.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node3;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node3 = node3.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container3) {
            retryIfBlockedOn(container3);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
            {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotHydrateContainerInstance(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
          function didNotFindHydratableContainerInstance(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableContainerTextInstance(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
          function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
              ;
          }
          var clientId = 0;
          function makeClientIdInDEV(warnOnAccessInDEV) {
            var id2 = "r:" + (clientId++).toString(36);
            return {
              toString: function() {
                warnOnAccessInDEV();
                return id2;
              },
              valueOf: function() {
                warnOnAccessInDEV();
                return id2;
              }
            };
          }
          function isOpaqueHydratingObject(value) {
            return value !== null && typeof value === "object" && value.$$typeof === REACT_OPAQUE_ID_TYPE;
          }
          function makeOpaqueHydratingObject(attemptToReadValue) {
            return {
              $$typeof: REACT_OPAQUE_ID_TYPE,
              toString: attemptToReadValue,
              valueOf: attemptToReadValue
            };
          }
          function preparePortalMount(portalInstance) {
            {
              listenToAllSupportedEvents(portalInstance);
            }
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          function precacheFiberNode(hostInst, node3) {
            node3[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node3) {
            node3[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node3) {
            node3[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node3) {
            return !!node3[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node3) {
            var inst = node3[internalInstanceKey] || node3[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            {
              {
                throw Error("getNodeFromInstance: Invalid argument.");
              }
            }
          }
          function getFiberCurrentPropsFromNode(node3) {
            return node3[internalPropsKey] || null;
          }
          function updateFiberProps(node3, props) {
            node3[internalPropsKey] = props;
          }
          function getEventListenerSet(node3) {
            var elementListenerSet = node3[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node3[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error2("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor2, fiber) {
            if (index < 0) {
              {
                error2("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error2("Unexpected Fiber popped.");
              }
            }
            cursor2.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor2, value, fiber) {
            index++;
            valueStack[index] = cursor2.current;
            {
              fiberStack[index] = fiber;
            }
            cursor2.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (!(contextStackCursor.current === emptyContextObject)) {
                {
                  throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentName(type) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error2("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  {
                    throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                  }
                }
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return _assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                {
                  throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                {
                  throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var node3 = fiber;
              do {
                switch (node3.tag) {
                  case HostRoot:
                    return node3.stateNode.context;
                  case ClassComponent: {
                    var Component2 = node3.type;
                    if (isContextProvider(Component2)) {
                      return node3.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node3 = node3.return;
              } while (node3 !== null);
              {
                {
                  throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          var LegacyRoot = 0;
          var BlockingRoot = 1;
          var ConcurrentRoot = 2;
          var rendererID = null;
          var injectedHook = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error2("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error2("React instrumentation encountered an error: %s.", err);
              }
            }
            return true;
          }
          function onScheduleRoot(root3, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root3, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root3, priorityLevel) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root3.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  injectedHook.onCommitFiberRoot(rendererID, root3, priorityLevel, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var fakeCallbackNode = {};
          var ImmediatePriority$1 = 99;
          var UserBlockingPriority$2 = 98;
          var NormalPriority$1 = 97;
          var LowPriority$1 = 96;
          var IdlePriority$1 = 95;
          var NoPriority$1 = 90;
          var shouldYield = Scheduler_shouldYield;
          var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
          };
          var syncQueue = null;
          var immediateQueueCallbackNode = null;
          var isFlushingSyncQueue = false;
          var initialTimeMs$1 = Scheduler_now$1();
          var now = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
            return Scheduler_now$1() - initialTimeMs$1;
          };
          function getCurrentPriorityLevel() {
            switch (Scheduler_getCurrentPriorityLevel()) {
              case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
              case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
              case Scheduler_NormalPriority:
                return NormalPriority$1;
              case Scheduler_LowPriority:
                return LowPriority$1;
              case Scheduler_IdlePriority:
                return IdlePriority$1;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function reactPriorityToSchedulerPriority(reactPriorityLevel) {
            switch (reactPriorityLevel) {
              case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
              case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
              case NormalPriority$1:
                return Scheduler_NormalPriority;
              case LowPriority$1:
                return Scheduler_LowPriority;
              case IdlePriority$1:
                return Scheduler_IdlePriority;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function runWithPriority$1(reactPriorityLevel, fn) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_runWithPriority(priorityLevel, fn);
          }
          function scheduleCallback(reactPriorityLevel, callback, options2) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_scheduleCallback(priorityLevel, callback, options2);
          }
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
              immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
            } else {
              syncQueue.push(callback);
            }
            return fakeCallbackNode;
          }
          function cancelCallback(callbackNode) {
            if (callbackNode !== fakeCallbackNode) {
              Scheduler_cancelCallback(callbackNode);
            }
          }
          function flushSyncCallbackQueue() {
            if (immediateQueueCallbackNode !== null) {
              var node3 = immediateQueueCallbackNode;
              immediateQueueCallbackNode = null;
              Scheduler_cancelCallback(node3);
            }
            flushSyncCallbackQueueImpl();
          }
          function flushSyncCallbackQueueImpl() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              {
                try {
                  var _isSync2 = true;
                  var _queue = syncQueue;
                  runWithPriority$1(ImmediatePriority$1, function() {
                    for (; i < _queue.length; i++) {
                      var callback = _queue[i];
                      do {
                        callback = callback(_isSync2);
                      } while (callback !== null);
                    }
                  });
                  syncQueue = null;
                } catch (error3) {
                  if (syncQueue !== null) {
                    syncQueue = syncQueue.slice(i + 1);
                  }
                  Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                  throw error3;
                } finally {
                  isFlushingSyncQueue = false;
                }
              }
            }
          }
          var ReactVersion = "17.0.2";
          var NoMode = 0;
          var StrictMode = 1;
          var BlockingMode = 2;
          var ConcurrentMode = 4;
          var ProfileMode = 8;
          var DebugTracingMode = 16;
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = 0;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node3 = fiber;
              while (node3 !== null) {
                if (node3.mode & StrictMode) {
                  maybeStrictRoot = node3;
                }
                node3 = node3.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set4) {
              var array = [];
              set4.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error2("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error2("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error2("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn2("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn2("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn2("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error2("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error2("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component2, baseProps) {
            if (Component2 && Component2.defaultProps) {
              var props = _assign({}, baseProps);
              var defaultProps2 = Component2.defaultProps;
              for (var propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var MAX_SIGNED_31_BIT_INT = 1073741823;
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastContextWithAllBitsObserved = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, nextValue) {
            var context = providerFiber.type._context;
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error2("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            var context = providerFiber.type._context;
            {
              context._currentValue = currentValue;
            }
          }
          function calculateChangedBits(context, newValue, oldValue) {
            if (objectIs(oldValue, newValue)) {
              return 0;
            } else {
              var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
              {
                if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                  error2("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
                }
              }
              return changedBits | 0;
            }
          }
          function scheduleWorkOnParentPath(parent, renderLanes2) {
            var node3 = parent;
            while (node3 !== null) {
              var alternate = node3.alternate;
              if (!isSubsetOfLanes(node3.childLanes, renderLanes2)) {
                node3.childLanes = mergeLanes(node3.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              } else {
                break;
              }
              node3 = node3.return;
            }
          }
          function propagateContextChange(workInProgress2, context, changedBits, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list3 = fiber.dependencies;
              if (list3 !== null) {
                nextFiber = fiber.child;
                var dependency = list3.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                    if (fiber.tag === ClassComponent) {
                      var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                      update.tag = ForceUpdate;
                      enqueueUpdate(fiber, update);
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleWorkOnParentPath(fiber.return, renderLanes2);
                    list3.lanes = mergeLanes(list3.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
          function readContext(context, observedBits) {
            {
              if (isDisallowedContextReadInDEV) {
                error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            if (lastContextWithAllBitsObserved === context)
              ;
            else if (observedBits === false || observedBits === 0)
              ;
            else {
              var resolvedObservedBits;
              if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
              } else {
                resolvedObservedBits = observedBits;
              }
              var contextItem = {
                context,
                observedBits: resolvedObservedBits,
                next: null
              };
              if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) {
                  {
                    throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                  }
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem,
                  responders: null
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return context._currentValue;
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error2("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return _assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (!(typeof callback === "function")) {
              {
                throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
              }
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect2 = effects[i];
                var callback = effect2.callback;
                if (callback !== null) {
                  effect2.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var isArray2 = Array.isArray;
          var emptyRefsObject = new React50.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentName(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error2("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                {
                  {
                    throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                  }
                }
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  reenableLogs();
                }
              }
            }
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get4(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get4(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get4(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (shouldUpdate === void 0) {
                  error2("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentName(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error2("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error2("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error2("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error2("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error2("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error2("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error2("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error2("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error2("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error2("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error2("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error2("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error2("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error2("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error2("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error2("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error2("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error2("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error2("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray2(_state))) {
                error2("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error2("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set3(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error2("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  new ctor(props, context);
                } finally {
                  reenableLogs();
                }
              }
            }
            var instance = new ctor(props, context);
            var state2 = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state2 === null) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error2("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentName(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error2("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error2("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentName(workInProgress2.type) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error2("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error2("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (!(typeof child._store === "object")) {
                {
                  throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              child._store.validated = true;
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error2('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          var isArray$1 = Array.isArray;
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentName(returnFiber.type) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error2('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (!(ownerFiber.tag === ClassComponent)) {
                    {
                      throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    }
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  {
                    throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = inst.refs;
                  if (refs === emptyRefsObject) {
                    refs = inst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (!(typeof mixedRef === "string")) {
                  {
                    throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                  }
                }
                if (!element._owner) {
                  {
                    throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                  }
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            if (returnFiber.type !== "textarea") {
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
                }
              }
            }
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error2("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var last3 = returnFiber.lastEffect;
              if (last3 !== null) {
                last3.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
              }
              childToDelete.nextEffect = null;
              childToDelete.flags = Deletion;
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags = Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags = Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags = Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              if (current2 !== null) {
                if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment11) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key);
                      }
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                    }
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error2("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (!(typeof iteratorFn === "function")) {
                {
                  throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error2("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (!(newChildren != null)) {
                {
                  throw Error("An iterable object provided no iterator.");
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  switch (child.tag) {
                    case Fragment11: {
                      if (element.type === REACT_FRAGMENT_TYPE) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, element.props.children);
                        existing.return = returnFiber;
                        {
                          existing._debugSource = element._source;
                          existing._debugOwner = element._owner;
                        }
                        return existing;
                      }
                      break;
                    }
                    case Block:
                    default: {
                      if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing3 = useFiber(child, element.props);
                        _existing3.ref = coerceRef(returnFiber, child, element);
                        _existing3.return = returnFiber;
                        {
                          _existing3._debugSource = element._source;
                          _existing3._debugOwner = element._owner;
                        }
                        return _existing3;
                      }
                      break;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              var isObject2 = typeof newChild === "object" && newChild !== null;
              if (isObject2) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                }
              }
              if (typeof newChild === "string" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              if (isArray$1(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (isObject2) {
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
                switch (returnFiber.tag) {
                  case ClassComponent: {
                    {
                      var instance = returnFiber.stateNode;
                      if (instance.render._isMockFunction) {
                        break;
                      }
                    }
                  }
                  case Block:
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    {
                      {
                        throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                      }
                    }
                  }
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (!(current2 === null || workInProgress2.child === current2.child)) {
              {
                throw Error("Resuming work not yet implemented.");
              }
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c2) {
            if (!(c2 !== NO_CONTEXT)) {
              {
                throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return c2;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            if (props.fallback === void 0) {
              return false;
            }
            if (props.unstable_avoidThisFallback !== true) {
              return true;
            }
            if (hasInvisibleParent) {
              return false;
            }
            return true;
          }
          function findFirstSuspended(row) {
            var node3 = row;
            while (node3 !== null) {
              if (node3.tag === SuspenseComponent) {
                var state2 = node3.memoizedState;
                if (state2 !== null) {
                  var dehydrated = state2.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node3;
                  }
                }
              } else if (node3.tag === SuspenseListComponent && node3.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node3.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node3;
                }
              } else if (node3.child !== null) {
                node3.child.return = node3;
                node3 = node3.child;
                continue;
              }
              if (node3 === row) {
                return null;
              }
              while (node3.sibling === null) {
                if (node3.return === null || node3.return === row) {
                  return null;
                }
                node3 = node3.return;
              }
              node3.sibling.return = node3.return;
              node3 = node3.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Layout = 2;
          var Passive$1 = 4;
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChild(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            return true;
          }
          function deleteHydratableInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot:
                  didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                  break;
                case HostComponent:
                  didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                  break;
              }
            }
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            childToDelete.flags = Deletion;
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                      break;
                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                    case SuspenseComponent:
                      didNotFindHydratableSuspenseInstance(parentType, parentProps);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                return false;
              }
              default:
                return false;
            }
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
            }
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            {
              if (shouldUpdate) {
                var returnFiber = hydrationParentFiber;
                if (returnFiber !== null) {
                  switch (returnFiber.tag) {
                    case HostRoot: {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }
                    case HostComponent: {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              {
                throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            var type = fiber.type;
            if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
              var nextInstance = nextHydratableInstance;
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
          }
          function getIsHydrating() {
            return isHydrating;
          }
          var workInProgressSources = [];
          var rendererSigil$1;
          {
            rendererSigil$1 = {};
          }
          function markSourceAsDirty(mutableSource) {
            workInProgressSources.push(mutableSource);
          }
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function getWorkInProgressVersion(mutableSource) {
            {
              return mutableSource._workInProgressVersionPrimary;
            }
          }
          function setWorkInProgressVersion(mutableSource, version) {
            {
              mutableSource._workInProgressVersionPrimary = version;
            }
            workInProgressSources.push(mutableSource);
          }
          function warnAboutMultipleRenderersDEV(mutableSource) {
            {
              {
                if (mutableSource._currentPrimaryRenderer == null) {
                  mutableSource._currentPrimaryRenderer = rendererSigil$1;
                } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                  error2("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
                }
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnAboutUseOpaqueIdentifier;
          {
            didWarnAboutUseOpaqueIdentifier = {};
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
                error2("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentName(currentlyRenderingFiber$1.type);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table2 = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table2 += row;
                  }
                  error2("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table2);
                }
              }
            }
          }
          function throwInvalidHookError() {
            {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error2("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error2("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component2, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component2(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                  {
                    throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                  }
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component2(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
            }
            didScheduleRenderPhaseUpdate = false;
            if (!!didRenderTooFewHooks) {
              {
                throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
              }
            }
            return children;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.flags &= ~(Passive | Update);
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (!(nextCurrentHook !== null)) {
                {
                  throw Error("Rendered more hooks than during the previous render.");
                }
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null
            };
          }
          function basicStateReducer(state2, action) {
            return typeof action === "function" ? action(state2) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error2("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update.action,
                      eagerReducer: update.eagerReducer,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.eagerReducer === reducer) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function readFromUnsubcribedMutableSource(root3, source, getSnapshot) {
            {
              warnAboutMultipleRenderersDEV(source);
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var isSafeToReadFromSource = false;
            var currentRenderVersion = getWorkInProgressVersion(source);
            if (currentRenderVersion !== null) {
              isSafeToReadFromSource = currentRenderVersion === version;
            } else {
              isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root3.mutableReadLanes);
              if (isSafeToReadFromSource) {
                setWorkInProgressVersion(source, version);
              }
            }
            if (isSafeToReadFromSource) {
              var snapshot = getSnapshot(source._source);
              {
                if (typeof snapshot === "function") {
                  error2("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                }
              }
              return snapshot;
            } else {
              markSourceAsDirty(source);
              {
                {
                  throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
                }
              }
            }
          }
          function useMutableSource(hook, source, getSnapshot, subscribe) {
            var root3 = getWorkInProgressRoot();
            if (!(root3 !== null)) {
              {
                throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var dispatcher = ReactCurrentDispatcher$1.current;
            var _dispatcher$useState = dispatcher.useState(function() {
              return readFromUnsubcribedMutableSource(root3, source, getSnapshot);
            }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
            var snapshot = currentSnapshot;
            var stateHook = workInProgressHook;
            var memoizedState = hook.memoizedState;
            var refs = memoizedState.refs;
            var prevGetSnapshot = refs.getSnapshot;
            var prevSource = memoizedState.source;
            var prevSubscribe = memoizedState.subscribe;
            var fiber = currentlyRenderingFiber$1;
            hook.memoizedState = {
              refs,
              source,
              subscribe
            };
            dispatcher.useEffect(function() {
              refs.getSnapshot = getSnapshot;
              refs.setSnapshot = setSnapshot;
              var maybeNewVersion = getVersion(source._source);
              if (!objectIs(version, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                {
                  if (typeof maybeNewSnapshot === "function") {
                    error2("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                  }
                }
                if (!objectIs(snapshot, maybeNewSnapshot)) {
                  setSnapshot(maybeNewSnapshot);
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root3, lane);
                }
                markRootEntangled(root3, root3.mutableReadLanes);
              }
            }, [getSnapshot, source, subscribe]);
            dispatcher.useEffect(function() {
              var handleChange = function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                  latestSetSnapshot(latestGetSnapshot(source._source));
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root3, lane);
                } catch (error3) {
                  latestSetSnapshot(function() {
                    throw error3;
                  });
                }
              };
              var unsubscribe = subscribe(source._source, handleChange);
              {
                if (typeof unsubscribe !== "function") {
                  error2("Mutable source subscribe function must return an unsubscribe function.");
                }
              }
              return unsubscribe;
            }, [source, subscribe]);
            if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
              var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
              };
              newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
              stateHook.queue = newQueue;
              stateHook.baseQueue = null;
              snapshot = readFromUnsubcribedMutableSource(root3, source, getSnapshot);
              stateHook.memoizedState = stateHook.baseState = snapshot;
            }
            return snapshot;
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = {
              refs: {
                getSnapshot,
                setSnapshot: null
              },
              source,
              subscribe
            };
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            var hook = updateWorkInProgressHook();
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag2, create, destroy, deps) {
            var effect2 = {
              tag: tag2,
              create,
              destroy,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect2.next = effect2;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect2.next = effect2;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect2;
                effect2.next = firstEffect;
                componentUpdateQueue.lastEffect = effect2;
              }
            }
            return effect2;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            hook.memoizedState = ref;
            return ref;
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return mountEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          function updateEffect(create, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return updateEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            return mountEffectImpl(Update, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error2("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
            mountEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function updateDeferredValue(value) {
            var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function rerenderDeferredValue(value) {
            var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function startTransition(setPending, callback) {
            var priorityLevel = getCurrentPriorityLevel();
            {
              runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
                setPending(true);
              });
              runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
                var prevTransition = ReactCurrentBatchConfig$1.transition;
                ReactCurrentBatchConfig$1.transition = 1;
                try {
                  setPending(false);
                  callback();
                } finally {
                  ReactCurrentBatchConfig$1.transition = prevTransition;
                }
              });
            }
          }
          function mountTransition() {
            var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
            var start = startTransition.bind(null, setPending);
            mountRef(start);
            return [start, isPending];
          }
          function updateTransition() {
            var _updateState2 = updateState(), isPending = _updateState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          function rerenderTransition() {
            var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function warnOnOpaqueIdentifierAccessInDEV(fiber) {
            {
              var name = getComponentName(fiber.type) || "Unknown";
              if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
                error2("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                didWarnAboutUseOpaqueIdentifier[name] = true;
              }
            }
          }
          function mountOpaqueIdentifier() {
            var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
            if (getIsHydrating()) {
              var didUpgrade = false;
              var fiber = currentlyRenderingFiber$1;
              var readValue = function() {
                if (!didUpgrade) {
                  didUpgrade = true;
                  {
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                  }
                }
                {
                  {
                    throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                  }
                }
              };
              var id2 = makeOpaqueHydratingObject(readValue);
              var setId = mountState(id2)[1];
              if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                  setId(makeId());
                }, void 0, null);
              }
              return id2;
            } else {
              var _id = makeId();
              mountState(_id);
              return _id;
            }
          }
          function updateOpaqueIdentifier() {
            var id2 = updateState()[0];
            return id2;
          }
          function rerenderOpaqueIdentifier() {
            var id2 = rerenderState()[0];
            return id2;
          }
          function dispatchAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              eagerReducer: null,
              eagerState: null,
              next: null
            };
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
            var alternate = fiber.alternate;
            if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
              didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            } else {
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.eagerReducer = lastRenderedReducer;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      return;
                    }
                  } catch (error3) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              {
                if (typeof jest !== "undefined") {
                  warnIfNotScopedWithMatchingAct(fiber);
                  warnIfNotCurrentlyActingUpdatesInDev(fiber);
                }
              }
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useOpaqueIdentifier: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error2("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var profilerStartTime = -1;
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component2));
                }
              }
            }
            var render4 = Component2.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render4, nextProps, ref, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render4, nextProps, ref, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component2, nextProps, updateLanes, renderLanes2) {
            if (current2 === null) {
              var type = Component2.type;
              if (isSimpleFunctionComponent(type) && Component2.compare === null && Component2.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type));
                }
              }
              var child = createFiberFromTypeAndProps(Component2.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component2.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
              }
            }
            var currentChild = current2.child;
            if (!includesSomeLane(updateLanes, renderLanes2)) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component2.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component2, nextProps, updateLanes, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes2, updateLanes)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                {
                  markSpawnedWork(OffscreenLane);
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes
                };
                workInProgress2.memoizedState = _nextState;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          var updateLegacyHiddenComponent = updateOffscreenComponent;
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component2));
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component2));
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
              constructClassInstance(workInProgress2, Component2, nextProps);
              mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component2, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error2("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component2, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component2.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.render();
                  } finally {
                    reenableLogs();
                  }
                }
                setIsRendering(false);
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component2, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root3 = workInProgress2.stateNode;
            if (root3.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
            } else if (root3.context) {
              pushTopLevelContextObject(workInProgress2, root3.context, false);
            }
            pushHostContainer(workInProgress2, root3.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            var updateQueue = workInProgress2.updateQueue;
            if (!(current2 !== null && updateQueue !== null)) {
              {
                throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState !== null ? prevState.element : null;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var nextChildren = nextState.element;
            if (nextChildren === prevChildren) {
              resetHydrationState();
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var root3 = workInProgress2.stateNode;
            if (root3.hydrate && enterHydrationState(workInProgress2)) {
              {
                var mutableSourceEagerHydrationData = root3.mutableSourceEagerHydrationData;
                if (mutableSourceEagerHydrationData != null) {
                  for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
                    var mutableSource = mutableSourceEagerHydrationData[i];
                    var version = mutableSourceEagerHydrationData[i + 1];
                    setWorkInProgressVersion(mutableSource, version);
                  }
                }
              }
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node3 = child;
              while (node3) {
                node3.flags = node3.flags & ~Placement | Hydrating;
                node3 = node3.sibling;
              }
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
              resetHydrationState();
            }
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component2 = init(payload);
            workInProgress2.type = Component2;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component2);
            var resolvedProps = resolveDefaultProps(Component2, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component2);
                  workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2);
                }
                child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component2 = resolveClassForHotReloading(Component2);
                }
                child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2);
                }
                child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component2));
                    }
                  }
                }
                child = updateMemoComponent(null, workInProgress2, Component2, resolveDefaultProps(Component2.type, resolvedProps), updateLanes, renderLanes2);
                return child;
              }
            }
            var hint = "";
            {
              if (Component2 !== null && typeof Component2 === "object" && Component2.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            {
              {
                throw Error("Element type is invalid. Received a promise that resolves to: " + Component2 + ". Lazy element type must resolve to a class or function." + hint);
              }
            }
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component2, nextProps);
            mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component2, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            {
              if (Component2.prototype && typeof Component2.prototype.render === "function") {
                var componentName = getComponentName(Component2) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error2("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentName(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              {
                var _componentName2 = getComponentName(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component2)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              var getDerivedStateFromProps = Component2.getDerivedStateFromProps;
              if (typeof getDerivedStateFromProps === "function") {
                applyDerivedStateFromProps(workInProgress2, Component2, getDerivedStateFromProps, props);
              }
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component2, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component2);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component2) {
            {
              if (Component2) {
                if (Component2.childContextTypes) {
                  error2("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || workInProgress2._debugID || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error2("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component2.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentName(Component2) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error2("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
                var _componentName4 = getComponentName(Component2) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error2("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              if (nextProps.fallback !== void 0) {
                tryToClaimNextHydratableInstance(workInProgress2);
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment = workInProgress2.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.lanes = SomeRetryLane;
                {
                  markSpawnedWork(SomeRetryLane);
                }
                return _fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                if (showFallback) {
                  var _nextFallbackChildren2 = nextProps.fallback;
                  var _nextPrimaryChildren2 = nextProps.children;
                  var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                  var _primaryChildFragment3 = workInProgress2.child;
                  var prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                  _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment;
                } else {
                  var _nextPrimaryChildren3 = nextProps.children;
                  var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment4;
                }
              } else {
                if (showFallback) {
                  var _nextFallbackChildren3 = nextProps.fallback;
                  var _nextPrimaryChildren4 = nextProps.children;
                  var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                  var _primaryChildFragment5 = workInProgress2.child;
                  var _prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                  _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment2;
                } else {
                  var _nextPrimaryChildren5 = nextProps.children;
                  var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment6;
                }
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode2 = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode2, renderLanes2, null);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode2 = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode2 & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null);
            } else {
              primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode2, NoLanes, null);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              currentFallbackChildFragment.nextEffect = null;
              currentFallbackChildFragment.flags = Deletion;
              workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode2 = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode2 & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              var progressedLastEffect = primaryChildFragment.lastEffect;
              if (progressedLastEffect !== null) {
                workInProgress2.firstEffect = primaryChildFragment.firstEffect;
                workInProgress2.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
              } else {
                workInProgress2.firstEffect = workInProgress2.lastEffect = null;
              }
            } else {
              primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function scheduleWorkOnFiber(fiber, renderLanes2) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleWorkOnParentPath(fiber.return, renderLanes2);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node3 = firstChild;
            while (node3 !== null) {
              if (node3.tag === SuspenseComponent) {
                var state2 = node3.memoizedState;
                if (state2 !== null) {
                  scheduleWorkOnFiber(node3, renderLanes2);
                }
              } else if (node3.tag === SuspenseListComponent) {
                scheduleWorkOnFiber(node3, renderLanes2);
              } else if (node3.child !== null) {
                node3.child.return = node3;
                node3 = node3.child;
                continue;
              }
              if (node3 === workInProgress2) {
                return;
              }
              while (node3.sibling === null) {
                if (node3.return === null || node3.return === workInProgress2) {
                  return;
                }
                node3 = node3.return;
              }
              node3.sibling.return = node3.return;
              node3 = node3.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error2('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error2('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error2('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error2('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error2('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error2('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isArray3 = Array.isArray(childSlot);
              var isIterable = !isArray3 && typeof getIteratorFn(childSlot) === "function";
              if (isArray3 || isIterable) {
                var type = isArray3 ? "array" : "iterable";
                error2("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (Array.isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error2('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode,
                lastEffect: lastEffectBeforeRendering
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
              renderState.lastEffect = lastEffectBeforeRendering;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error2("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, newValue);
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              var changedBits = calculateChangedBits(context, newValue, oldValue);
              if (changedBits === 0) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, changedBits, renderLanes2);
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error2("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render4 = newProps.children;
            {
              if (typeof render4 !== "function") {
                error2("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context, newProps.unstable_observedBits);
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render4(newValue);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              return null;
            } else {
              cloneChildFibers(current2, workInProgress2);
              return workInProgress2.child;
            }
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var last3 = returnFiber.lastEffect;
              if (last3 !== null) {
                last3.nextEffect = current2;
                returnFiber.lastEffect = current2;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = current2;
              }
              current2.nextEffect = null;
              current2.flags = Deletion;
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            var updateLanes = workInProgress2.lanes;
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else if (!includesSomeLane(renderLanes2, updateLanes)) {
                didReceiveUpdate = false;
                switch (workInProgress2.tag) {
                  case HostRoot:
                    pushHostRootContext(workInProgress2);
                    resetHydrationState();
                    break;
                  case HostComponent:
                    pushHostContext(workInProgress2);
                    break;
                  case ClassComponent: {
                    var Component2 = workInProgress2.type;
                    if (isContextProvider(Component2)) {
                      pushContextProvider(workInProgress2);
                    }
                    break;
                  }
                  case HostPortal:
                    pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                    break;
                  case ContextProvider: {
                    var newValue = workInProgress2.memoizedProps.value;
                    pushProvider(workInProgress2, newValue);
                    break;
                  }
                  case Profiler:
                    {
                      var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                      if (hasChildWork) {
                        workInProgress2.flags |= Update;
                      }
                      var stateNode = workInProgress2.stateNode;
                      stateNode.effectDuration = 0;
                      stateNode.passiveEffectDuration = 0;
                    }
                    break;
                  case SuspenseComponent: {
                    var state2 = workInProgress2.memoizedState;
                    if (state2 !== null) {
                      var primaryChildFragment = workInProgress2.child;
                      var primaryChildLanes = primaryChildFragment.childLanes;
                      if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                        return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                      } else {
                        pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                        if (child !== null) {
                          return child.sibling;
                        } else {
                          return null;
                        }
                      }
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    }
                    break;
                  }
                  case SuspenseListComponent: {
                    var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                    var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    if (didSuspendBefore) {
                      if (_hasChildWork) {
                        return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                      }
                      workInProgress2.flags |= DidCapture;
                    }
                    var renderState = workInProgress2.memoizedState;
                    if (renderState !== null) {
                      renderState.rendering = null;
                      renderState.tail = null;
                      renderState.lastEffect = null;
                    }
                    pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                    if (_hasChildWork) {
                      break;
                    } else {
                      return null;
                    }
                  }
                  case OffscreenComponent:
                  case LegacyHiddenComponent: {
                    workInProgress2.lanes = NoLanes;
                    return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
                  }
                }
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else {
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2);
              }
              case FunctionComponent: {
                var _Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment11:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component3 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
              case LegacyHiddenComponent: {
                return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden2) {
              var node3 = workInProgress2.child;
              while (node3 !== null) {
                if (node3.tag === HostComponent || node3.tag === HostText) {
                  appendInitialChild(parent, node3.stateNode);
                } else if (node3.tag === HostPortal)
                  ;
                else if (node3.child !== null) {
                  node3.child.return = node3;
                  node3 = node3.child;
                  continue;
                }
                if (node3 === workInProgress2) {
                  return;
                }
                while (node3.sibling === null) {
                  if (node3.return === null || node3.return === workInProgress2) {
                    return;
                  }
                  node3 = node3.return;
                }
                node3.sibling.return = node3.return;
                node3 = node3.sibling;
              }
            };
            updateHostContainer = function(workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment11:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                return null;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress2.stateNode;
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else if (!fiberRoot.hydrate) {
                    workInProgress2.flags |= Snapshot;
                  }
                }
                updateHostContainer(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current2 === null) {
                  if (workInProgress2.memoizedProps.fallback !== void 0) {
                    popHydrationState(workInProgress2);
                  }
                } else {
                  var prevState = current2.memoizedState;
                  prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) {
                  if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
                {
                  if (nextDidTimeout || prevDidTimeout) {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThennables = suspended.updateQueue;
                          if (newThennables !== null) {
                            workInProgress2.updateQueue = newThennables;
                            workInProgress2.flags |= Update;
                          }
                          if (renderState.lastEffect === null) {
                            workInProgress2.firstEffect = null;
                          }
                          workInProgress2.lastEffect = renderState.lastEffect;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThennables = _suspended.updateQueue;
                      if (_newThennables !== null) {
                        workInProgress2.updateQueue = _newThennables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                        if (lastEffect !== null) {
                          lastEffect.nextEffect = null;
                        }
                        return null;
                      }
                    } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next2 = renderState.tail;
                  renderState.rendering = next2;
                  renderState.tail = next2.sibling;
                  renderState.lastEffect = workInProgress2.lastEffect;
                  renderState.renderingStartTime = now();
                  next2.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next2;
                }
                return null;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block:
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                if (current2 !== null) {
                  var _nextState = workInProgress2.memoizedState;
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  var nextIsHidden = _nextState !== null;
                  if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function unwindWork(workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if (!((_flags & DidCapture) === NoFlags)) {
                  {
                    throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                  }
                }
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(interruptedWork) {
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                popProvider(interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          function createCapturedValue(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source)
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error3 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error3 != null && error3._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error3);
                }
                var componentName = source ? getComponentName(source.type) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                var errorBoundaryName = getComponentName(boundary.type);
                if (errorBoundaryName) {
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                } else {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error3);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error3 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error3);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                  logCapturedError(fiber, errorInfo);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error2("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                    }
                  }
                }
              };
            } else {
              update.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
              };
            }
            return update;
          }
          function attachPingListener(root3, wakeable, lanes) {
            var pingCache = root3.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root3.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
              wakeable.then(ping, ping);
            }
          }
          function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              if ((sourceFiber.mode & BlockingMode) === NoMode) {
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                  sourceFiber.updateQueue = currentSource.updateQueue;
                  sourceFiber.memoizedState = currentSource.memoizedState;
                  sourceFiber.lanes = currentSource.lanes;
                } else {
                  sourceFiber.updateQueue = null;
                  sourceFiber.memoizedState = null;
                }
              }
              var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
              var _workInProgress = returnFiber;
              do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                  var wakeables = _workInProgress.updateQueue;
                  if (wakeables === null) {
                    var updateQueue = /* @__PURE__ */ new Set();
                    updateQueue.add(wakeable);
                    _workInProgress.updateQueue = updateQueue;
                  } else {
                    wakeables.add(wakeable);
                  }
                  if ((_workInProgress.mode & BlockingMode) === NoMode) {
                    _workInProgress.flags |= DidCapture;
                    sourceFiber.flags |= ForceUpdateForLegacySuspense;
                    sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                    if (sourceFiber.tag === ClassComponent) {
                      var currentSourceFiber = sourceFiber.alternate;
                      if (currentSourceFiber === null) {
                        sourceFiber.tag = IncompleteClassComponent;
                      } else {
                        var update = createUpdate(NoTimestamp, SyncLane);
                        update.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update);
                      }
                    }
                    sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                    return;
                  }
                  attachPingListener(root3, wakeable, rootRenderLanes);
                  _workInProgress.flags |= ShouldCapture;
                  _workInProgress.lanes = rootRenderLanes;
                  return;
                }
                _workInProgress = _workInProgress.return;
              } while (_workInProgress !== null);
              value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
            }
            renderDidError();
            value = createCapturedValue(value, sourceFiber);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update2);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            {
              instance.componentWillUnmount();
            }
          };
          function safelyCallComponentWillUnmount(current2, instance) {
            {
              invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
              if (hasCaughtError()) {
                var unmountError = clearCaughtError();
                captureCommitPhaseError(current2, unmountError);
              }
            }
          }
          function safelyDetachRef(current2) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                {
                  invokeGuardedCallback(null, ref, null, null);
                  if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current2, refError);
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, destroy) {
            {
              invokeGuardedCallback(null, destroy, null);
              if (hasCaughtError()) {
                var error3 = clearCaughtError();
                captureCommitPhaseError(current2, error3);
              }
            }
          }
          function commitBeforeMutationLifeCycles(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                return;
              }
              case ClassComponent: {
                if (finishedWork.flags & Snapshot) {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error2("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error2("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error2("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                }
                return;
              }
              case HostRoot: {
                {
                  if (finishedWork.flags & Snapshot) {
                    var root3 = finishedWork.stateNode;
                    clearContainer(root3.containerInfo);
                  }
                }
                return;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitHookEffectListUnmount(tag2, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect2 = firstEffect;
              do {
                if ((effect2.tag & tag2) === tag2) {
                  var destroy = effect2.destroy;
                  effect2.destroy = void 0;
                  if (destroy !== void 0) {
                    destroy();
                  }
                }
                effect2 = effect2.next;
              } while (effect2 !== firstEffect);
            }
          }
          function commitHookEffectListMount(tag2, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect2 = firstEffect;
              do {
                if ((effect2.tag & tag2) === tag2) {
                  var create = effect2.create;
                  effect2.destroy = create();
                  {
                    var destroy = effect2.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error2("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                  }
                }
                effect2 = effect2.next;
              } while (effect2 !== firstEffect);
            }
          }
          function schedulePassiveEffects(finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect2 = firstEffect;
              do {
                var _effect = effect2, next2 = _effect.next, tag2 = _effect.tag;
                if ((tag2 & Passive$1) !== NoFlags$1 && (tag2 & HasEffect) !== NoFlags$1) {
                  enqueuePendingPassiveHookEffectUnmount(finishedWork, effect2);
                  enqueuePendingPassiveHookEffectMount(finishedWork, effect2);
                }
                effect2 = next2;
              } while (effect2 !== firstEffect);
            }
          }
          function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                schedulePassiveEffects(finishedWork);
                return;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error2("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error2("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error2("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error2("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error2("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error2("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                return;
              }
              case HostText: {
                return;
              }
              case HostPortal: {
                return;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  if (typeof onRender === "function") {
                    {
                      onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                    }
                  }
                }
                return;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case FundamentalComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden2) {
            {
              var node3 = finishedWork;
              while (true) {
                if (node3.tag === HostComponent) {
                  var instance = node3.stateNode;
                  if (isHidden2) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node3.stateNode, node3.memoizedProps);
                  }
                } else if (node3.tag === HostText) {
                  var _instance3 = node3.stateNode;
                  if (isHidden2) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node3.memoizedProps);
                  }
                } else if ((node3.tag === OffscreenComponent || node3.tag === LegacyHiddenComponent) && node3.memoizedState !== null && node3 !== finishedWork)
                  ;
                else if (node3.child !== null) {
                  node3.child.return = node3;
                  node3 = node3.child;
                  continue;
                }
                if (node3 === finishedWork) {
                  return;
                }
                while (node3.sibling === null) {
                  if (node3.return === null || node3.return === finishedWork) {
                    return;
                  }
                  node3 = node3.return;
                }
                node3.sibling.return = node3.return;
                node3 = node3.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                ref(instanceToUse);
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error2("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function commitDetachRef(current2) {
            var currentRef = current2.ref;
            if (currentRef !== null) {
              if (typeof currentRef === "function") {
                currentRef(null);
              } else {
                currentRef.current = null;
              }
            }
          }
          function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
            onCommitUnmount(current2);
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                var updateQueue = current2.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect2 = firstEffect;
                    do {
                      var _effect2 = effect2, destroy = _effect2.destroy, tag2 = _effect2.tag;
                      if (destroy !== void 0) {
                        if ((tag2 & Passive$1) !== NoFlags$1) {
                          enqueuePendingPassiveHookEffectUnmount(current2, effect2);
                        } else {
                          {
                            safelyCallDestroy(current2, destroy);
                          }
                        }
                      }
                      effect2 = effect2.next;
                    } while (effect2 !== firstEffect);
                  }
                }
                return;
              }
              case ClassComponent: {
                safelyDetachRef(current2);
                var instance = current2.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current2, instance);
                }
                return;
              }
              case HostComponent: {
                safelyDetachRef(current2);
                return;
              }
              case HostPortal: {
                {
                  unmountHostComponents(finishedRoot, current2);
                }
                return;
              }
              case FundamentalComponent: {
                return;
              }
              case DehydratedFragment: {
                return;
              }
              case ScopeComponent: {
                return;
              }
            }
          }
          function commitNestedUnmounts(finishedRoot, root3, renderPriorityLevel) {
            var node3 = root3;
            while (true) {
              commitUnmount(finishedRoot, node3);
              if (node3.child !== null && node3.tag !== HostPortal) {
                node3.child.return = node3;
                node3 = node3.child;
                continue;
              }
              if (node3 === root3) {
                return;
              }
              while (node3.sibling === null) {
                if (node3.return === null || node3.return === root3) {
                  return;
                }
                node3 = node3.return;
              }
              node3.sibling.return = node3.return;
              node3 = node3.sibling;
            }
          }
          function detachFiberMutation(fiber) {
            fiber.alternate = null;
            fiber.child = null;
            fiber.dependencies = null;
            fiber.firstEffect = null;
            fiber.lastEffect = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.return = null;
            fiber.updateQueue = null;
            {
              fiber._debugOwner = null;
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            {
              {
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node3 = fiber;
            siblings:
              while (true) {
                while (node3.sibling === null) {
                  if (node3.return === null || isHostParent(node3.return)) {
                    return null;
                  }
                  node3 = node3.return;
                }
                node3.sibling.return = node3.return;
                node3 = node3.sibling;
                while (node3.tag !== HostComponent && node3.tag !== HostText && node3.tag !== DehydratedFragment) {
                  if (node3.flags & Placement) {
                    continue siblings;
                  }
                  if (node3.child === null || node3.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node3.child.return = node3;
                    node3 = node3.child;
                  }
                }
                if (!(node3.flags & Placement)) {
                  return node3.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            var parent;
            var isContainer;
            var parentStateNode = parentFiber.stateNode;
            switch (parentFiber.tag) {
              case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
              case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case FundamentalComponent:
              default: {
                {
                  throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent);
              parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            if (isContainer) {
              insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
            } else {
              insertOrAppendPlacementNode(finishedWork, before, parent);
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node3, before, parent) {
            var tag2 = node3.tag;
            var isHost = tag2 === HostComponent || tag2 === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node3.stateNode : node3.stateNode.instance;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag2 === HostPortal)
              ;
            else {
              var child = node3.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node3, before, parent) {
            var tag2 = node3.tag;
            var isHost = tag2 === HostComponent || tag2 === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node3.stateNode : node3.stateNode.instance;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag2 === HostPortal)
              ;
            else {
              var child = node3.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
            var node3 = current2;
            var currentParentIsValid = false;
            var currentParent;
            var currentParentIsContainer;
            while (true) {
              if (!currentParentIsValid) {
                var parent = node3.return;
                findParent:
                  while (true) {
                    if (!(parent !== null)) {
                      {
                        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    var parentStateNode = parent.stateNode;
                    switch (parent.tag) {
                      case HostComponent:
                        currentParent = parentStateNode;
                        currentParentIsContainer = false;
                        break findParent;
                      case HostRoot:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                      case HostPortal:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                    }
                    parent = parent.return;
                  }
                currentParentIsValid = true;
              }
              if (node3.tag === HostComponent || node3.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node3);
                if (currentParentIsContainer) {
                  removeChildFromContainer(currentParent, node3.stateNode);
                } else {
                  removeChild(currentParent, node3.stateNode);
                }
              } else if (node3.tag === HostPortal) {
                if (node3.child !== null) {
                  currentParent = node3.stateNode.containerInfo;
                  currentParentIsContainer = true;
                  node3.child.return = node3;
                  node3 = node3.child;
                  continue;
                }
              } else {
                commitUnmount(finishedRoot, node3);
                if (node3.child !== null) {
                  node3.child.return = node3;
                  node3 = node3.child;
                  continue;
                }
              }
              if (node3 === current2) {
                return;
              }
              while (node3.sibling === null) {
                if (node3.return === null || node3.return === current2) {
                  return;
                }
                node3 = node3.return;
                if (node3.tag === HostPortal) {
                  currentParentIsValid = false;
                }
              }
              node3.sibling.return = node3.return;
              node3 = node3.sibling;
            }
          }
          function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
            {
              unmountHostComponents(finishedRoot, current2);
            }
            var alternate = current2.alternate;
            detachFiberMutation(current2);
            if (alternate !== null) {
              detachFiberMutation(alternate);
            }
          }
          function commitWork(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                }
                return;
              }
              case ClassComponent: {
                return;
              }
              case HostComponent: {
                var instance = finishedWork.stateNode;
                if (instance != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type, oldProps, newProps);
                  }
                }
                return;
              }
              case HostText: {
                if (!(finishedWork.stateNode !== null)) {
                  {
                    throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }
              case HostRoot: {
                {
                  var _root = finishedWork.stateNode;
                  if (_root.hydrate) {
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                  }
                }
                return;
              }
              case Profiler: {
                return;
              }
              case SuspenseComponent: {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case SuspenseListComponent: {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case IncompleteClassComponent: {
                return;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                var newState = finishedWork.memoizedState;
                var isHidden2 = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden2);
                return;
              }
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitSuspenseComponent(finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState !== null) {
              markCommitTimeOfFallback();
              {
                var primaryChildParent = finishedWork.child;
                hideOrUnhideAllChildren(primaryChildParent, true);
              }
            }
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  {
                    if (wakeable.__reactDoNotTraceInteractions !== true) {
                      retry = tracing.unstable_wrap(retry);
                    }
                  }
                  retryCache.add(wakeable);
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
            if (current2 !== null) {
              var oldState = current2.memoizedState;
              if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
              }
            }
            return false;
          }
          function commitResetTextContent(current2) {
            resetTextContent(current2.stateNode);
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor$1 = Symbol.for;
            COMPONENT_TYPE = symbolFor$1("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor$1("selector.role");
            TEST_NAME_TYPE = symbolFor$1("selector.test_id");
            TEXT_TYPE = symbolFor$1("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
          var NoContext = 0;
          var BatchedContext = 1;
          var EventContext = 2;
          var DiscreteEventContext = 4;
          var LegacyUnbatchedContext = 8;
          var RenderContext = 16;
          var CommitContext = 32;
          var RetryAfterError = 64;
          var RootIncomplete = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootIncomplete;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var mostRecentlyUpdatedRoot = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var nextEffect = null;
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsRenderPriority = NoPriority$1;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveHookEffectsMount = [];
          var pendingPassiveHookEffectsUnmount = [];
          var rootsWithPendingDiscreteUpdates = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var spawnedWorkDuringRender = null;
          var currentEventTime = NoTimestamp;
          var currentEventWipLanes = NoLanes;
          var currentEventPendingLanes = NoLanes;
          var isFlushingPassiveEffects = false;
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode2 = fiber.mode;
            if ((mode2 & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode2 & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (currentEventPendingLanes !== NoLanes) {
                currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
              }
              return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
            }
            var schedulerPriority = getCurrentPriorityLevel();
            var lane;
            if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
              lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
            } else {
              var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
              lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
            }
            return lane;
          }
          function requestRetryLane(fiber) {
            var mode2 = fiber.mode;
            if ((mode2 & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode2 & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            return findRetryLane(currentEventWipLanes);
          }
          function scheduleUpdateOnFiber(fiber, lane, eventTime) {
            checkForNestedUpdates();
            warnAboutRenderPhaseUpdatesInDEV(fiber);
            var root3 = markUpdateLaneFromFiberToRoot(fiber, lane);
            if (root3 === null) {
              warnAboutUpdateOnUnmountedFiberInDEV(fiber);
              return null;
            }
            markRootUpdated(root3, lane, eventTime);
            if (root3 === workInProgressRoot) {
              {
                workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root3, workInProgressRootRenderLanes);
              }
            }
            var priorityLevel = getCurrentPriorityLevel();
            if (lane === SyncLane) {
              if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                schedulePendingInteractions(root3, lane);
                performSyncWorkOnRoot(root3);
              } else {
                ensureRootIsScheduled(root3, eventTime);
                schedulePendingInteractions(root3, lane);
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            } else {
              if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                if (rootsWithPendingDiscreteUpdates === null) {
                  rootsWithPendingDiscreteUpdates = /* @__PURE__ */ new Set([root3]);
                } else {
                  rootsWithPendingDiscreteUpdates.add(root3);
                }
              }
              ensureRootIsScheduled(root3, eventTime);
              schedulePendingInteractions(root3, lane);
            }
            mostRecentlyUpdatedRoot = root3;
          }
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node3 = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node3 = parent;
              parent = parent.return;
            }
            if (node3.tag === HostRoot) {
              var root3 = node3.stateNode;
              return root3;
            } else {
              return null;
            }
          }
          function ensureRootIsScheduled(root3, currentTime) {
            var existingCallbackNode = root3.callbackNode;
            markStarvedLanesAsExpired(root3, currentTime);
            var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            var newCallbackPriority = returnNextLanesPriority();
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root3.callbackNode = null;
                root3.callbackPriority = NoLanePriority;
              }
              return;
            }
            if (existingCallbackNode !== null) {
              var existingCallbackPriority = root3.callbackPriority;
              if (existingCallbackPriority === newCallbackPriority) {
                return;
              }
              cancelCallback(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLanePriority) {
              newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
            } else if (newCallbackPriority === SyncBatchedLanePriority) {
              newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root3));
            } else {
              var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
              newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
            }
            root3.callbackPriority = newCallbackPriority;
            root3.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root3) {
            currentEventTime = NoTimestamp;
            currentEventWipLanes = NoLanes;
            currentEventPendingLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var originalCallbackNode = root3.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root3.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var exitStatus = renderRootConcurrent(root3, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              prepareFreshStack(root3, NoLanes);
            } else if (exitStatus !== RootIncomplete) {
              if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError;
                if (root3.hydrate) {
                  root3.hydrate = false;
                  clearContainer(root3.containerInfo);
                }
                lanes = getLanesToRetrySynchronouslyOnError(root3);
                if (lanes !== NoLanes) {
                  exitStatus = renderRootSync(root3, lanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now());
                throw fatalError;
              }
              var finishedWork = root3.current.alternate;
              root3.finishedWork = finishedWork;
              root3.finishedLanes = lanes;
              finishConcurrentRender(root3, exitStatus, lanes);
            }
            ensureRootIsScheduled(root3, now());
            if (root3.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root3);
            }
            return null;
          }
          function finishConcurrentRender(root3, exitStatus, lanes) {
            switch (exitStatus) {
              case RootIncomplete:
              case RootFatalErrored: {
                {
                  {
                    throw Error("Root did not complete. This is a bug in React.");
                  }
                }
              }
              case RootErrored: {
                commitRoot(root3);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root3, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root3.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root3, suspendedLanes);
                      break;
                    }
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3);
                break;
              }
              case RootCompleted: {
                commitRoot(root3);
                break;
              }
              default: {
                {
                  {
                    throw Error("Unknown root exit status.");
                  }
                }
              }
            }
          }
          function markRootSuspended$1(root3, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
            markRootSuspended(root3, suspendedLanes);
          }
          function performSyncWorkOnRoot(root3) {
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            var lanes;
            var exitStatus;
            if (root3 === workInProgressRoot && includesSomeLane(root3.expiredLanes, workInProgressRootRenderLanes)) {
              lanes = workInProgressRootRenderLanes;
              exitStatus = renderRootSync(root3, lanes);
              if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                lanes = getNextLanes(root3, lanes);
                exitStatus = renderRootSync(root3, lanes);
              }
            } else {
              lanes = getNextLanes(root3, NoLanes);
              exitStatus = renderRootSync(root3, lanes);
            }
            if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
              executionContext |= RetryAfterError;
              if (root3.hydrate) {
                root3.hydrate = false;
                clearContainer(root3.containerInfo);
              }
              lanes = getLanesToRetrySynchronouslyOnError(root3);
              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root3, lanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now());
              throw fatalError;
            }
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            commitRoot(root3);
            ensureRootIsScheduled(root3, now());
            return null;
          }
          function flushDiscreteUpdates() {
            if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
              {
                if ((executionContext & RenderContext) !== NoContext) {
                  error2("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
                }
              }
              return;
            }
            flushPendingDiscreteUpdates();
            flushPassiveEffects();
          }
          function flushPendingDiscreteUpdates() {
            if (rootsWithPendingDiscreteUpdates !== null) {
              var roots = rootsWithPendingDiscreteUpdates;
              rootsWithPendingDiscreteUpdates = null;
              roots.forEach(function(root3) {
                markDiscreteUpdatesExpired(root3);
                ensureRootIsScheduled(root3, now());
              });
            }
            flushSyncCallbackQueue();
          }
          function batchedUpdates$1(fn, a2) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a2);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function batchedEventUpdates$1(fn, a2) {
            var prevExecutionContext = executionContext;
            executionContext |= EventContext;
            try {
              return fn(a2);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function discreteUpdates$1(fn, a2, b2, c2, d) {
            var prevExecutionContext = executionContext;
            executionContext |= DiscreteEventContext;
            {
              try {
                return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a2, b2, c2, d));
              } finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            }
          }
          function unbatchedUpdates(fn, a2) {
            var prevExecutionContext = executionContext;
            executionContext &= ~BatchedContext;
            executionContext |= LegacyUnbatchedContext;
            try {
              return fn(a2);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function flushSync3(fn, a2) {
            var prevExecutionContext = executionContext;
            if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
              {
                error2("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
              return fn(a2);
            }
            executionContext |= BatchedContext;
            {
              try {
                if (fn) {
                  return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a2));
                } else {
                  return void 0;
                }
              } finally {
                executionContext = prevExecutionContext;
                flushSyncCallbackQueue();
              }
            }
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root3, lanes) {
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            var timeoutHandle = root3.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root3.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root3;
            workInProgress = createWorkInProgress(root3.current, null);
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootIncomplete;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            {
              spawnedWorkDuringRender = null;
            }
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
          }
          function handleError(root3, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function pushInteractions(root3) {
            {
              var prevInteractions = tracing.__interactionsRef.current;
              tracing.__interactionsRef.current = root3.memoizedInteractions;
              return prevInteractions;
            }
          }
          function popInteractions(prevInteractions) {
            {
              tracing.__interactionsRef.current = prevInteractions;
            }
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError() {
            if (workInProgressRootExitStatus !== RootCompleted) {
              workInProgressRootExitStatus = RootErrored;
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootIncomplete;
          }
          function renderRootSync(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              prepareFreshStack(root3, lanes);
              startWorkOnPendingInteractions(root3, lanes);
            }
            var prevInteractions = pushInteractions(root3);
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              {
                {
                  throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              resetRenderTimer();
              prepareFreshStack(root3, lanes);
              startWorkOnPendingInteractions(root3, lanes);
            }
            var prevInteractions = pushInteractions(root3);
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              return RootIncomplete;
            } else {
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next2;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next2 === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next2;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next2 = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next2 !== null) {
                  workInProgress = next2;
                  return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                  if (returnFiber.firstEffect === null) {
                    returnFiber.firstEffect = completedWork.firstEffect;
                  }
                  if (completedWork.lastEffect !== null) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                    }
                    returnFiber.lastEffect = completedWork.lastEffect;
                  }
                  var flags = completedWork.flags;
                  if (flags > PerformedWork) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork;
                    } else {
                      returnFiber.firstEffect = completedWork;
                    }
                    returnFiber.lastEffect = completedWork;
                  }
                }
              } else {
                var _next = unwindWork(completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.firstEffect = returnFiber.lastEffect = null;
                  returnFiber.flags |= Incomplete;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function resetChildLanes(completedWork) {
            if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
              return;
            }
            var newChildLanes = NoLanes;
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) {
                  actualDuration += child.actualDuration;
                }
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) {
                  treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
              }
            }
            completedWork.childLanes = newChildLanes;
          }
          function commitRoot(root3) {
            var renderPriorityLevel = getCurrentPriorityLevel();
            runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root3, renderPriorityLevel));
            return null;
          }
          function commitRootImpl(root3, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var finishedWork = root3.finishedWork;
            var lanes = root3.finishedLanes;
            if (finishedWork === null) {
              return null;
            }
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            if (!(finishedWork !== root3.current)) {
              {
                throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            root3.callbackNode = null;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root3, remainingLanes);
            if (rootsWithPendingDiscreteUpdates !== null) {
              if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root3)) {
                rootsWithPendingDiscreteUpdates.delete(root3);
              }
            }
            if (root3 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            var firstEffect;
            if (finishedWork.flags > PerformedWork) {
              if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
              } else {
                firstEffect = finishedWork;
              }
            } else {
              firstEffect = finishedWork.firstEffect;
            }
            if (firstEffect !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              var prevInteractions = pushInteractions(root3);
              ReactCurrentOwner$2.current = null;
              focusedInstanceHandle = prepareForCommit(root3.containerInfo);
              shouldFireAfterActiveInstanceBlur = false;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error3 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error3);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              focusedInstanceHandle = null;
              {
                recordCommitTime();
              }
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitMutationEffects, null, root3, renderPriorityLevel);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              resetAfterCommit(root3.containerInfo);
              root3.current = finishedWork;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitLayoutEffects, null, root3, lanes);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              nextEffect = null;
              requestPaint();
              {
                popInteractions(prevInteractions);
              }
              executionContext = prevExecutionContext;
            } else {
              root3.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root3;
              pendingPassiveEffectsLanes = lanes;
              pendingPassiveEffectsRenderPriority = renderPriorityLevel;
            } else {
              nextEffect = firstEffect;
              while (nextEffect !== null) {
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) {
                  detachFiberAfterEffects(nextEffect);
                }
                nextEffect = nextNextEffect;
              }
            }
            remainingLanes = root3.pendingLanes;
            if (remainingLanes !== NoLanes) {
              {
                if (spawnedWorkDuringRender !== null) {
                  var expirationTimes = spawnedWorkDuringRender;
                  spawnedWorkDuringRender = null;
                  for (var i = 0; i < expirationTimes.length; i++) {
                    scheduleInteractions(root3, expirationTimes[i], root3.memoizedInteractions);
                  }
                }
                schedulePendingInteractions(root3, remainingLanes);
              }
            } else {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                finishPendingInteractions(root3, lanes);
              }
            }
            if (remainingLanes === SyncLane) {
              if (root3 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
              }
            } else {
              nestedUpdateCount = 0;
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root3, now());
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var _error3 = firstUncaughtError;
              firstUncaughtError = null;
              throw _error3;
            }
            if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
              return null;
            }
            flushSyncCallbackQueue();
            return null;
          }
          function commitBeforeMutationEffects() {
            while (nextEffect !== null) {
              var current2 = nextEffect.alternate;
              if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                  if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                } else {
                  if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                }
              }
              var flags = nextEffect.flags;
              if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current2, nextEffect);
                resetCurrentFiber();
              }
              if ((flags & Passive) !== NoFlags) {
                if (!rootDoesHavePassiveEffects) {
                  rootDoesHavePassiveEffects = true;
                  scheduleCallback(NormalPriority$1, function() {
                    flushPassiveEffects();
                    return null;
                  });
                }
              }
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitMutationEffects(root3, renderPriorityLevel) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & ContentReset) {
                commitResetTextContent(nextEffect);
              }
              if (flags & Ref) {
                var current2 = nextEffect.alternate;
                if (current2 !== null) {
                  commitDetachRef(current2);
                }
              }
              var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
              switch (primaryFlags) {
                case Placement: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  break;
                }
                case PlacementAndUpdate: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }
                case Hydrating: {
                  nextEffect.flags &= ~Hydrating;
                  break;
                }
                case HydratingAndUpdate: {
                  nextEffect.flags &= ~Hydrating;
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }
                case Update: {
                  var _current3 = nextEffect.alternate;
                  commitWork(_current3, nextEffect);
                  break;
                }
                case Deletion: {
                  commitDeletion(root3, nextEffect);
                  break;
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitLayoutEffects(root3, committedLanes) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & (Update | Callback)) {
                var current2 = nextEffect.alternate;
                commitLifeCycles(root3, current2, nextEffect);
              }
              {
                if (flags & Ref) {
                  commitAttachRef(nextEffect);
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function flushPassiveEffects() {
            if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
              var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
              pendingPassiveEffectsRenderPriority = NoPriority$1;
              {
                return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
              }
            }
            return false;
          }
          function enqueuePendingPassiveHookEffectMount(fiber, effect2) {
            pendingPassiveHookEffectsMount.push(effect2, fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function enqueuePendingPassiveHookEffectUnmount(fiber, effect2) {
            pendingPassiveHookEffectsUnmount.push(effect2, fiber);
            {
              fiber.flags |= PassiveUnmountPendingDev;
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.flags |= PassiveUnmountPendingDev;
              }
            }
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function invokePassiveEffectCreate(effect2) {
            var create = effect2.create;
            effect2.destroy = create();
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var root3 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Cannot flush passive effects while already rendering.");
              }
            }
            {
              isFlushingPassiveEffects = true;
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root3);
            var unmountEffects = pendingPassiveHookEffectsUnmount;
            pendingPassiveHookEffectsUnmount = [];
            for (var i = 0; i < unmountEffects.length; i += 2) {
              var _effect = unmountEffects[i];
              var fiber = unmountEffects[i + 1];
              var destroy = _effect.destroy;
              _effect.destroy = void 0;
              {
                fiber.flags &= ~PassiveUnmountPendingDev;
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.flags &= ~PassiveUnmountPendingDev;
                }
              }
              if (typeof destroy === "function") {
                {
                  setCurrentFiber(fiber);
                  {
                    invokeGuardedCallback(null, destroy, null);
                  }
                  if (hasCaughtError()) {
                    if (!(fiber !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error3 = clearCaughtError();
                    captureCommitPhaseError(fiber, error3);
                  }
                  resetCurrentFiber();
                }
              }
            }
            var mountEffects = pendingPassiveHookEffectsMount;
            pendingPassiveHookEffectsMount = [];
            for (var _i = 0; _i < mountEffects.length; _i += 2) {
              var _effect2 = mountEffects[_i];
              var _fiber = mountEffects[_i + 1];
              {
                setCurrentFiber(_fiber);
                {
                  invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
                }
                if (hasCaughtError()) {
                  if (!(_fiber !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error4 = clearCaughtError();
                  captureCommitPhaseError(_fiber, _error4);
                }
                resetCurrentFiber();
              }
            }
            var effect2 = root3.current.firstEffect;
            while (effect2 !== null) {
              var nextNextEffect = effect2.nextEffect;
              effect2.nextEffect = null;
              if (effect2.flags & Deletion) {
                detachFiberAfterEffects(effect2);
              }
              effect2 = nextNextEffect;
            }
            {
              popInteractions(prevInteractions);
              finishPendingInteractions(root3, lanes);
            }
            {
              isFlushingPassiveEffects = false;
            }
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
            nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error3) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error3;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error3) {
            var errorInfo = createCapturedValue(error3, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            enqueueUpdate(rootFiber, update);
            var eventTime = requestEventTime();
            var root3 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
            if (root3 !== null) {
              markRootUpdated(root3, SyncLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
              schedulePendingInteractions(root3, SyncLane);
            }
          }
          function captureCommitPhaseError(sourceFiber, error3) {
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error3);
              return;
            }
            var fiber = sourceFiber.return;
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error3);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValue(error3, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  enqueueUpdate(fiber, update);
                  var eventTime = requestEventTime();
                  var root3 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                  if (root3 !== null) {
                    markRootUpdated(root3, SyncLane, eventTime);
                    ensureRootIsScheduled(root3, eventTime);
                    schedulePendingInteractions(root3, SyncLane);
                  } else {
                    if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                      try {
                        instance.componentDidCatch(error3, errorInfo);
                      } catch (errorToIgnore) {
                      }
                    }
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
          }
          function pingSuspendedRoot(root3, wakeable, pingedLanes) {
            var pingCache = root3.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root3, pingedLanes);
            if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root3, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
            schedulePendingInteractions(root3, pingedLanes);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root3 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
            if (root3 !== null) {
              markRootUpdated(root3, retryLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
              schedulePendingInteractions(root3, retryLane);
            }
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            {
              retryCache = boundaryFiber.stateNode;
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              {
                {
                  throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
                }
              }
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                error2("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
                return;
              }
              var tag2 = fiber.tag;
              if (tag2 !== IndeterminateComponent && tag2 !== HostRoot && tag2 !== ClassComponent && tag2 !== FunctionComponent && tag2 !== ForwardRef && tag2 !== MemoComponent && tag2 !== SimpleMemoComponent && tag2 !== Block) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error2("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var didWarnStateUpdateForUnmountedComponent = null;
          function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
            {
              var tag2 = fiber.tag;
              if (tag2 !== HostRoot && tag2 !== ClassComponent && tag2 !== FunctionComponent && tag2 !== ForwardRef && tag2 !== MemoComponent && tag2 !== SimpleMemoComponent && tag2 !== Block) {
                return;
              }
              if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForUnmountedComponent !== null) {
                if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForUnmountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForUnmountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              if (isFlushingPassiveEffects)
                ;
              else {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error2("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag2 === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  throw replayError;
                } else {
                  throw originalError;
                }
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                      error2("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error2("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          var IsThisRendererActing = {
            current: false
          };
          function warnIfNotScopedWithMatchingAct(fiber) {
            {
              if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error2("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
            {
              if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                error2("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
              }
            }
          }
          function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
            {
              if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error2("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
          var didWarnAboutUnmockedScheduler = false;
          function warnIfUnmockedScheduler(fiber) {
            {
              if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
                if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                  didWarnAboutUnmockedScheduler = true;
                  error2(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
                }
              }
            }
          }
          function computeThreadID(root3, lane) {
            return lane * 1e3 + root3.interactionThreadID;
          }
          function markSpawnedWork(lane) {
            if (spawnedWorkDuringRender === null) {
              spawnedWorkDuringRender = [lane];
            } else {
              spawnedWorkDuringRender.push(lane);
            }
          }
          function scheduleInteractions(root3, lane, interactions) {
            if (interactions.size > 0) {
              var pendingInteractionMap = root3.pendingInteractionMap;
              var pendingInteractions = pendingInteractionMap.get(lane);
              if (pendingInteractions != null) {
                interactions.forEach(function(interaction) {
                  if (!pendingInteractions.has(interaction)) {
                    interaction.__count++;
                  }
                  pendingInteractions.add(interaction);
                });
              } else {
                pendingInteractionMap.set(lane, new Set(interactions));
                interactions.forEach(function(interaction) {
                  interaction.__count++;
                });
              }
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root3, lane);
                subscriber.onWorkScheduled(interactions, threadID);
              }
            }
          }
          function schedulePendingInteractions(root3, lane) {
            scheduleInteractions(root3, lane, tracing.__interactionsRef.current);
          }
          function startWorkOnPendingInteractions(root3, lanes) {
            var interactions = /* @__PURE__ */ new Set();
            root3.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
              if (includesSomeLane(lanes, scheduledLane)) {
                scheduledInteractions.forEach(function(interaction) {
                  return interactions.add(interaction);
                });
              }
            });
            root3.memoizedInteractions = interactions;
            if (interactions.size > 0) {
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root3, lanes);
                try {
                  subscriber.onWorkStarted(interactions, threadID);
                } catch (error3) {
                  scheduleCallback(ImmediatePriority$1, function() {
                    throw error3;
                  });
                }
              }
            }
          }
          function finishPendingInteractions(root3, committedLanes) {
            var remainingLanesAfterCommit = root3.pendingLanes;
            var subscriber;
            try {
              subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null && root3.memoizedInteractions.size > 0) {
                var threadID = computeThreadID(root3, committedLanes);
                subscriber.onWorkStopped(root3.memoizedInteractions, threadID);
              }
            } catch (error3) {
              scheduleCallback(ImmediatePriority$1, function() {
                throw error3;
              });
            } finally {
              var pendingInteractionMap = root3.pendingInteractionMap;
              pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                  pendingInteractionMap.delete(lane);
                  scheduledInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      try {
                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                      } catch (error3) {
                        scheduleCallback(ImmediatePriority$1, function() {
                          throw error3;
                        });
                      }
                    }
                  });
                }
              });
            }
          }
          function shouldForceFlushFallbacksInDEV() {
            return actingUpdatesScopeDepth > 0;
          }
          var actingUpdatesScopeDepth = 0;
          function detachFiberAfterEffects(fiber) {
            fiber.sibling = null;
            fiber.stateNode = null;
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root3, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync3(function() {
                scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root3, element) {
            {
              if (root3.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync3(function() {
                updateContainer(element, root3, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag2 = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag2) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag2 === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root3, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types2 = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root3.current, types2, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types2, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag2 = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag2) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types2.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types2, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types2, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node3 = fiber;
              while (true) {
                switch (node3.tag) {
                  case HostComponent:
                    hostInstances.add(node3.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node3.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node3.stateNode.containerInfo);
                    return;
                }
                if (node3.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node3 = node3.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node3 = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node3.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node3.stateNode);
                } else if (node3.child !== null) {
                  node3.child.return = node3;
                  node3 = node3.child;
                  continue;
                }
                if (node3 === fiber) {
                  return foundHostInstances;
                }
                while (node3.sibling === null) {
                  if (node3.return === null || node3.return === fiber) {
                    return foundHostInstances;
                  }
                  node3 = node3.return;
                }
                node3.sibling.return = node3.return;
                node3 = node3.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          var debugCounter = 1;
          function FiberNode(tag2, pendingProps, key, mode2) {
            this.tag = tag2;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode2;
            this.flags = NoFlags;
            this.nextEffect = null;
            this.firstEffect = null;
            this.lastEffect = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugID = debugCounter++;
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag2, pendingProps, key, mode2) {
            return new FiberNode(tag2, pendingProps, key, mode2);
          };
          function shouldConstruct$1(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component2) {
            if (typeof Component2 === "function") {
              return shouldConstruct$1(Component2) ? ClassComponent : FunctionComponent;
            } else if (Component2 !== void 0 && Component2 !== null) {
              var $$typeof = Component2.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugID = current2._debugID;
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.nextEffect = null;
              workInProgress2.firstEffect = null;
              workInProgress2.lastEffect = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= Placement;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag2) {
            var mode2;
            if (tag2 === ConcurrentRoot) {
              mode2 = ConcurrentMode | BlockingMode | StrictMode;
            } else if (tag2 === BlockingRoot) {
              mode2 = BlockingMode | StrictMode;
            } else {
              mode2 = NoMode;
            }
            if (isDevToolsPresent) {
              mode2 |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode2);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode2, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode2, lanes, key);
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                    fiberTag = Mode;
                    mode2 |= DebugTracingMode;
                    break;
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode2 |= StrictMode;
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode2, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode2, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode2, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode2, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                    return createFiberFromLegacyHidden(pendingProps, mode2, lanes, key);
                  case REACT_SCOPE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                        case REACT_BLOCK_TYPE:
                          fiberTag = Block;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentName(owner.type) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    {
                      {
                        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                      }
                    }
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode2);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode2, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode2, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements2, mode2, lanes, key) {
            var fiber = createFiber(Fragment11, elements2, key, mode2);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode2, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error2('Profiler must specify an "id" as a prop');
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode2 | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.type = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode2, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode2);
            fiber.type = REACT_SUSPENSE_TYPE;
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode2, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode2);
            {
              fiber.type = REACT_SUSPENSE_LIST_TYPE;
            }
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode2, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode2);
            {
              fiber.type = REACT_OFFSCREEN_TYPE;
            }
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromLegacyHidden(pendingProps, mode2, lanes, key) {
            var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode2);
            {
              fiber.type = REACT_LEGACY_HIDDEN_TYPE;
            }
            fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromText(content, mode2, lanes) {
            var fiber = createFiber(HostText, content, null, mode2);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            fiber.type = "DELETED";
            return fiber;
          }
          function createFiberFromPortal(portal, mode2, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode2);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.nextEffect = source.nextEffect;
            target.firstEffect = source.firstEffect;
            target.lastEffect = source.lastEffect;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugID = source._debugID;
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag2, hydrate2) {
            this.tag = tag2;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.hydrate = hydrate2;
            this.callbackNode = null;
            this.callbackPriority = NoLanePriority;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.interactionThreadID = tracing.unstable_getThreadID();
              this.memoizedInteractions = /* @__PURE__ */ new Set();
              this.pendingInteractionMap = /* @__PURE__ */ new Map();
            }
            {
              switch (tag2) {
                case BlockingRoot:
                  this._debugRootType = "createBlockingRoot()";
                  break;
                case ConcurrentRoot:
                  this._debugRootType = "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = "createLegacyRoot()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag2, hydrate2, hydrationCallbacks) {
            var root3 = new FiberRootNode(containerInfo, tag2, hydrate2);
            var uninitializedFiber = createHostRootFiber(tag2);
            root3.current = uninitializedFiber;
            uninitializedFiber.stateNode = root3;
            initializeUpdateQueue(uninitializedFiber);
            return root3;
          }
          function registerMutableSourceForHydration(root3, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root3.mutableSourceEagerHydrationData == null) {
              root3.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root3.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          function createPortal2(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get4(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component2 = fiber.type;
              if (isContextProvider(Component2)) {
                return processChildContext(fiber, Component2, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get4(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  {
                    {
                      throw Error("Unable to find node on an unmounted component.");
                    }
                  }
                } else {
                  {
                    {
                      throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                    }
                  }
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictMode) {
                var componentName = getComponentName(fiber.type) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) {
                      error2("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error2("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag2, hydrate2, hydrationCallbacks) {
            return createFiberRoot(containerInfo, tag2, hydrate2);
          }
          function updateContainer(element, container3, parentComponent, callback) {
            {
              onScheduleRoot(container3, element);
            }
            var current$1 = container3.current;
            var eventTime = requestEventTime();
            {
              if (typeof jest !== "undefined") {
                warnIfUnmockedScheduler(current$1);
                warnIfNotScopedWithMatchingAct(current$1);
              }
            }
            var lane = requestUpdateLane(current$1);
            var context = getContextForSubtree(parentComponent);
            if (container3.context === null) {
              container3.context = context;
            } else {
              container3.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error2("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error2("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            enqueueUpdate(current$1, update);
            scheduleUpdateOnFiber(current$1, lane, eventTime);
            return lane;
          }
          function getPublicRootInstance(container3) {
            var containerFiber = container3.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptUserBlockingHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = InputDiscreteHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = SelectiveHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function runWithPriority$2(priority, fn) {
            try {
              setCurrentUpdateLanePriority(priority);
              return fn();
            } finally {
            }
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.tag === FundamentalComponent) {
              return hostFiber.stateNode.instance;
            }
            return hostFiber.stateNode;
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index2 + 1 === path.length) {
                if (Array.isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (Array.isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn2("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn2("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id2) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id2 > 0) {
                currentHook2 = currentHook2.next;
                id2--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id2, path, value) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateDeletePath = function(fiber, id2, path) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateRenamePath = function(fiber, id2, oldPath, newPath) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            scheduleUpdate = function(fiber) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools
            });
          }
          function ReactDOMRoot(container3, options2) {
            this._internalRoot = createRootImpl(container3, ConcurrentRoot, options2);
          }
          function ReactDOMBlockingRoot(container3, tag2, options2) {
            this._internalRoot = createRootImpl(container3, tag2, options2);
          }
          ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
            var root3 = this._internalRoot;
            {
              if (typeof arguments[1] === "function") {
                error2("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
              var container3 = root3.containerInfo;
              if (container3.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root3.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container3) {
                    error2("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root3, null, null);
          };
          ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error2("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root3 = this._internalRoot;
            var container3 = root3.containerInfo;
            updateContainer(null, root3, null, function() {
              unmarkContainerAsRoot(container3);
            });
          };
          function createRootImpl(container3, tag2, options2) {
            var hydrate2 = options2 != null && options2.hydrate === true;
            var hydrationCallbacks = options2 != null && options2.hydrationOptions || null;
            var mutableSources = options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources || null;
            var root3 = createContainer(container3, tag2, hydrate2);
            markContainerAsRoot(root3.current, container3);
            var containerNodeType = container3.nodeType;
            {
              var rootContainerElement = container3.nodeType === COMMENT_NODE ? container3.parentNode : container3;
              listenToAllSupportedEvents(rootContainerElement);
            }
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root3, mutableSource);
              }
            }
            return root3;
          }
          function createLegacyRoot(container3, options2) {
            return new ReactDOMBlockingRoot(container3, LegacyRoot, options2);
          }
          function isValidContainer(node3) {
            return !!(node3 && (node3.nodeType === ELEMENT_NODE || node3.nodeType === DOCUMENT_NODE || node3.nodeType === DOCUMENT_FRAGMENT_NODE || node3.nodeType === COMMENT_NODE && node3.nodeValue === " react-mount-point-unstable "));
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          var warnedAboutHydrateAPI = false;
          {
            topLevelUpdateWarnings = function(container3) {
              if (container3._reactRootContainer && container3.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container3._reactRootContainer._internalRoot.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container3) {
                    error2("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container3._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container3);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error2("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container3.nodeType === ELEMENT_NODE && container3.tagName && container3.tagName.toUpperCase() === "BODY") {
                error2("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container3) {
            if (!container3) {
              return null;
            }
            if (container3.nodeType === DOCUMENT_NODE) {
              return container3.documentElement;
            } else {
              return container3.firstChild;
            }
          }
          function shouldHydrateDueToLegacyHeuristic(container3) {
            var rootElement = getReactRootElementInContainer(container3);
            return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
          }
          function legacyCreateRootFromDOMContainer(container3, forceHydrate) {
            var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container3);
            if (!shouldHydrate) {
              var warned2 = false;
              var rootSibling;
              while (rootSibling = container3.lastChild) {
                {
                  if (!warned2 && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned2 = true;
                    error2("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                  }
                }
                container3.removeChild(rootSibling);
              }
            }
            {
              if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                warnedAboutHydrateAPI = true;
                warn2("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
              }
            }
            return createLegacyRoot(container3, shouldHydrate ? {
              hydrate: true
            } : void 0);
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container3, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container3);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var root3 = container3._reactRootContainer;
            var fiberRoot;
            if (!root3) {
              root3 = container3._reactRootContainer = legacyCreateRootFromDOMContainer(container3, forceHydrate);
              fiberRoot = root3._internalRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  originalCallback.call(instance);
                };
              }
              unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
              });
            } else {
              fiberRoot = root3._internalRoot;
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  _originalCallback.call(instance);
                };
              }
              updateContainer(children, fiberRoot, parentComponent, callback);
            }
            return getPublicRootInstance(fiberRoot);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error2("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container3, callback) {
            if (!isValidContainer(container3)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container3) && container3._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container3, true, callback);
          }
          function render3(element, container3, callback) {
            if (!isValidContainer(container3)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container3) && container3._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container3, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            if (!isValidContainer(containerNode)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            if (!(parentComponent != null && has(parentComponent))) {
              {
                throw Error("parentComponent must be a valid React Component");
              }
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container3) {
            if (!isValidContainer(container3)) {
              {
                throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container3) && container3._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container3._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container3);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container3, false, function() {
                  container3._reactRootContainer = null;
                  unmarkContainerAsRoot(container3);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container3);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container3.nodeType === ELEMENT_NODE && isValidContainer(container3.parentNode) && !!container3.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setAttemptHydrationAtPriority(runWithPriority$2);
          var didWarnAboutUnstableCreatePortal = false;
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error2("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
          function createPortal$1(children, container3) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container3)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            return createPortal2(children, container3, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          function unstable_createPortal(children, container3) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            {
              if (!didWarnAboutUnstableCreatePortal) {
                didWarnAboutUnstableCreatePortal = true;
                warn2('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
              }
            }
            return createPortal$1(children, container3, key);
          }
          var Internals = {
            Events: [
              getInstanceFromNode,
              getNodeFromInstance,
              getFiberCurrentPropsFromNode,
              enqueueStateRestore,
              restoreStateIfNeeded,
              flushPassiveEffects,
              IsThisRendererActing
            ]
          };
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM3 && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync3;
          exports.hydrate = hydrate;
          exports.render = render3;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_createPortal = unstable_createPortal;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object2) {
            if (typeof object2 === "object" && object2 !== null) {
              var $$typeof = object2.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object2.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment11 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal2 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object2) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object2) || typeOf(object2) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object2) {
            return typeOf(object2) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object2) {
            return typeOf(object2) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object2) {
            return typeOf(object2) === REACT_PROVIDER_TYPE;
          }
          function isElement2(object2) {
            return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object2) {
            return typeOf(object2) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object2) {
            return typeOf(object2) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object2) {
            return typeOf(object2) === REACT_LAZY_TYPE;
          }
          function isMemo(object2) {
            return typeOf(object2) === REACT_MEMO_TYPE;
          }
          function isPortal(object2) {
            return typeOf(object2) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object2) {
            return typeOf(object2) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object2) {
            return typeOf(object2) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object2) {
            return typeOf(object2) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment11;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal2;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement2;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
      "use strict";
      var reactIs = require_react_is();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys3 = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys3 = keys3.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i = 0; i < keys3.length; ++i) {
            var key = keys3[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics;
    }
  });

  // node_modules/lodash.mergewith/index.js
  var require_lodash = __commonJS({
    "node_modules/lodash.mergewith/index.js"(exports, module) {
      var LARGE_ARRAY_SIZE = 200;
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var HOT_COUNT = 800;
      var HOT_SPAN = 16;
      var MAX_SAFE_INTEGER = 9007199254740991;
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var asyncTag = "[object AsyncFunction]";
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var nullTag = "[object Null]";
      var objectTag = "[object Object]";
      var proxyTag = "[object Proxy]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var undefinedTag = "[object Undefined]";
      var weakMapTag = "[object WeakMap]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var float32Tag = "[object Float32Array]";
      var float64Tag = "[object Float64Array]";
      var int8Tag = "[object Int8Array]";
      var int16Tag = "[object Int16Array]";
      var int32Tag = "[object Int32Array]";
      var uint8Tag = "[object Uint8Array]";
      var uint8ClampedTag = "[object Uint8ClampedArray]";
      var uint16Tag = "[object Uint16Array]";
      var uint32Tag = "[object Uint32Array]";
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root2 = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types2 = freeModule && freeModule.require && freeModule.require("util").types;
          if (types2) {
            return types2;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func2, thisArg, args) {
        switch (args.length) {
          case 0:
            return func2.call(thisArg);
          case 1:
            return func2.call(thisArg, args[0]);
          case 2:
            return func2.call(thisArg, args[0], args[1]);
          case 3:
            return func2.call(thisArg, args[0], args[1], args[2]);
        }
        return func2.apply(thisArg, args);
      }
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseUnary(func2) {
        return function(value) {
          return func2(value);
        };
      }
      function getValue(object2, key) {
        return object2 == null ? void 0 : object2[key];
      }
      function overArg(func2, transform10) {
        return function(arg) {
          return func2(transform10(arg));
        };
      }
      var arrayProto = Array.prototype;
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var coreJsData = root2["__core-js_shared__"];
      var funcToString = funcProto.toString;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      var nativeObjectToString = objectProto.toString;
      var objectCtorString = funcToString.call(Object);
      var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
      var Buffer2 = moduleExports ? root2.Buffer : void 0;
      var Symbol2 = root2.Symbol;
      var Uint8Array2 = root2.Uint8Array;
      var allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
      var getPrototype = overArg(Object.getPrototypeOf, Object);
      var objectCreate = Object.create;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var splice = arrayProto.splice;
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      var defineProperty = function() {
        try {
          var func2 = getNative(Object, "defineProperty");
          func2({}, "", {});
          return func2;
        } catch (e) {
        }
      }();
      var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
      var nativeMax = Math.max;
      var nativeNow = Date.now;
      var Map2 = getNative(root2, "Map");
      var nativeCreate = getNative(Object, "create");
      var baseCreate = function() {
        function object2() {
        }
        return function(proto) {
          if (!isObject2(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object2.prototype = proto;
          var result = new object2();
          object2.prototype = void 0;
          return result;
        };
      }();
      function Hash(entries) {
        var index = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length2) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty2.call(data, key) ? data[key] : void 0;
      }
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
      }
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length2) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      function listCacheDelete(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        --this.size;
        return true;
      }
      function listCacheGet(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        return index < 0 ? void 0 : data[index][1];
      }
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      function listCacheSet(key, value) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length2) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      function mapCacheDelete(key) {
        var result = getMapData(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      function mapCacheSet(key, value) {
        var data = getMapData(this, key), size2 = data.size;
        data.set(key, value);
        this.size += data.size == size2 ? 0 : 1;
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function Stack2(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      function stackDelete(key) {
        var data = this.__data__, result = data["delete"](key);
        this.size = data.size;
        return result;
      }
      function stackGet(key) {
        return this.__data__.get(key);
      }
      function stackHas(key) {
        return this.__data__.has(key);
      }
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      Stack2.prototype.clear = stackClear;
      Stack2.prototype["delete"] = stackDelete;
      Stack2.prototype.get = stackGet;
      Stack2.prototype.has = stackHas;
      Stack2.prototype.set = stackSet;
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length2 = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length2)))) {
            result.push(key);
          }
        }
        return result;
      }
      function assignMergeValue(object2, key, value) {
        if (value !== void 0 && !eq(object2[key], value) || value === void 0 && !(key in object2)) {
          baseAssignValue(object2, key, value);
        }
      }
      function assignValue(object2, key, value) {
        var objValue = object2[key];
        if (!(hasOwnProperty2.call(object2, key) && eq(objValue, value)) || value === void 0 && !(key in object2)) {
          baseAssignValue(object2, key, value);
        }
      }
      function assocIndexOf(array, key) {
        var length2 = array.length;
        while (length2--) {
          if (eq(array[length2][0], key)) {
            return length2;
          }
        }
        return -1;
      }
      function baseAssignValue(object2, key, value) {
        if (key == "__proto__" && defineProperty) {
          defineProperty(object2, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object2[key] = value;
        }
      }
      var baseFor = createBaseFor();
      function baseGetTag(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }
      function baseIsNative(value) {
        if (!isObject2(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction3(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }
      function baseKeysIn(object2) {
        if (!isObject2(object2)) {
          return nativeKeysIn(object2);
        }
        var isProto = isPrototype(object2), result = [];
        for (var key in object2) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object2, key)))) {
            result.push(key);
          }
        }
        return result;
      }
      function baseMerge(object2, source, srcIndex, customizer, stack) {
        if (object2 === source) {
          return;
        }
        baseFor(source, function(srcValue, key) {
          stack || (stack = new Stack2());
          if (isObject2(srcValue)) {
            baseMergeDeep(object2, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object2, key), srcValue, key + "", object2, source, stack) : void 0;
            if (newValue === void 0) {
              newValue = srcValue;
            }
            assignMergeValue(object2, key, newValue);
          }
        }, keysIn);
      }
      function baseMergeDeep(object2, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object2, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
        if (stacked) {
          assignMergeValue(object2, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + "", object2, source, stack) : void 0;
        var isCommon = newValue === void 0;
        if (isCommon) {
          var isArr = isArray2(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray2(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject2(objValue) || isFunction3(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack["delete"](srcValue);
        }
        assignMergeValue(object2, key, newValue);
      }
      function baseRest(func2, start) {
        return setToString(overRest(func2, start, identity), func2 + "");
      }
      var baseSetToString = !defineProperty ? identity : function(func2, string2) {
        return defineProperty(func2, "toString", {
          "configurable": true,
          "enumerable": false,
          "value": constant(string2),
          "writable": true
        });
      };
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length2 = buffer.length, result = allocUnsafe ? allocUnsafe(length2) : new buffer.constructor(length2);
        buffer.copy(result);
        return result;
      }
      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
        return result;
      }
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }
      function copyArray(source, array) {
        var index = -1, length2 = source.length;
        array || (array = Array(length2));
        while (++index < length2) {
          array[index] = source[index];
        }
        return array;
      }
      function copyObject(source, props, object2, customizer) {
        var isNew = !object2;
        object2 || (object2 = {});
        var index = -1, length2 = props.length;
        while (++index < length2) {
          var key = props[index];
          var newValue = customizer ? customizer(object2[key], source[key], key, object2, source) : void 0;
          if (newValue === void 0) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object2, key, newValue);
          } else {
            assignValue(object2, key, newValue);
          }
        }
        return object2;
      }
      function createAssigner(assigner) {
        return baseRest(function(object2, sources) {
          var index = -1, length2 = sources.length, customizer = length2 > 1 ? sources[length2 - 1] : void 0, guard = length2 > 2 ? sources[2] : void 0;
          customizer = assigner.length > 3 && typeof customizer == "function" ? (length2--, customizer) : void 0;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length2 < 3 ? void 0 : customizer;
            length2 = 1;
          }
          object2 = Object(object2);
          while (++index < length2) {
            var source = sources[index];
            if (source) {
              assigner(object2, source, index, customizer);
            }
          }
          return object2;
        });
      }
      function createBaseFor(fromRight) {
        return function(object2, iteratee, keysFunc) {
          var index = -1, iterable = Object(object2), props = keysFunc(object2), length2 = props.length;
          while (length2--) {
            var key = props[fromRight ? length2 : ++index];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object2;
        };
      }
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      function getNative(object2, key) {
        var value = getValue(object2, key);
        return baseIsNative(value) ? value : void 0;
      }
      function getRawTag(value) {
        var isOwn = hasOwnProperty2.call(value, symToStringTag), tag2 = value[symToStringTag];
        try {
          value[symToStringTag] = void 0;
          var unmasked = true;
        } catch (e) {
        }
        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag2;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }
      function initCloneObject(object2) {
        return typeof object2.constructor == "function" && !isPrototype(object2) ? baseCreate(getPrototype(object2)) : {};
      }
      function isIndex(value, length2) {
        var type = typeof value;
        length2 = length2 == null ? MAX_SAFE_INTEGER : length2;
        return !!length2 && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length2);
      }
      function isIterateeCall(value, index, object2) {
        if (!isObject2(object2)) {
          return false;
        }
        var type = typeof index;
        if (type == "number" ? isArrayLike(object2) && isIndex(index, object2.length) : type == "string" && index in object2) {
          return eq(object2[index], value);
        }
        return false;
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      function isMasked(func2) {
        return !!maskSrcKey && maskSrcKey in func2;
      }
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto;
      }
      function nativeKeysIn(object2) {
        var result = [];
        if (object2 != null) {
          for (var key in Object(object2)) {
            result.push(key);
          }
        }
        return result;
      }
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      function overRest(func2, start, transform10) {
        start = nativeMax(start === void 0 ? func2.length - 1 : start, 0);
        return function() {
          var args = arguments, index = -1, length2 = nativeMax(args.length - start, 0), array = Array(length2);
          while (++index < length2) {
            array[index] = args[start + index];
          }
          index = -1;
          var otherArgs = Array(start + 1);
          while (++index < start) {
            otherArgs[index] = args[index];
          }
          otherArgs[start] = transform10(array);
          return apply(func2, this, otherArgs);
        };
      }
      function safeGet(object2, key) {
        if (key === "constructor" && typeof object2[key] === "function") {
          return;
        }
        if (key == "__proto__") {
          return;
        }
        return object2[key];
      }
      var setToString = shortOut(baseSetToString);
      function shortOut(func2) {
        var count = 0, lastCalled = 0;
        return function() {
          var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func2.apply(void 0, arguments);
        };
      }
      function toSource(func2) {
        if (func2 != null) {
          try {
            return funcToString.call(func2);
          } catch (e) {
          }
          try {
            return func2 + "";
          } catch (e) {
          }
        }
        return "";
      }
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      var isArguments = baseIsArguments(function() {
        return arguments;
      }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
      };
      var isArray2 = Array.isArray;
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction3(value);
      }
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }
      var isBuffer = nativeIsBuffer || stubFalse;
      function isFunction3(value) {
        if (!isObject2(value)) {
          return false;
        }
        var tag2 = baseGetTag(value);
        return tag2 == funcTag || tag2 == genTag || tag2 == asyncTag || tag2 == proxyTag;
      }
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      function isObject2(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }
        var proto = getPrototype(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }
      function keysIn(object2) {
        return isArrayLike(object2) ? arrayLikeKeys(object2, true) : baseKeysIn(object2);
      }
      var mergeWith = createAssigner(function(object2, source, srcIndex, customizer) {
        baseMerge(object2, source, srcIndex, customizer);
      });
      function constant(value) {
        return function() {
          return value;
        };
      }
      function identity(value) {
        return value;
      }
      function stubFalse() {
        return false;
      }
      module.exports = mergeWith;
    }
  });

  // node_modules/toggle-selection/index.js
  var require_toggle_selection = __commonJS({
    "node_modules/toggle-selection/index.js"(exports, module) {
      module.exports = function() {
        var selection = document.getSelection();
        if (!selection.rangeCount) {
          return function() {
          };
        }
        var active2 = document.activeElement;
        var ranges = [];
        for (var i = 0; i < selection.rangeCount; i++) {
          ranges.push(selection.getRangeAt(i));
        }
        switch (active2.tagName.toUpperCase()) {
          case "INPUT":
          case "TEXTAREA":
            active2.blur();
            break;
          default:
            active2 = null;
            break;
        }
        selection.removeAllRanges();
        return function() {
          selection.type === "Caret" && selection.removeAllRanges();
          if (!selection.rangeCount) {
            ranges.forEach(function(range) {
              selection.addRange(range);
            });
          }
          active2 && active2.focus();
        };
      };
    }
  });

  // node_modules/copy-to-clipboard/index.js
  var require_copy_to_clipboard = __commonJS({
    "node_modules/copy-to-clipboard/index.js"(exports, module) {
      "use strict";
      var deselectCurrent = require_toggle_selection();
      var clipboardToIE11Formatting = {
        "text/plain": "Text",
        "text/html": "Url",
        "default": "Text"
      };
      var defaultMessage = "Copy to clipboard: #{key}, Enter";
      function format(message) {
        var copyKey = (/mac os x/i.test(navigator.userAgent) ? "\u2318" : "Ctrl") + "+C";
        return message.replace(/#{\s*key\s*}/g, copyKey);
      }
      function copy3(text, options) {
        var debug, message, reselectPrevious, range, selection, mark, success = false;
        if (!options) {
          options = {};
        }
        debug = options.debug || false;
        try {
          reselectPrevious = deselectCurrent();
          range = document.createRange();
          selection = document.getSelection();
          mark = document.createElement("span");
          mark.textContent = text;
          mark.style.all = "unset";
          mark.style.position = "fixed";
          mark.style.top = 0;
          mark.style.clip = "rect(0, 0, 0, 0)";
          mark.style.whiteSpace = "pre";
          mark.style.webkitUserSelect = "text";
          mark.style.MozUserSelect = "text";
          mark.style.msUserSelect = "text";
          mark.style.userSelect = "text";
          mark.addEventListener("copy", function(e) {
            e.stopPropagation();
            if (options.format) {
              e.preventDefault();
              if (typeof e.clipboardData === "undefined") {
                debug && console.warn("unable to use e.clipboardData");
                debug && console.warn("trying IE specific stuff");
                window.clipboardData.clearData();
                var format2 = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"];
                window.clipboardData.setData(format2, text);
              } else {
                e.clipboardData.clearData();
                e.clipboardData.setData(options.format, text);
              }
            }
            if (options.onCopy) {
              e.preventDefault();
              options.onCopy(e.clipboardData);
            }
          });
          document.body.appendChild(mark);
          range.selectNodeContents(mark);
          selection.addRange(range);
          var successful = document.execCommand("copy");
          if (!successful) {
            throw new Error("copy command was unsuccessful");
          }
          success = true;
        } catch (err) {
          debug && console.error("unable to copy using execCommand: ", err);
          debug && console.warn("trying IE specific stuff");
          try {
            window.clipboardData.setData(options.format || "text", text);
            options.onCopy && options.onCopy(window.clipboardData);
            success = true;
          } catch (err2) {
            debug && console.error("unable to copy using clipboardData: ", err2);
            debug && console.error("falling back to prompt");
            message = format("message" in options ? options.message : defaultMessage);
            window.prompt(message, text);
          }
        } finally {
          if (selection) {
            if (typeof selection.removeRange == "function") {
              selection.removeRange(range);
            } else {
              selection.removeAllRanges();
            }
          }
          if (mark) {
            document.body.removeChild(mark);
          }
          reselectPrevious();
        }
        return success;
      }
      module.exports = copy3;
    }
  });

  // node_modules/react-fast-compare/index.js
  var require_react_fast_compare = __commonJS({
    "node_modules/react-fast-compare/index.js"(exports, module) {
      var hasElementType = typeof Element !== "undefined";
      var hasMap = typeof Map === "function";
      var hasSet = typeof Set === "function";
      var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
      function equal(a2, b2) {
        if (a2 === b2)
          return true;
        if (a2 && b2 && typeof a2 == "object" && typeof b2 == "object") {
          if (a2.constructor !== b2.constructor)
            return false;
          var length2, i, keys3;
          if (Array.isArray(a2)) {
            length2 = a2.length;
            if (length2 != b2.length)
              return false;
            for (i = length2; i-- !== 0; )
              if (!equal(a2[i], b2[i]))
                return false;
            return true;
          }
          var it;
          if (hasMap && a2 instanceof Map && b2 instanceof Map) {
            if (a2.size !== b2.size)
              return false;
            it = a2.entries();
            while (!(i = it.next()).done)
              if (!b2.has(i.value[0]))
                return false;
            it = a2.entries();
            while (!(i = it.next()).done)
              if (!equal(i.value[1], b2.get(i.value[0])))
                return false;
            return true;
          }
          if (hasSet && a2 instanceof Set && b2 instanceof Set) {
            if (a2.size !== b2.size)
              return false;
            it = a2.entries();
            while (!(i = it.next()).done)
              if (!b2.has(i.value[0]))
                return false;
            return true;
          }
          if (hasArrayBuffer && ArrayBuffer.isView(a2) && ArrayBuffer.isView(b2)) {
            length2 = a2.length;
            if (length2 != b2.length)
              return false;
            for (i = length2; i-- !== 0; )
              if (a2[i] !== b2[i])
                return false;
            return true;
          }
          if (a2.constructor === RegExp)
            return a2.source === b2.source && a2.flags === b2.flags;
          if (a2.valueOf !== Object.prototype.valueOf)
            return a2.valueOf() === b2.valueOf();
          if (a2.toString !== Object.prototype.toString)
            return a2.toString() === b2.toString();
          keys3 = Object.keys(a2);
          length2 = keys3.length;
          if (length2 !== Object.keys(b2).length)
            return false;
          for (i = length2; i-- !== 0; )
            if (!Object.prototype.hasOwnProperty.call(b2, keys3[i]))
              return false;
          if (hasElementType && a2 instanceof Element)
            return false;
          for (i = length2; i-- !== 0; ) {
            if ((keys3[i] === "_owner" || keys3[i] === "__v" || keys3[i] === "__o") && a2.$$typeof) {
              continue;
            }
            if (!equal(a2[keys3[i]], b2[keys3[i]]))
              return false;
          }
          return true;
        }
        return a2 !== a2 && b2 !== b2;
      }
      module.exports = function isEqual2(a2, b2) {
        try {
          return equal(a2, b2);
        } catch (error2) {
          if ((error2.message || "").match(/stack|recursion/i)) {
            console.warn("react-fast-compare cannot handle circular refs");
            return false;
          }
          throw error2;
        }
      };
    }
  });

  // node_modules/tslib/tslib.js
  var require_tslib = __commonJS({
    "node_modules/tslib/tslib.js"(exports, module) {
      var __extends4;
      var __assign5;
      var __rest5;
      var __decorate4;
      var __param4;
      var __metadata4;
      var __awaiter4;
      var __generator4;
      var __exportStar4;
      var __values4;
      var __read4;
      var __spread4;
      var __spreadArrays4;
      var __spreadArray2;
      var __await4;
      var __asyncGenerator4;
      var __asyncDelegator4;
      var __asyncValues4;
      var __makeTemplateObject4;
      var __importStar4;
      var __importDefault4;
      var __classPrivateFieldGet4;
      var __classPrivateFieldSet4;
      var __createBinding4;
      (function(factory2) {
        var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory2(createExporter(root2, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory2(createExporter(root2, createExporter(module.exports)));
        } else {
          factory2(createExporter(root2));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root2) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id2, v) {
            return exports2[id2] = previous ? previous(id2, v) : v;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b2) {
          d.__proto__ = b2;
        } || function(d, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d[p] = b2[p];
        };
        __extends4 = function(d, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d, b2);
          function __() {
            this.constructor = d;
          }
          d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
        __assign5 = Object.assign || function(t2) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t2[p] = s[p];
          }
          return t2;
        };
        __rest5 = function(s, e) {
          var t2 = {};
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
              t2[p] = s[p];
          if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t2[p[i]] = s[p[i]];
            }
          return t2;
        };
        __decorate4 = function(decorators, target, key, desc) {
          var c2 = arguments.length, r = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                r = (c2 < 3 ? d(r) : c2 > 3 ? d(target, key, r) : d(target, key)) || r;
          return c2 > 3 && r && Object.defineProperty(target, key, r), r;
        };
        __param4 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata4 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter4 = function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator4 = function(thisArg, body) {
          var _ = { label: 0, sent: function() {
            if (t2[0] & 1)
              throw t2[1];
            return t2[1];
          }, trys: [], ops: [] }, f, y, t2, g;
          return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f = 1, y && (t2 = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t2 = y["return"]) && t2.call(y), 0) : y.next) && !(t2 = t2.call(y, op[1])).done)
                  return t2;
                if (y = 0, t2)
                  op = [op[0] & 2, t2.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t2 = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t2[1]) {
                      _.label = t2[1];
                      t2 = op;
                      break;
                    }
                    if (t2 && _.label < t2[2]) {
                      _.label = t2[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t2[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t2 = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar4 = function(m, o) {
          for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
              __createBinding4(o, m, p);
        };
        __createBinding4 = Object.create ? function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          Object.defineProperty(o, k2, { enumerable: true, get: function() {
            return m[k];
          } });
        } : function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          o[k2] = m[k];
        };
        __values4 = function(o) {
          var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
          if (m)
            return m.call(o);
          if (o && typeof o.length === "number")
            return {
              next: function() {
                if (o && i >= o.length)
                  o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
          throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read4 = function(o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m)
            return o;
          var i = m.call(o), r, ar = [], e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error2) {
            e = { error: error2 };
          } finally {
            try {
              if (r && !r.done && (m = i["return"]))
                m.call(i);
            } finally {
              if (e)
                throw e.error;
            }
          }
          return ar;
        };
        __spread4 = function() {
          for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read4(arguments[i]));
          return ar;
        };
        __spreadArrays4 = function() {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
          for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
              r[k] = a2[j];
          return r;
        };
        __spreadArray2 = function(to, from2, pack) {
          if (pack || arguments.length === 2)
            for (var i = 0, l = from2.length, ar; i < l; i++) {
              if (ar || !(i in from2)) {
                if (!ar)
                  ar = Array.prototype.slice.call(from2, 0, i);
                ar[i] = from2[i];
              }
            }
          return to.concat(ar || Array.prototype.slice.call(from2));
        };
        __await4 = function(v) {
          return this instanceof __await4 ? (this.v = v, this) : new __await4(v);
        };
        __asyncGenerator4 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g = generator.apply(thisArg, _arguments || []), i, q = [];
          return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i;
          function verb(n) {
            if (g[n])
              i[n] = function(v) {
                return new Promise(function(a2, b2) {
                  q.push([n, v, a2, b2]) > 1 || resume(n, v);
                });
              };
          }
          function resume(n, v) {
            try {
              step(g[n](v));
            } catch (e) {
              settle(q[0][3], e);
            }
          }
          function step(r) {
            r.value instanceof __await4 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f, v) {
            if (f(v), q.shift(), q.length)
              resume(q[0][0], q[0][1]);
          }
        };
        __asyncDelegator4 = function(o) {
          var i, p;
          return i = {}, verb("next"), verb("throw", function(e) {
            throw e;
          }), verb("return"), i[Symbol.iterator] = function() {
            return this;
          }, i;
          function verb(n, f) {
            i[n] = o[n] ? function(v) {
              return (p = !p) ? { value: __await4(o[n](v)), done: n === "return" } : f ? f(v) : v;
            } : f;
          }
        };
        __asyncValues4 = function(o) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m = o[Symbol.asyncIterator], i;
          return m ? m.call(o) : (o = typeof __values4 === "function" ? __values4(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i);
          function verb(n) {
            i[n] = o[n] && function(v) {
              return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
              });
            };
          }
          function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v2) {
              resolve({ value: v2, done: d });
            }, reject);
          }
        };
        __makeTemplateObject4 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o, v) {
          Object.defineProperty(o, "default", { enumerable: true, value: v });
        } : function(o, v) {
          o["default"] = v;
        };
        __importStar4 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding4(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault4 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet4 = function(receiver, state2, kind, f) {
          if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state2 === "function" ? receiver !== state2 || !f : !state2.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state2.get(receiver);
        };
        __classPrivateFieldSet4 = function(receiver, state2, value, kind, f) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state2 === "function" ? receiver !== state2 || !f : !state2.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state2.set(receiver, value), value;
        };
        exporter("__extends", __extends4);
        exporter("__assign", __assign5);
        exporter("__rest", __rest5);
        exporter("__decorate", __decorate4);
        exporter("__param", __param4);
        exporter("__metadata", __metadata4);
        exporter("__awaiter", __awaiter4);
        exporter("__generator", __generator4);
        exporter("__exportStar", __exportStar4);
        exporter("__createBinding", __createBinding4);
        exporter("__values", __values4);
        exporter("__read", __read4);
        exporter("__spread", __spread4);
        exporter("__spreadArrays", __spreadArrays4);
        exporter("__spreadArray", __spreadArray2);
        exporter("__await", __await4);
        exporter("__asyncGenerator", __asyncGenerator4);
        exporter("__asyncDelegator", __asyncDelegator4);
        exporter("__asyncValues", __asyncValues4);
        exporter("__makeTemplateObject", __makeTemplateObject4);
        exporter("__importStar", __importStar4);
        exporter("__importDefault", __importDefault4);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet4);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet4);
      });
    }
  });

  // node_modules/framer-motion/node_modules/@emotion/memoize/dist/memoize.browser.cjs.js
  var require_memoize_browser_cjs = __commonJS({
    "node_modules/framer-motion/node_modules/@emotion/memoize/dist/memoize.browser.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function memoize4(fn) {
        var cache = {};
        return function(arg) {
          if (cache[arg] === void 0)
            cache[arg] = fn(arg);
          return cache[arg];
        };
      }
      exports.default = memoize4;
    }
  });

  // node_modules/framer-motion/node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.cjs.js
  var require_is_prop_valid_browser_cjs = __commonJS({
    "node_modules/framer-motion/node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
      }
      var memoize4 = _interopDefault(require_memoize_browser_cjs());
      var reactPropsRegex2 = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
      var index = memoize4(function(prop2) {
        return reactPropsRegex2.test(prop2) || prop2.charCodeAt(0) === 111 && prop2.charCodeAt(1) === 110 && prop2.charCodeAt(2) < 91;
      });
      exports.default = index;
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error2;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error2 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error2 = ex;
              }
              if (error2 && !(error2 instanceof Error)) {
                printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error2 + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
              }
              if (error2 instanceof Error && !(error2.message in loggedTypeFailures)) {
                loggedTypeFailures[error2.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning("Failed " + location + " type: " + error2.message + (stack != null ? stack : ""));
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is();
      var assign2 = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement5, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                  printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), { expectedType });
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i = 0; i < propValue.length; i++) {
              var error2 = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
              if (error2 instanceof Error) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement5(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
              if (is(propValue, expectedValues[i])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error2 = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error2 instanceof Error) {
                  return error2;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== "function") {
              printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + ".");
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
              var checker2 = arrayOfTypeCheckers[i2];
              var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location, propFullName, key, type) {
          return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              var error2 = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error2) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign2({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
              }
              var error2 = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error2) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement5(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/use-sidecar/node_modules/tslib/tslib.js
  var require_tslib2 = __commonJS({
    "node_modules/use-sidecar/node_modules/tslib/tslib.js"(exports, module) {
      var __extends4;
      var __assign5;
      var __rest5;
      var __decorate4;
      var __param4;
      var __metadata4;
      var __awaiter4;
      var __generator4;
      var __exportStar4;
      var __values4;
      var __read4;
      var __spread4;
      var __spreadArrays4;
      var __await4;
      var __asyncGenerator4;
      var __asyncDelegator4;
      var __asyncValues4;
      var __makeTemplateObject4;
      var __importStar4;
      var __importDefault4;
      var __classPrivateFieldGet4;
      var __classPrivateFieldSet4;
      var __createBinding4;
      (function(factory2) {
        var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory2(createExporter(root2, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory2(createExporter(root2, createExporter(module.exports)));
        } else {
          factory2(createExporter(root2));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root2) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id2, v) {
            return exports2[id2] = previous ? previous(id2, v) : v;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b2) {
          d.__proto__ = b2;
        } || function(d, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d[p] = b2[p];
        };
        __extends4 = function(d, b2) {
          extendStatics(d, b2);
          function __() {
            this.constructor = d;
          }
          d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
        __assign5 = Object.assign || function(t2) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t2[p] = s[p];
          }
          return t2;
        };
        __rest5 = function(s, e) {
          var t2 = {};
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
              t2[p] = s[p];
          if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t2[p[i]] = s[p[i]];
            }
          return t2;
        };
        __decorate4 = function(decorators, target, key, desc) {
          var c2 = arguments.length, r = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                r = (c2 < 3 ? d(r) : c2 > 3 ? d(target, key, r) : d(target, key)) || r;
          return c2 > 3 && r && Object.defineProperty(target, key, r), r;
        };
        __param4 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata4 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter4 = function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator4 = function(thisArg, body) {
          var _ = { label: 0, sent: function() {
            if (t2[0] & 1)
              throw t2[1];
            return t2[1];
          }, trys: [], ops: [] }, f, y, t2, g;
          return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f = 1, y && (t2 = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t2 = y["return"]) && t2.call(y), 0) : y.next) && !(t2 = t2.call(y, op[1])).done)
                  return t2;
                if (y = 0, t2)
                  op = [op[0] & 2, t2.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t2 = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t2[1]) {
                      _.label = t2[1];
                      t2 = op;
                      break;
                    }
                    if (t2 && _.label < t2[2]) {
                      _.label = t2[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t2[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t2 = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __createBinding4 = function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          o[k2] = m[k];
        };
        __exportStar4 = function(m, exports2) {
          for (var p in m)
            if (p !== "default" && !exports2.hasOwnProperty(p))
              exports2[p] = m[p];
        };
        __values4 = function(o) {
          var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
          if (m)
            return m.call(o);
          if (o && typeof o.length === "number")
            return {
              next: function() {
                if (o && i >= o.length)
                  o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
          throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read4 = function(o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m)
            return o;
          var i = m.call(o), r, ar = [], e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error2) {
            e = { error: error2 };
          } finally {
            try {
              if (r && !r.done && (m = i["return"]))
                m.call(i);
            } finally {
              if (e)
                throw e.error;
            }
          }
          return ar;
        };
        __spread4 = function() {
          for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read4(arguments[i]));
          return ar;
        };
        __spreadArrays4 = function() {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
          for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
              r[k] = a2[j];
          return r;
        };
        __await4 = function(v) {
          return this instanceof __await4 ? (this.v = v, this) : new __await4(v);
        };
        __asyncGenerator4 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g = generator.apply(thisArg, _arguments || []), i, q = [];
          return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i;
          function verb(n) {
            if (g[n])
              i[n] = function(v) {
                return new Promise(function(a2, b2) {
                  q.push([n, v, a2, b2]) > 1 || resume(n, v);
                });
              };
          }
          function resume(n, v) {
            try {
              step(g[n](v));
            } catch (e) {
              settle(q[0][3], e);
            }
          }
          function step(r) {
            r.value instanceof __await4 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f, v) {
            if (f(v), q.shift(), q.length)
              resume(q[0][0], q[0][1]);
          }
        };
        __asyncDelegator4 = function(o) {
          var i, p;
          return i = {}, verb("next"), verb("throw", function(e) {
            throw e;
          }), verb("return"), i[Symbol.iterator] = function() {
            return this;
          }, i;
          function verb(n, f) {
            i[n] = o[n] ? function(v) {
              return (p = !p) ? { value: __await4(o[n](v)), done: n === "return" } : f ? f(v) : v;
            } : f;
          }
        };
        __asyncValues4 = function(o) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m = o[Symbol.asyncIterator], i;
          return m ? m.call(o) : (o = typeof __values4 === "function" ? __values4(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i);
          function verb(n) {
            i[n] = o[n] && function(v) {
              return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
              });
            };
          }
          function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v2) {
              resolve({ value: v2, done: d });
            }, reject);
          }
        };
        __makeTemplateObject4 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        __importStar4 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (Object.hasOwnProperty.call(mod, k))
                result[k] = mod[k];
          }
          result["default"] = mod;
          return result;
        };
        __importDefault4 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet4 = function(receiver, privateMap) {
          if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
          }
          return privateMap.get(receiver);
        };
        __classPrivateFieldSet4 = function(receiver, privateMap, value) {
          if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
          }
          privateMap.set(receiver, value);
          return value;
        };
        exporter("__extends", __extends4);
        exporter("__assign", __assign5);
        exporter("__rest", __rest5);
        exporter("__decorate", __decorate4);
        exporter("__param", __param4);
        exporter("__metadata", __metadata4);
        exporter("__awaiter", __awaiter4);
        exporter("__generator", __generator4);
        exporter("__exportStar", __exportStar4);
        exporter("__createBinding", __createBinding4);
        exporter("__values", __values4);
        exporter("__read", __read4);
        exporter("__spread", __spread4);
        exporter("__spreadArrays", __spreadArrays4);
        exporter("__await", __await4);
        exporter("__asyncGenerator", __asyncGenerator4);
        exporter("__asyncDelegator", __asyncDelegator4);
        exporter("__asyncValues", __asyncValues4);
        exporter("__makeTemplateObject", __makeTemplateObject4);
        exporter("__importStar", __importStar4);
        exporter("__importDefault", __importDefault4);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet4);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet4);
      });
    }
  });

  // node_modules/react-remove-scroll/node_modules/tslib/tslib.js
  var require_tslib3 = __commonJS({
    "node_modules/react-remove-scroll/node_modules/tslib/tslib.js"(exports, module) {
      var __extends4;
      var __assign5;
      var __rest5;
      var __decorate4;
      var __param4;
      var __metadata4;
      var __awaiter4;
      var __generator4;
      var __exportStar4;
      var __values4;
      var __read4;
      var __spread4;
      var __spreadArrays4;
      var __await4;
      var __asyncGenerator4;
      var __asyncDelegator4;
      var __asyncValues4;
      var __makeTemplateObject4;
      var __importStar4;
      var __importDefault4;
      var __classPrivateFieldGet4;
      var __classPrivateFieldSet4;
      var __createBinding4;
      (function(factory2) {
        var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory2(createExporter(root2, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory2(createExporter(root2, createExporter(module.exports)));
        } else {
          factory2(createExporter(root2));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root2) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id2, v) {
            return exports2[id2] = previous ? previous(id2, v) : v;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b2) {
          d.__proto__ = b2;
        } || function(d, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d[p] = b2[p];
        };
        __extends4 = function(d, b2) {
          extendStatics(d, b2);
          function __() {
            this.constructor = d;
          }
          d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
        __assign5 = Object.assign || function(t2) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t2[p] = s[p];
          }
          return t2;
        };
        __rest5 = function(s, e) {
          var t2 = {};
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
              t2[p] = s[p];
          if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t2[p[i]] = s[p[i]];
            }
          return t2;
        };
        __decorate4 = function(decorators, target, key, desc) {
          var c2 = arguments.length, r = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                r = (c2 < 3 ? d(r) : c2 > 3 ? d(target, key, r) : d(target, key)) || r;
          return c2 > 3 && r && Object.defineProperty(target, key, r), r;
        };
        __param4 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata4 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter4 = function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator4 = function(thisArg, body) {
          var _ = { label: 0, sent: function() {
            if (t2[0] & 1)
              throw t2[1];
            return t2[1];
          }, trys: [], ops: [] }, f, y, t2, g;
          return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f = 1, y && (t2 = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t2 = y["return"]) && t2.call(y), 0) : y.next) && !(t2 = t2.call(y, op[1])).done)
                  return t2;
                if (y = 0, t2)
                  op = [op[0] & 2, t2.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t2 = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t2[1]) {
                      _.label = t2[1];
                      t2 = op;
                      break;
                    }
                    if (t2 && _.label < t2[2]) {
                      _.label = t2[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t2[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t2 = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __createBinding4 = function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          o[k2] = m[k];
        };
        __exportStar4 = function(m, exports2) {
          for (var p in m)
            if (p !== "default" && !exports2.hasOwnProperty(p))
              exports2[p] = m[p];
        };
        __values4 = function(o) {
          var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
          if (m)
            return m.call(o);
          if (o && typeof o.length === "number")
            return {
              next: function() {
                if (o && i >= o.length)
                  o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
          throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read4 = function(o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m)
            return o;
          var i = m.call(o), r, ar = [], e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error2) {
            e = { error: error2 };
          } finally {
            try {
              if (r && !r.done && (m = i["return"]))
                m.call(i);
            } finally {
              if (e)
                throw e.error;
            }
          }
          return ar;
        };
        __spread4 = function() {
          for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read4(arguments[i]));
          return ar;
        };
        __spreadArrays4 = function() {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
          for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
              r[k] = a2[j];
          return r;
        };
        __await4 = function(v) {
          return this instanceof __await4 ? (this.v = v, this) : new __await4(v);
        };
        __asyncGenerator4 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g = generator.apply(thisArg, _arguments || []), i, q = [];
          return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i;
          function verb(n) {
            if (g[n])
              i[n] = function(v) {
                return new Promise(function(a2, b2) {
                  q.push([n, v, a2, b2]) > 1 || resume(n, v);
                });
              };
          }
          function resume(n, v) {
            try {
              step(g[n](v));
            } catch (e) {
              settle(q[0][3], e);
            }
          }
          function step(r) {
            r.value instanceof __await4 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f, v) {
            if (f(v), q.shift(), q.length)
              resume(q[0][0], q[0][1]);
          }
        };
        __asyncDelegator4 = function(o) {
          var i, p;
          return i = {}, verb("next"), verb("throw", function(e) {
            throw e;
          }), verb("return"), i[Symbol.iterator] = function() {
            return this;
          }, i;
          function verb(n, f) {
            i[n] = o[n] ? function(v) {
              return (p = !p) ? { value: __await4(o[n](v)), done: n === "return" } : f ? f(v) : v;
            } : f;
          }
        };
        __asyncValues4 = function(o) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m = o[Symbol.asyncIterator], i;
          return m ? m.call(o) : (o = typeof __values4 === "function" ? __values4(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i);
          function verb(n) {
            i[n] = o[n] && function(v) {
              return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
              });
            };
          }
          function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v2) {
              resolve({ value: v2, done: d });
            }, reject);
          }
        };
        __makeTemplateObject4 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        __importStar4 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (Object.hasOwnProperty.call(mod, k))
                result[k] = mod[k];
          }
          result["default"] = mod;
          return result;
        };
        __importDefault4 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet4 = function(receiver, privateMap) {
          if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
          }
          return privateMap.get(receiver);
        };
        __classPrivateFieldSet4 = function(receiver, privateMap, value) {
          if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
          }
          privateMap.set(receiver, value);
          return value;
        };
        exporter("__extends", __extends4);
        exporter("__assign", __assign5);
        exporter("__rest", __rest5);
        exporter("__decorate", __decorate4);
        exporter("__param", __param4);
        exporter("__metadata", __metadata4);
        exporter("__awaiter", __awaiter4);
        exporter("__generator", __generator4);
        exporter("__exportStar", __exportStar4);
        exporter("__createBinding", __createBinding4);
        exporter("__values", __values4);
        exporter("__read", __read4);
        exporter("__spread", __spread4);
        exporter("__spreadArrays", __spreadArrays4);
        exporter("__await", __await4);
        exporter("__asyncGenerator", __asyncGenerator4);
        exporter("__asyncDelegator", __asyncDelegator4);
        exporter("__asyncValues", __asyncValues4);
        exporter("__makeTemplateObject", __makeTemplateObject4);
        exporter("__importStar", __importStar4);
        exporter("__importDefault", __importDefault4);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet4);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet4);
      });
    }
  });

  // node_modules/warning/warning.js
  var require_warning = __commonJS({
    "node_modules/warning/warning.js"(exports, module) {
      "use strict";
      var __DEV__2 = true;
      var warning2 = function() {
      };
      if (__DEV__2) {
        printWarning = function printWarning2(format, args) {
          var len = arguments.length;
          args = new Array(len > 1 ? len - 1 : 0);
          for (var key = 1; key < len; key++) {
            args[key - 1] = arguments[key];
          }
          var argIndex = 0;
          var message = "Warning: " + format.replace(/%s/g, function() {
            return args[argIndex++];
          });
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
        warning2 = function(condition, format, args) {
          var len = arguments.length;
          args = new Array(len > 2 ? len - 2 : 0);
          for (var key = 2; key < len; key++) {
            args[key - 2] = arguments[key];
          }
          if (format === void 0) {
            throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
          }
          if (!condition) {
            printWarning.apply(null, [format].concat(args));
          }
        };
      }
      var printWarning;
      module.exports = warning2;
    }
  });

  // src/index.jsx
  var import_react74 = __toESM(require_react());
  var import_react_dom4 = __toESM(require_react_dom());

  // node_modules/@emotion/react/dist/emotion-react.browser.esm.js
  var React2 = __toESM(require_react());
  var import_react2 = __toESM(require_react());

  // node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js
  function sheetForTag(tag2) {
    if (tag2.sheet) {
      return tag2.sheet;
    }
    for (var i = 0; i < document.styleSheets.length; i++) {
      if (document.styleSheets[i].ownerNode === tag2) {
        return document.styleSheets[i];
      }
    }
  }
  function createStyleElement(options) {
    var tag2 = document.createElement("style");
    tag2.setAttribute("data-emotion", options.key);
    if (options.nonce !== void 0) {
      tag2.setAttribute("nonce", options.nonce);
    }
    tag2.appendChild(document.createTextNode(""));
    tag2.setAttribute("data-s", "");
    return tag2;
  }
  var StyleSheet = /* @__PURE__ */ function() {
    function StyleSheet2(options) {
      var _this = this;
      this._insertTag = function(tag2) {
        var before;
        if (_this.tags.length === 0) {
          if (_this.insertionPoint) {
            before = _this.insertionPoint.nextSibling;
          } else if (_this.prepend) {
            before = _this.container.firstChild;
          } else {
            before = _this.before;
          }
        } else {
          before = _this.tags[_this.tags.length - 1].nextSibling;
        }
        _this.container.insertBefore(tag2, before);
        _this.tags.push(tag2);
      };
      this.isSpeedy = options.speedy === void 0 ? false : options.speedy;
      this.tags = [];
      this.ctr = 0;
      this.nonce = options.nonce;
      this.key = options.key;
      this.container = options.container;
      this.prepend = options.prepend;
      this.insertionPoint = options.insertionPoint;
      this.before = null;
    }
    var _proto = StyleSheet2.prototype;
    _proto.hydrate = function hydrate(nodes) {
      nodes.forEach(this._insertTag);
    };
    _proto.insert = function insert(rule) {
      if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
        this._insertTag(createStyleElement(this));
      }
      var tag2 = this.tags[this.tags.length - 1];
      if (true) {
        var isImportRule3 = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
        if (isImportRule3 && this._alreadyInsertedOrderInsensitiveRule) {
          console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
        }
        this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule3;
      }
      if (this.isSpeedy) {
        var sheet = sheetForTag(tag2);
        try {
          sheet.insertRule(rule, sheet.cssRules.length);
        } catch (e) {
          if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear){/.test(rule)) {
            console.error('There was a problem inserting the following rule: "' + rule + '"', e);
          }
        }
      } else {
        tag2.appendChild(document.createTextNode(rule));
      }
      this.ctr++;
    };
    _proto.flush = function flush() {
      this.tags.forEach(function(tag2) {
        return tag2.parentNode && tag2.parentNode.removeChild(tag2);
      });
      this.tags = [];
      this.ctr = 0;
      if (true) {
        this._alreadyInsertedOrderInsensitiveRule = false;
      }
    };
    return StyleSheet2;
  }();

  // node_modules/stylis/src/Enum.js
  var MS = "-ms-";
  var MOZ = "-moz-";
  var WEBKIT = "-webkit-";
  var COMMENT = "comm";
  var RULESET = "rule";
  var DECLARATION = "decl";
  var IMPORT = "@import";
  var KEYFRAMES = "@keyframes";

  // node_modules/stylis/src/Utility.js
  var abs = Math.abs;
  var from = String.fromCharCode;
  var assign = Object.assign;
  function hash(value, length2) {
    return (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3);
  }
  function trim(value) {
    return value.trim();
  }
  function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value;
  }
  function replace(value, pattern, replacement) {
    return value.replace(pattern, replacement);
  }
  function indexof(value, search) {
    return value.indexOf(search);
  }
  function charat(value, index) {
    return value.charCodeAt(index) | 0;
  }
  function substr(value, begin, end) {
    return value.slice(begin, end);
  }
  function strlen(value) {
    return value.length;
  }
  function sizeof(value) {
    return value.length;
  }
  function append(value, array) {
    return array.push(value), value;
  }
  function combine(array, callback) {
    return array.map(callback).join("");
  }

  // node_modules/stylis/src/Tokenizer.js
  var line = 1;
  var column = 1;
  var length = 0;
  var position = 0;
  var character = 0;
  var characters = "";
  function node(value, root2, parent, type, props, children, length2) {
    return { value, root: root2, parent, type, props, children, line, column, length: length2, return: "" };
  }
  function copy(root2, props) {
    return assign(node("", null, null, "", null, null, 0), root2, { length: -root2.length }, props);
  }
  function char() {
    return character;
  }
  function prev() {
    character = position > 0 ? charat(characters, --position) : 0;
    if (column--, character === 10)
      column = 1, line--;
    return character;
  }
  function next() {
    character = position < length ? charat(characters, position++) : 0;
    if (column++, character === 10)
      column = 1, line++;
    return character;
  }
  function peek() {
    return charat(characters, position);
  }
  function caret() {
    return position;
  }
  function slice(begin, end) {
    return substr(characters, begin, end);
  }
  function token(type) {
    switch (type) {
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      case 59:
      case 123:
      case 125:
        return 4;
      case 58:
        return 3;
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position = 0, [];
  }
  function dealloc(value) {
    return characters = "", value;
  }
  function delimit(type) {
    return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
  }
  function whitespace(type) {
    while (character = peek())
      if (character < 33)
        next();
      else
        break;
    return token(type) > 2 || token(character) > 3 ? "" : " ";
  }
  function escaping(index, count) {
    while (--count && next())
      if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
        break;
    return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
  }
  function delimiter(type) {
    while (next())
      switch (character) {
        case type:
          return position;
        case 34:
        case 39:
          if (type !== 34 && type !== 39)
            delimiter(character);
          break;
        case 40:
          if (type === 41)
            delimiter(type);
          break;
        case 92:
          next();
          break;
      }
    return position;
  }
  function commenter(type, index) {
    while (next())
      if (type + character === 47 + 10)
        break;
      else if (type + character === 42 + 42 && peek() === 47)
        break;
    return "/*" + slice(index, position - 1) + "*" + from(type === 47 ? type : next());
  }
  function identifier(index) {
    while (!token(peek()))
      next();
    return slice(index, position);
  }

  // node_modules/stylis/src/Parser.js
  function compile(value) {
    return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
  }
  function parse(value, root2, parent, rule, rules, rulesets, pseudo, points, declarations) {
    var index = 0;
    var offset = 0;
    var length2 = pseudo;
    var atrule = 0;
    var property = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character2 = 0;
    var type = "";
    var props = rules;
    var children = rulesets;
    var reference = rule;
    var characters2 = type;
    while (scanning)
      switch (previous = character2, character2 = next()) {
        case 40:
          if (previous != 108 && characters2.charCodeAt(length2 - 1) == 58) {
            if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
              ampersand = -1;
            break;
          }
        case 34:
        case 39:
        case 91:
          characters2 += delimit(character2);
          break;
        case 9:
        case 10:
        case 13:
        case 32:
          characters2 += whitespace(previous);
          break;
        case 92:
          characters2 += escaping(caret() - 1, 7);
          continue;
        case 47:
          switch (peek()) {
            case 42:
            case 47:
              append(comment(commenter(next(), caret()), root2, parent), declarations);
              break;
            default:
              characters2 += "/";
          }
          break;
        case 123 * variable:
          points[index++] = strlen(characters2) * ampersand;
        case 125 * variable:
        case 59:
        case 0:
          switch (character2) {
            case 0:
            case 125:
              scanning = 0;
            case 59 + offset:
              if (property > 0 && strlen(characters2) - length2)
                append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
              break;
            case 59:
              characters2 += ";";
            default:
              append(reference = ruleset(characters2, root2, parent, index, offset, rules, points, type, props = [], children = [], length2), rulesets);
              if (character2 === 123)
                if (offset === 0)
                  parse(characters2, root2, reference, reference, props, rulesets, length2, points, children);
                else
                  switch (atrule) {
                    case 100:
                    case 109:
                    case 115:
                      parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length2), children), rules, children, length2, points, rule ? props : children);
                      break;
                    default:
                      parse(characters2, reference, reference, reference, [""], children, 0, points, children);
                  }
          }
          index = offset = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
          break;
        case 58:
          length2 = 1 + strlen(characters2), property = previous;
        default:
          if (variable < 1) {
            if (character2 == 123)
              --variable;
            else if (character2 == 125 && variable++ == 0 && prev() == 125)
              continue;
          }
          switch (characters2 += from(character2), character2 * variable) {
            case 38:
              ampersand = offset > 0 ? 1 : (characters2 += "\f", -1);
              break;
            case 44:
              points[index++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
              break;
            case 64:
              if (peek() === 45)
                characters2 += delimit(next());
              atrule = peek(), offset = length2 = strlen(type = characters2 += identifier(caret())), character2++;
              break;
            case 45:
              if (previous === 45 && strlen(characters2) == 2)
                variable = 0;
          }
      }
    return rulesets;
  }
  function ruleset(value, root2, parent, index, offset, rules, points, type, props, children, length2) {
    var post = offset - 1;
    var rule = offset === 0 ? rules : [""];
    var size2 = sizeof(rule);
    for (var i = 0, j = 0, k = 0; i < index; ++i)
      for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size2; ++x)
        if (z = trim(j > 0 ? rule[x] + " " + y : replace(y, /&\f/g, rule[x])))
          props[k++] = z;
    return node(value, root2, parent, offset === 0 ? RULESET : type, props, children, length2);
  }
  function comment(value, root2, parent) {
    return node(value, root2, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
  }
  function declaration(value, root2, parent, length2) {
    return node(value, root2, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
  }

  // node_modules/stylis/src/Prefixer.js
  function prefix(value, length2) {
    switch (hash(value, length2)) {
      case 5103:
        return WEBKIT + "print-" + value + value;
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return WEBKIT + value + value;
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return WEBKIT + value + MOZ + value + MS + value + value;
      case 6828:
      case 4268:
        return WEBKIT + value + MS + value + value;
      case 6165:
        return WEBKIT + value + MS + "flex-" + value + value;
      case 5187:
        return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
      case 5443:
        return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
      case 4675:
        return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
      case 5548:
        return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
      case 5292:
        return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
      case 6060:
        return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
      case 4554:
        return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
      case 6187:
        return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
      case 5495:
      case 3959:
        return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
      case 4968:
        return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (strlen(value) - 1 - length2 > 6)
          switch (charat(value, length2 + 1)) {
            case 109:
              if (charat(value, length2 + 4) !== 45)
                break;
            case 102:
              return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
            case 115:
              return ~indexof(value, "stretch") ? prefix(replace(value, "stretch", "fill-available"), length2) + value : value;
          }
        break;
      case 4949:
        if (charat(value, length2 + 1) !== 115)
          break;
      case 6444:
        switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
          case 107:
            return replace(value, ":", ":" + WEBKIT) + value;
          case 101:
            return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
        }
        break;
      case 5936:
        switch (charat(value, length2 + 11)) {
          case 114:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
          case 108:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
          case 45:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
        }
        return WEBKIT + value + MS + value + value;
    }
    return value;
  }

  // node_modules/stylis/src/Serializer.js
  function serialize(children, callback) {
    var output = "";
    var length2 = sizeof(children);
    for (var i = 0; i < length2; i++)
      output += callback(children[i], i, children, callback) || "";
    return output;
  }
  function stringify(element, index, children, callback) {
    switch (element.type) {
      case IMPORT:
      case DECLARATION:
        return element.return = element.return || element.value;
      case COMMENT:
        return "";
      case KEYFRAMES:
        return element.return = element.value + "{" + serialize(element.children, callback) + "}";
      case RULESET:
        element.value = element.props.join(",");
    }
    return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
  }

  // node_modules/stylis/src/Middleware.js
  function middleware(collection) {
    var length2 = sizeof(collection);
    return function(element, index, children, callback) {
      var output = "";
      for (var i = 0; i < length2; i++)
        output += collection[i](element, index, children, callback) || "";
      return output;
    };
  }
  function prefixer(element, index, children, callback) {
    if (element.length > -1) {
      if (!element.return)
        switch (element.type) {
          case DECLARATION:
            element.return = prefix(element.value, element.length);
            break;
          case KEYFRAMES:
            return serialize([copy(element, { value: replace(element.value, "@", "@" + WEBKIT) })], callback);
          case RULESET:
            if (element.length)
              return combine(element.props, function(value) {
                switch (match(value, /(::plac\w+|:read-\w+)/)) {
                  case ":read-only":
                  case ":read-write":
                    return serialize([copy(element, { props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")] })], callback);
                  case "::placeholder":
                    return serialize([
                      copy(element, { props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")] }),
                      copy(element, { props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")] }),
                      copy(element, { props: [replace(value, /:(plac\w+)/, MS + "input-$1")] })
                    ], callback);
                }
                return "";
              });
        }
    }
  }

  // node_modules/@emotion/weak-memoize/dist/weak-memoize.browser.esm.js
  var weakMemoize = function weakMemoize2(func2) {
    var cache = /* @__PURE__ */ new WeakMap();
    return function(arg) {
      if (cache.has(arg)) {
        return cache.get(arg);
      }
      var ret = func2(arg);
      cache.set(arg, ret);
      return ret;
    };
  };
  var weak_memoize_browser_esm_default = weakMemoize;

  // node_modules/@emotion/memoize/dist/emotion-memoize.browser.esm.js
  function memoize(fn) {
    var cache = /* @__PURE__ */ Object.create(null);
    return function(arg) {
      if (cache[arg] === void 0)
        cache[arg] = fn(arg);
      return cache[arg];
    };
  }
  var emotion_memoize_browser_esm_default = memoize;

  // node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js
  var last = function last2(arr) {
    return arr.length ? arr[arr.length - 1] : null;
  };
  var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index) {
    var previous = 0;
    var character2 = 0;
    while (true) {
      previous = character2;
      character2 = peek();
      if (previous === 38 && character2 === 12) {
        points[index] = 1;
      }
      if (token(character2)) {
        break;
      }
      next();
    }
    return slice(begin, position);
  };
  var toRules = function toRules2(parsed, points) {
    var index = -1;
    var character2 = 44;
    do {
      switch (token(character2)) {
        case 0:
          if (character2 === 38 && peek() === 12) {
            points[index] = 1;
          }
          parsed[index] += identifierWithPointTracking(position - 1, points, index);
          break;
        case 2:
          parsed[index] += delimit(character2);
          break;
        case 4:
          if (character2 === 44) {
            parsed[++index] = peek() === 58 ? "&\f" : "";
            points[index] = parsed[index].length;
            break;
          }
        default:
          parsed[index] += from(character2);
      }
    } while (character2 = next());
    return parsed;
  };
  var getRules = function getRules2(value, points) {
    return dealloc(toRules(alloc(value), points));
  };
  var fixedElements = /* @__PURE__ */ new WeakMap();
  var compat = function compat2(element) {
    if (element.type !== "rule" || !element.parent || element.length < 1) {
      return;
    }
    var value = element.value, parent = element.parent;
    var isImplicitRule = element.column === parent.column && element.line === parent.line;
    while (parent.type !== "rule") {
      parent = parent.parent;
      if (!parent)
        return;
    }
    if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
      return;
    }
    if (isImplicitRule) {
      return;
    }
    fixedElements.set(element, true);
    var points = [];
    var rules = getRules(value, points);
    var parentRules = parent.props;
    for (var i = 0, k = 0; i < rules.length; i++) {
      for (var j = 0; j < parentRules.length; j++, k++) {
        element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
      }
    }
  };
  var removeLabel = function removeLabel2(element) {
    if (element.type === "decl") {
      var value = element.value;
      if (value.charCodeAt(0) === 108 && value.charCodeAt(2) === 98) {
        element["return"] = "";
        element.value = "";
      }
    }
  };
  var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
  var isIgnoringComment = function isIgnoringComment2(element) {
    return !!element && element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
  };
  var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache) {
    return function(element, index, children) {
      if (element.type !== "rule")
        return;
      var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
      if (unsafePseudoClasses && cache.compat !== true) {
        var prevElement = index > 0 ? children[index - 1] : null;
        if (prevElement && isIgnoringComment(last(prevElement.children))) {
          return;
        }
        unsafePseudoClasses.forEach(function(unsafePseudoClass) {
          console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
        });
      }
    };
  };
  var isImportRule = function isImportRule2(element) {
    return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
  };
  var isPrependedWithRegularRules = function isPrependedWithRegularRules2(index, children) {
    for (var i = index - 1; i >= 0; i--) {
      if (!isImportRule(children[i])) {
        return true;
      }
    }
    return false;
  };
  var nullifyElement = function nullifyElement2(element) {
    element.type = "";
    element.value = "";
    element["return"] = "";
    element.children = "";
    element.props = "";
  };
  var incorrectImportAlarm = function incorrectImportAlarm2(element, index, children) {
    if (!isImportRule(element)) {
      return;
    }
    if (element.parent) {
      console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
      nullifyElement(element);
    } else if (isPrependedWithRegularRules(index, children)) {
      console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
      nullifyElement(element);
    }
  };
  var defaultStylisPlugins = [prefixer];
  var createCache = function createCache2(options) {
    var key = options.key;
    if (!key) {
      throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
    }
    if (key === "css") {
      var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
      Array.prototype.forEach.call(ssrStyles, function(node3) {
        var dataEmotionAttribute = node3.getAttribute("data-emotion");
        if (dataEmotionAttribute.indexOf(" ") === -1) {
          return;
        }
        document.head.appendChild(node3);
        node3.setAttribute("data-s", "");
      });
    }
    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
    if (true) {
      if (/[^a-z-]/.test(key)) {
        throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
      }
    }
    var inserted = {};
    var container3;
    var nodesToHydrate = [];
    {
      container3 = options.container || document.head;
      Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="' + key + ' "]'), function(node3) {
        var attrib = node3.getAttribute("data-emotion").split(" ");
        for (var i = 1; i < attrib.length; i++) {
          inserted[attrib[i]] = true;
        }
        nodesToHydrate.push(node3);
      });
    }
    var _insert;
    var omnipresentPlugins = [compat, removeLabel];
    if (true) {
      omnipresentPlugins.push(createUnsafeSelectorsAlarm({
        get compat() {
          return cache.compat;
        }
      }), incorrectImportAlarm);
    }
    {
      var currentSheet;
      var finalizingPlugins = [stringify, true ? function(element) {
        if (!element.root) {
          if (element["return"]) {
            currentSheet.insert(element["return"]);
          } else if (element.value && element.type !== COMMENT) {
            currentSheet.insert(element.value + "{}");
          }
        }
      } : rulesheet(function(rule) {
        currentSheet.insert(rule);
      })];
      var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
      var stylis = function stylis2(styles2) {
        return serialize(compile(styles2), serializer);
      };
      _insert = function insert(selector2, serialized, sheet, shouldCache) {
        currentSheet = sheet;
        if (serialized.map !== void 0) {
          currentSheet = {
            insert: function insert2(rule) {
              sheet.insert(rule + serialized.map);
            }
          };
        }
        stylis(selector2 ? selector2 + "{" + serialized.styles + "}" : serialized.styles);
        if (shouldCache) {
          cache.inserted[serialized.name] = true;
        }
      };
    }
    var cache = {
      key,
      sheet: new StyleSheet({
        key,
        container: container3,
        nonce: options.nonce,
        speedy: options.speedy,
        prepend: options.prepend,
        insertionPoint: options.insertionPoint
      }),
      nonce: options.nonce,
      inserted,
      registered: {},
      insert: _insert
    };
    cache.sheet.hydrate(nodesToHydrate);
    return cache;
  };
  var emotion_cache_browser_esm_default = createCache;

  // node_modules/@emotion/react/dist/emotion-element-cbed451f.browser.esm.js
  var React = __toESM(require_react());
  var import_react = __toESM(require_react());

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }

  // node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js
  var isBrowser = true;
  function getRegisteredStyles(registered, registeredStyles, classNames2) {
    var rawClassName = "";
    classNames2.split(" ").forEach(function(className) {
      if (registered[className] !== void 0) {
        registeredStyles.push(registered[className] + ";");
      } else {
        rawClassName += className + " ";
      }
    });
    return rawClassName;
  }
  var registerStyles = function registerStyles2(cache, serialized, isStringTag) {
    var className = cache.key + "-" + serialized.name;
    if ((isStringTag === false || isBrowser === false) && cache.registered[className] === void 0) {
      cache.registered[className] = serialized.styles;
    }
  };
  var insertStyles = function insertStyles2(cache, serialized, isStringTag) {
    registerStyles(cache, serialized, isStringTag);
    var className = cache.key + "-" + serialized.name;
    if (cache.inserted[serialized.name] === void 0) {
      var current = serialized;
      do {
        var maybeStyles = cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
        current = current.next;
      } while (current !== void 0);
    }
  };

  // node_modules/@emotion/hash/dist/hash.browser.esm.js
  function murmur2(str) {
    var h = 0;
    var k, i = 0, len = str.length;
    for (; len >= 4; ++i, len -= 4) {
      k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
      k = (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
      k ^= k >>> 24;
      h = (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h ^= (str.charCodeAt(i + 2) & 255) << 16;
      case 2:
        h ^= (str.charCodeAt(i + 1) & 255) << 8;
      case 1:
        h ^= str.charCodeAt(i) & 255;
        h = (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    h ^= h >>> 13;
    h = (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
  }
  var hash_browser_esm_default = murmur2;

  // node_modules/@emotion/unitless/dist/unitless.browser.esm.js
  var unitlessKeys = {
    animationIterationCount: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
  };
  var unitless_browser_esm_default = unitlessKeys;

  // node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js
  var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
  var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
  var hyphenateRegex = /[A-Z]|^ms/g;
  var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
  var isCustomProperty = function isCustomProperty2(property) {
    return property.charCodeAt(1) === 45;
  };
  var isProcessableValue = function isProcessableValue2(value) {
    return value != null && typeof value !== "boolean";
  };
  var processStyleName = /* @__PURE__ */ emotion_memoize_browser_esm_default(function(styleName) {
    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
  });
  var processStyleValue = function processStyleValue2(key, value) {
    switch (key) {
      case "animation":
      case "animationName": {
        if (typeof value === "string") {
          return value.replace(animationRegex, function(match2, p1, p2) {
            cursor = {
              name: p1,
              styles: p2,
              next: cursor
            };
            return p1;
          });
        }
      }
    }
    if (unitless_browser_esm_default[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
      return value + "px";
    }
    return value;
  };
  if (true) {
    contentValuePattern = /(attr|counters?|url|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
    contentValues = ["normal", "none", "initial", "inherit", "unset"];
    oldProcessStyleValue = processStyleValue;
    msPattern = /^-ms-/;
    hyphenPattern = /-(.)/g;
    hyphenatedCache = {};
    processStyleValue = function processStyleValue3(key, value) {
      if (key === "content") {
        if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
          throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
        }
      }
      var processed = oldProcessStyleValue(key, value);
      if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
        hyphenatedCache[key] = true;
        console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
          return _char.toUpperCase();
        }) + "?");
      }
      return processed;
    };
  }
  var contentValuePattern;
  var contentValues;
  var oldProcessStyleValue;
  var msPattern;
  var hyphenPattern;
  var hyphenatedCache;
  function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
      return "";
    }
    if (interpolation.__emotion_styles !== void 0) {
      if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
        throw new Error("Component selectors can only be used in conjunction with @emotion/babel-plugin.");
      }
      return interpolation;
    }
    switch (typeof interpolation) {
      case "boolean": {
        return "";
      }
      case "object": {
        if (interpolation.anim === 1) {
          cursor = {
            name: interpolation.name,
            styles: interpolation.styles,
            next: cursor
          };
          return interpolation.name;
        }
        if (interpolation.styles !== void 0) {
          var next2 = interpolation.next;
          if (next2 !== void 0) {
            while (next2 !== void 0) {
              cursor = {
                name: next2.name,
                styles: next2.styles,
                next: cursor
              };
              next2 = next2.next;
            }
          }
          var styles2 = interpolation.styles + ";";
          if (interpolation.map !== void 0) {
            styles2 += interpolation.map;
          }
          return styles2;
        }
        return createStringFromObject(mergedProps, registered, interpolation);
      }
      case "function": {
        if (mergedProps !== void 0) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        } else if (true) {
          console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
        }
        break;
      }
      case "string":
        if (true) {
          var matched = [];
          var replaced = interpolation.replace(animationRegex, function(match2, p1, p2) {
            var fakeVarName = "animation" + matched.length;
            matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
            return "${" + fakeVarName + "}";
          });
          if (matched.length) {
            console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
          }
        }
        break;
    }
    if (registered == null) {
      return interpolation;
    }
    var cached = registered[interpolation];
    return cached !== void 0 ? cached : interpolation;
  }
  function createStringFromObject(mergedProps, registered, obj) {
    var string2 = "";
    if (Array.isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        string2 += handleInterpolation(mergedProps, registered, obj[i]) + ";";
      }
    } else {
      for (var _key in obj) {
        var value = obj[_key];
        if (typeof value !== "object") {
          if (registered != null && registered[value] !== void 0) {
            string2 += _key + "{" + registered[value] + "}";
          } else if (isProcessableValue(value)) {
            string2 += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
          }
        } else {
          if (_key === "NO_COMPONENT_SELECTOR" && true) {
            throw new Error("Component selectors can only be used in conjunction with @emotion/babel-plugin.");
          }
          if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
            for (var _i = 0; _i < value.length; _i++) {
              if (isProcessableValue(value[_i])) {
                string2 += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
              }
            }
          } else {
            var interpolated = handleInterpolation(mergedProps, registered, value);
            switch (_key) {
              case "animation":
              case "animationName": {
                string2 += processStyleName(_key) + ":" + interpolated + ";";
                break;
              }
              default: {
                if (_key === "undefined") {
                  console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                }
                string2 += _key + "{" + interpolated + "}";
              }
            }
          }
        }
      }
    }
    return string2;
  }
  var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
  var sourceMapPattern;
  if (true) {
    sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
  }
  var cursor;
  var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
    if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
      return args[0];
    }
    var stringMode = true;
    var styles2 = "";
    cursor = void 0;
    var strings = args[0];
    if (strings == null || strings.raw === void 0) {
      stringMode = false;
      styles2 += handleInterpolation(mergedProps, registered, strings);
    } else {
      if (strings[0] === void 0) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
      }
      styles2 += strings[0];
    }
    for (var i = 1; i < args.length; i++) {
      styles2 += handleInterpolation(mergedProps, registered, args[i]);
      if (stringMode) {
        if (strings[i] === void 0) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
        }
        styles2 += strings[i];
      }
    }
    var sourceMap;
    if (true) {
      styles2 = styles2.replace(sourceMapPattern, function(match3) {
        sourceMap = match3;
        return "";
      });
    }
    labelPattern.lastIndex = 0;
    var identifierName = "";
    var match2;
    while ((match2 = labelPattern.exec(styles2)) !== null) {
      identifierName += "-" + match2[1];
    }
    var name = hash_browser_esm_default(styles2) + identifierName;
    if (true) {
      return {
        name,
        styles: styles2,
        map: sourceMap,
        next: cursor,
        toString: function toString() {
          return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
        }
      };
    }
    return {
      name,
      styles: styles2,
      next: cursor
    };
  };

  // node_modules/@emotion/react/dist/emotion-element-cbed451f.browser.esm.js
  var hasOwnProperty = {}.hasOwnProperty;
  var EmotionCacheContext = /* @__PURE__ */ (0, import_react.createContext)(typeof HTMLElement !== "undefined" ? /* @__PURE__ */ emotion_cache_browser_esm_default({
    key: "css"
  }) : null);
  if (true) {
    EmotionCacheContext.displayName = "EmotionCacheContext";
  }
  var CacheProvider = EmotionCacheContext.Provider;
  var withEmotionCache = function withEmotionCache2(func2) {
    return /* @__PURE__ */ (0, import_react.forwardRef)(function(props, ref) {
      var cache = (0, import_react.useContext)(EmotionCacheContext);
      return func2(props, cache, ref);
    });
  };
  var ThemeContext = /* @__PURE__ */ (0, import_react.createContext)({});
  if (true) {
    ThemeContext.displayName = "EmotionThemeContext";
  }
  var getTheme = function getTheme2(outerTheme, theme3) {
    if (typeof theme3 === "function") {
      var mergedTheme = theme3(outerTheme);
      if (mergedTheme == null || typeof mergedTheme !== "object" || Array.isArray(mergedTheme)) {
        throw new Error("[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!");
      }
      return mergedTheme;
    }
    if (theme3 == null || typeof theme3 !== "object" || Array.isArray(theme3)) {
      throw new Error("[ThemeProvider] Please make your theme prop a plain object");
    }
    return _extends({}, outerTheme, theme3);
  };
  var createCacheWithTheme = /* @__PURE__ */ weak_memoize_browser_esm_default(function(outerTheme) {
    return weak_memoize_browser_esm_default(function(theme3) {
      return getTheme(outerTheme, theme3);
    });
  });
  var ThemeProvider = function ThemeProvider2(props) {
    var theme3 = (0, import_react.useContext)(ThemeContext);
    if (props.theme !== theme3) {
      theme3 = createCacheWithTheme(theme3)(props.theme);
    }
    return /* @__PURE__ */ (0, import_react.createElement)(ThemeContext.Provider, {
      value: theme3
    }, props.children);
  };
  var useInsertionEffect2 = React["useInsertionEffect"] ? React["useInsertionEffect"] : function useInsertionEffect3(create) {
    create();
  };
  function useInsertionEffectMaybe(create) {
    useInsertionEffect2(create);
  }
  var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
  var labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
  var Insertion = function Insertion2(_ref2) {
    var cache = _ref2.cache, serialized = _ref2.serialized, isStringTag = _ref2.isStringTag;
    registerStyles(cache, serialized, isStringTag);
    var rules = useInsertionEffectMaybe(function() {
      return insertStyles(cache, serialized, isStringTag);
    });
    return null;
  };
  var Emotion = /* @__PURE__ */ withEmotionCache(function(props, cache, ref) {
    var cssProp = props.css;
    if (typeof cssProp === "string" && cache.registered[cssProp] !== void 0) {
      cssProp = cache.registered[cssProp];
    }
    var WrappedComponent = props[typePropName];
    var registeredStyles = [cssProp];
    var className = "";
    if (typeof props.className === "string") {
      className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
    } else if (props.className != null) {
      className = props.className + " ";
    }
    var serialized = serializeStyles(registeredStyles, void 0, (0, import_react.useContext)(ThemeContext));
    if (serialized.name.indexOf("-") === -1) {
      var labelFromStack = props[labelPropName];
      if (labelFromStack) {
        serialized = serializeStyles([serialized, "label:" + labelFromStack + ";"]);
      }
    }
    className += cache.key + "-" + serialized.name;
    var newProps = {};
    for (var key in props) {
      if (hasOwnProperty.call(props, key) && key !== "css" && key !== typePropName && key !== labelPropName) {
        newProps[key] = props[key];
      }
    }
    newProps.ref = ref;
    newProps.className = className;
    return /* @__PURE__ */ (0, import_react.createElement)(import_react.Fragment, null, /* @__PURE__ */ (0, import_react.createElement)(Insertion, {
      cache,
      serialized,
      isStringTag: typeof WrappedComponent === "string"
    }), /* @__PURE__ */ (0, import_react.createElement)(WrappedComponent, newProps));
  });
  if (true) {
    Emotion.displayName = "EmotionCssPropInternal";
  }

  // node_modules/@emotion/react/dist/emotion-react.browser.esm.js
  var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
  var pkg = {
    name: "@emotion/react",
    version: "11.8.2",
    main: "dist/emotion-react.cjs.js",
    module: "dist/emotion-react.esm.js",
    browser: {
      "./dist/emotion-react.cjs.js": "./dist/emotion-react.browser.cjs.js",
      "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
    },
    types: "types/index.d.ts",
    files: [
      "src",
      "dist",
      "jsx-runtime",
      "jsx-dev-runtime",
      "_isolated-hnrs",
      "types/*.d.ts",
      "macro.js",
      "macro.d.ts",
      "macro.js.flow"
    ],
    sideEffects: false,
    author: "Emotion Contributors",
    license: "MIT",
    scripts: {
      "test:typescript": "dtslint types"
    },
    dependencies: {
      "@babel/runtime": "^7.13.10",
      "@emotion/babel-plugin": "^11.7.1",
      "@emotion/cache": "^11.7.1",
      "@emotion/serialize": "^1.0.2",
      "@emotion/utils": "^1.1.0",
      "@emotion/weak-memoize": "^0.2.5",
      "hoist-non-react-statics": "^3.3.1"
    },
    peerDependencies: {
      "@babel/core": "^7.0.0",
      react: ">=16.8.0"
    },
    peerDependenciesMeta: {
      "@babel/core": {
        optional: true
      },
      "@types/react": {
        optional: true
      }
    },
    devDependencies: {
      "@babel/core": "^7.13.10",
      "@emotion/css": "11.7.1",
      "@emotion/css-prettifier": "1.0.1",
      "@emotion/server": "11.4.0",
      "@emotion/styled": "11.8.1",
      "@types/react": "^16.9.11",
      dtslint: "^4.2.1",
      "html-tag-names": "^1.1.2",
      react: "16.14.0",
      "svg-tag-names": "^1.1.1",
      typescript: "^4.5.5"
    },
    repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
    publishConfig: {
      access: "public"
    },
    "umd:main": "dist/emotion-react.umd.min.js",
    preconstruct: {
      entrypoints: [
        "./index.js",
        "./jsx-runtime.js",
        "./jsx-dev-runtime.js",
        "./_isolated-hnrs.js"
      ],
      umdName: "emotionReact"
    }
  };
  var useInsertionEffect5 = React2["useInsertionEffect"] ? React2["useInsertionEffect"] : import_react2.useLayoutEffect;
  var warnedAboutCssPropForGlobal = false;
  var Global = /* @__PURE__ */ withEmotionCache(function(props, cache) {
    if (!warnedAboutCssPropForGlobal && (props.className || props.css)) {
      console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
      warnedAboutCssPropForGlobal = true;
    }
    var styles2 = props.styles;
    var serialized = serializeStyles([styles2], void 0, (0, import_react2.useContext)(ThemeContext));
    var sheetRef = (0, import_react2.useRef)();
    useInsertionEffect5(function() {
      var key = cache.key + "-global";
      var sheet = new cache.sheet.constructor({
        key,
        nonce: cache.sheet.nonce,
        container: cache.sheet.container,
        speedy: cache.sheet.isSpeedy
      });
      var rehydrating = false;
      var node3 = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
      if (cache.sheet.tags.length) {
        sheet.before = cache.sheet.tags[0];
      }
      if (node3 !== null) {
        rehydrating = true;
        node3.setAttribute("data-emotion", key);
        sheet.hydrate([node3]);
      }
      sheetRef.current = [sheet, rehydrating];
      return function() {
        sheet.flush();
      };
    }, [cache]);
    useInsertionEffect5(function() {
      var sheetRefCurrent = sheetRef.current;
      var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
      if (rehydrating) {
        sheetRefCurrent[1] = false;
        return;
      }
      if (serialized.next !== void 0) {
        insertStyles(cache, serialized.next, true);
      }
      if (sheet.tags.length) {
        var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
        sheet.before = element;
        sheet.flush();
      }
      cache.insert("", serialized, sheet, false);
    }, [cache, serialized.name]);
    return null;
  });
  if (true) {
    Global.displayName = "EmotionGlobal";
  }
  function css() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return serializeStyles(args);
  }
  var keyframes = function keyframes2() {
    var insertable = css.apply(void 0, arguments);
    var name = "animation-" + insertable.name;
    return {
      name,
      styles: "@keyframes " + name + "{" + insertable.styles + "}",
      anim: 1,
      toString: function toString() {
        return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
      }
    };
  };
  var classnames = function classnames2(args) {
    var len = args.length;
    var i = 0;
    var cls = "";
    for (; i < len; i++) {
      var arg = args[i];
      if (arg == null)
        continue;
      var toAdd = void 0;
      switch (typeof arg) {
        case "boolean":
          break;
        case "object": {
          if (Array.isArray(arg)) {
            toAdd = classnames2(arg);
          } else {
            if (arg.styles !== void 0 && arg.name !== void 0) {
              console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
            }
            toAdd = "";
            for (var k in arg) {
              if (arg[k] && k) {
                toAdd && (toAdd += " ");
                toAdd += k;
              }
            }
          }
          break;
        }
        default: {
          toAdd = arg;
        }
      }
      if (toAdd) {
        cls && (cls += " ");
        cls += toAdd;
      }
    }
    return cls;
  };
  function merge(registered, css4, className) {
    var registeredStyles = [];
    var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) {
      return className;
    }
    return rawClassName + css4(registeredStyles);
  }
  var Insertion3 = function Insertion4(_ref2) {
    var cache = _ref2.cache, serializedArr = _ref2.serializedArr;
    var rules = useInsertionEffectMaybe(function() {
      for (var i = 0; i < serializedArr.length; i++) {
        var res = insertStyles(cache, serializedArr[i], false);
      }
    });
    return null;
  };
  var ClassNames = /* @__PURE__ */ withEmotionCache(function(props, cache) {
    var hasRendered = false;
    var serializedArr = [];
    var css4 = function css5() {
      if (hasRendered && true) {
        throw new Error("css can only be used during render");
      }
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var serialized = serializeStyles(args, cache.registered);
      serializedArr.push(serialized);
      registerStyles(cache, serialized, false);
      return cache.key + "-" + serialized.name;
    };
    var cx3 = function cx4() {
      if (hasRendered && true) {
        throw new Error("cx can only be used during render");
      }
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return merge(cache.registered, css4, classnames(args));
    };
    var content = {
      css: css4,
      cx: cx3,
      theme: (0, import_react2.useContext)(ThemeContext)
    };
    var ele = props.children(content);
    hasRendered = true;
    return /* @__PURE__ */ (0, import_react2.createElement)(import_react2.Fragment, null, /* @__PURE__ */ (0, import_react2.createElement)(Insertion3, {
      cache,
      serializedArr
    }), ele);
  });
  if (true) {
    ClassNames.displayName = "EmotionClassNames";
  }
  if (true) {
    isBrowser4 = true;
    isJest = typeof jest !== "undefined";
    if (isBrowser4 && !isJest) {
      globalContext = typeof globalThis !== "undefined" ? globalThis : isBrowser4 ? window : global;
      globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
      if (globalContext[globalKey]) {
        console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
      }
      globalContext[globalKey] = true;
    }
  }
  var isBrowser4;
  var isJest;
  var globalContext;
  var globalKey;

  // node_modules/@chakra-ui/css-reset/dist/chakra-ui-css-reset.esm.js
  var React3 = __toESM(require_react());
  var CSSReset = function CSSReset2() {
    return /* @__PURE__ */ React3.createElement(Global, {
      styles: `
      html {
        line-height: 1.5;
        -webkit-text-size-adjust: 100%;
        font-family: system-ui, sans-serif;
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;
        -moz-osx-font-smoothing: grayscale;
        touch-action: manipulation;
      }

      body {
        position: relative;
        min-height: 100%;
        font-feature-settings: 'kern';
      }

      *,
      *::before,
      *::after {
        border-width: 0;
        border-style: solid;
        box-sizing: border-box;
      }

      main {
        display: block;
      }

      hr {
        border-top-width: 1px;
        box-sizing: content-box;
        height: 0;
        overflow: visible;
      }

      pre,
      code,
      kbd,
      samp {
        font-family: SFMono-Regular,  Menlo, Monaco, Consolas, monospace;
        font-size: 1em;
      }

      a {
        background-color: transparent;
        color: inherit;
        text-decoration: inherit;
      }

      abbr[title] {
        border-bottom: none;
        text-decoration: underline;
        -webkit-text-decoration: underline dotted;
        text-decoration: underline dotted;
      }

      b,
      strong {
        font-weight: bold;
      }

      small {
        font-size: 80%;
      }

      sub,
      sup {
        font-size: 75%;
        line-height: 0;
        position: relative;
        vertical-align: baseline;
      }

      sub {
        bottom: -0.25em;
      }

      sup {
        top: -0.5em;
      }

      img {
        border-style: none;
      }

      button,
      input,
      optgroup,
      select,
      textarea {
        font-family: inherit;
        font-size: 100%;
        line-height: 1.15;
        margin: 0;
      }

      button,
      input {
        overflow: visible;
      }

      button,
      select {
        text-transform: none;
      }

      button::-moz-focus-inner,
      [type="button"]::-moz-focus-inner,
      [type="reset"]::-moz-focus-inner,
      [type="submit"]::-moz-focus-inner {
        border-style: none;
        padding: 0;
      }

      fieldset {
        padding: 0.35em 0.75em 0.625em;
      }

      legend {
        box-sizing: border-box;
        color: inherit;
        display: table;
        max-width: 100%;
        padding: 0;
        white-space: normal;
      }

      progress {
        vertical-align: baseline;
      }

      textarea {
        overflow: auto;
      }

      [type="checkbox"],
      [type="radio"] {
        box-sizing: border-box;
        padding: 0;
      }

      [type="number"]::-webkit-inner-spin-button,
      [type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none !important;
      }

      input[type="number"] {
        -moz-appearance: textfield;
      }

      [type="search"] {
        -webkit-appearance: textfield;
        outline-offset: -2px;
      }

      [type="search"]::-webkit-search-decoration {
        -webkit-appearance: none !important;
      }

      ::-webkit-file-upload-button {
        -webkit-appearance: button;
        font: inherit;
      }

      details {
        display: block;
      }

      summary {
        display: list-item;
      }

      template {
        display: none;
      }

      [hidden] {
        display: none !important;
      }

      body,
      blockquote,
      dl,
      dd,
      h1,
      h2,
      h3,
      h4,
      h5,
      h6,
      hr,
      figure,
      p,
      pre {
        margin: 0;
      }

      button {
        background: transparent;
        padding: 0;
      }

      fieldset {
        margin: 0;
        padding: 0;
      }

      ol,
      ul {
        margin: 0;
        padding: 0;
      }

      textarea {
        resize: vertical;
      }

      button,
      [role="button"] {
        cursor: pointer;
      }

      button::-moz-focus-inner {
        border: 0 !important;
      }

      table {
        border-collapse: collapse;
      }

      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        font-size: inherit;
        font-weight: inherit;
      }

      button,
      input,
      optgroup,
      select,
      textarea {
        padding: 0;
        line-height: inherit;
        color: inherit;
      }

      img,
      svg,
      video,
      canvas,
      audio,
      iframe,
      embed,
      object {
        display: block;
      }

      img,
      video {
        max-width: 100%;
        height: auto;
      }

      [data-js-focus-visible] :focus:not([data-focus-visible-added]) {
        outline: none;
        box-shadow: none;
      }

      select::-ms-expand {
        display: none;
      }
    `
    });
  };
  var CSSReset$1 = CSSReset;

  // node_modules/@chakra-ui/utils/dist/chakra-ui-utils.esm.js
  var import_lodash = __toESM(require_lodash());

  // node_modules/framesync/dist/es/on-next-frame.js
  var defaultTimestep = 1 / 60 * 1e3;

  // node_modules/@chakra-ui/utils/dist/chakra-ui-utils.esm.js
  function getLastItem(array) {
    var length2 = array == null ? 0 : array.length;
    return length2 ? array[length2 - 1] : void 0;
  }
  function isNumber(value) {
    return typeof value === "number";
  }
  function isArray(value) {
    return Array.isArray(value);
  }
  function isFunction(value) {
    return typeof value === "function";
  }
  function isObject(value) {
    var type = typeof value;
    return value != null && (type === "object" || type === "function") && !isArray(value);
  }
  function isEmptyObject(value) {
    return isObject(value) && Object.keys(value).length === 0;
  }
  function isNull(value) {
    return value == null;
  }
  function isString(value) {
    return Object.prototype.toString.call(value) === "[object String]";
  }
  function isCssVar(value) {
    return /^var\(--.+\)$/.test(value);
  }
  var __DEV__ = true;
  function omit(object2, keys3) {
    var result = {};
    Object.keys(object2).forEach(function(key) {
      if (keys3.includes(key))
        return;
      result[key] = object2[key];
    });
    return result;
  }
  function pick(object2, keys3) {
    var result = {};
    keys3.forEach(function(key) {
      if (key in object2) {
        result[key] = object2[key];
      }
    });
    return result;
  }
  function get(obj, path, fallback, index) {
    var key = typeof path === "string" ? path.split(".") : [path];
    for (index = 0; index < key.length; index += 1) {
      if (!obj)
        break;
      obj = obj[key[index]];
    }
    return obj === void 0 ? fallback : obj;
  }
  var memoize2 = function memoize3(fn) {
    var cache = /* @__PURE__ */ new WeakMap();
    var memoizedFn = function memoizedFn2(obj, path, fallback, index) {
      if (typeof obj === "undefined") {
        return fn(obj, path, fallback);
      }
      if (!cache.has(obj)) {
        cache.set(obj, /* @__PURE__ */ new Map());
      }
      var map = cache.get(obj);
      if (map.has(path)) {
        return map.get(path);
      }
      var value = fn(obj, path, fallback, index);
      map.set(path, value);
      return value;
    };
    return memoizedFn;
  };
  var memoizedGet = memoize2(get);
  function objectFilter(object2, fn) {
    var result = {};
    Object.keys(object2).forEach(function(key) {
      var value = object2[key];
      var shouldPass = fn(value, key, object2);
      if (shouldPass) {
        result[key] = value;
      }
    });
    return result;
  }
  var filterUndefined = function filterUndefined2(object2) {
    return objectFilter(object2, function(val) {
      return val !== null && val !== void 0;
    });
  };
  var objectKeys = function objectKeys2(obj) {
    return Object.keys(obj);
  };
  var fromEntries = function fromEntries2(entries) {
    return entries.reduce(function(carry, _ref2) {
      var key = _ref2[0], value = _ref2[1];
      carry[key] = value;
      return carry;
    }, {});
  };
  function analyzeCSSValue(value) {
    var num = parseFloat(value.toString());
    var unit = value.toString().replace(String(num), "");
    return {
      unitless: !unit,
      value: num,
      unit
    };
  }
  function px(value) {
    if (value == null)
      return value;
    var _analyzeCSSValue = analyzeCSSValue(value), unitless = _analyzeCSSValue.unitless;
    return unitless || isNumber(value) ? value + "px" : value;
  }
  var sortByBreakpointValue = function sortByBreakpointValue2(a2, b2) {
    return parseInt(a2[1], 10) > parseInt(b2[1], 10) ? 1 : -1;
  };
  var sortBps = function sortBps2(breakpoints3) {
    return fromEntries(Object.entries(breakpoints3).sort(sortByBreakpointValue));
  };
  function normalize(breakpoints3) {
    var sorted = sortBps(breakpoints3);
    return Object.assign(Object.values(sorted), sorted);
  }
  function keys(breakpoints3) {
    var value = Object.keys(sortBps(breakpoints3));
    return new Set(value);
  }
  function subtract(value) {
    var _px;
    if (!value)
      return value;
    value = (_px = px(value)) != null ? _px : value;
    var factor = value.endsWith("px") ? -1 : -0.0635;
    return isNumber(value) ? "" + (value + factor) : value.replace(/([0-9]+\.?[0-9]*)/, function(m) {
      return "" + (parseFloat(m) + factor);
    });
  }
  function queryString(min, max) {
    var query = ["@media screen"];
    if (min)
      query.push("and", "(min-width: " + px(min) + ")");
    if (max)
      query.push("and", "(max-width: " + px(max) + ")");
    return query.join(" ");
  }
  function analyzeBreakpoints(breakpoints3) {
    var _breakpoints$base;
    if (!breakpoints3)
      return null;
    breakpoints3.base = (_breakpoints$base = breakpoints3.base) != null ? _breakpoints$base : "0px";
    var normalized = normalize(breakpoints3);
    var queries2 = Object.entries(breakpoints3).sort(sortByBreakpointValue).map(function(_ref2, index, entry) {
      var _entry;
      var breakpoint = _ref2[0], minW = _ref2[1];
      var _ref22 = (_entry = entry[index + 1]) != null ? _entry : [], maxW = _ref22[1];
      maxW = parseFloat(maxW) > 0 ? subtract(maxW) : void 0;
      return {
        breakpoint,
        minW,
        maxW,
        maxWQuery: queryString(null, maxW),
        minWQuery: queryString(minW),
        minMaxQuery: queryString(minW, maxW)
      };
    });
    var _keys = keys(breakpoints3);
    var _keysArr = Array.from(_keys.values());
    return {
      keys: _keys,
      normalized,
      isResponsive: function isResponsive(test2) {
        var keys3 = Object.keys(test2);
        return keys3.length > 0 && keys3.every(function(key) {
          return _keys.has(key);
        });
      },
      asObject: sortBps(breakpoints3),
      asArray: normalize(breakpoints3),
      details: queries2,
      media: [null].concat(normalized.map(function(minW) {
        return queryString(minW);
      }).slice(1)),
      toArrayValue: function toArrayValue(test2) {
        if (!isObject(test2)) {
          throw new Error("toArrayValue: value must be an object");
        }
        var result = _keysArr.map(function(bp) {
          var _test$bp;
          return (_test$bp = test2[bp]) != null ? _test$bp : null;
        });
        while (getLastItem(result) === null) {
          result.pop();
        }
        return result;
      },
      toObjectValue: function toObjectValue(test2) {
        if (!Array.isArray(test2)) {
          throw new Error("toObjectValue: value must be an array");
        }
        return test2.reduce(function(acc, value, index) {
          var key = _keysArr[index];
          if (key != null && value != null)
            acc[key] = value;
          return acc;
        }, {});
      }
    };
  }
  function isElement(el) {
    return el != null && typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
  }
  function isHTMLElement(el) {
    var _el$ownerDocument$def;
    if (!isElement(el)) {
      return false;
    }
    var win2 = (_el$ownerDocument$def = el.ownerDocument.defaultView) != null ? _el$ownerDocument$def : window;
    return el instanceof win2.HTMLElement;
  }
  function getOwnerDocument(node3) {
    var _node$ownerDocument;
    return isElement(node3) ? (_node$ownerDocument = node3.ownerDocument) != null ? _node$ownerDocument : document : document;
  }
  function canUseDOM() {
    return !!(typeof window !== "undefined" && window.document && window.document.createElement);
  }
  var isBrowser2 = canUseDOM();
  var dataAttr = function dataAttr2(condition) {
    return condition ? "" : void 0;
  };
  var cx = function cx2() {
    for (var _len = arguments.length, classNames2 = new Array(_len), _key = 0; _key < _len; _key++) {
      classNames2[_key] = arguments[_key];
    }
    return classNames2.filter(Boolean).join(" ");
  };
  var hasTabIndex = function hasTabIndex2(element) {
    return element.hasAttribute("tabindex");
  };
  function isDisabled(element) {
    return Boolean(element.getAttribute("disabled")) === true || Boolean(element.getAttribute("aria-disabled")) === true;
  }
  function isInputElement(element) {
    return isHTMLElement(element) && element.tagName.toLowerCase() === "input" && "select" in element;
  }
  function isActiveElement(element) {
    var doc2 = isHTMLElement(element) ? getOwnerDocument(element) : document;
    return doc2.activeElement === element;
  }
  function isHidden(element) {
    if (element.parentElement && isHidden(element.parentElement))
      return true;
    return element.hidden;
  }
  function isContentEditable(element) {
    var value = element.getAttribute("contenteditable");
    return value !== "false" && value != null;
  }
  function isFocusable(element) {
    if (!isHTMLElement(element) || isHidden(element) || isDisabled(element)) {
      return false;
    }
    var localName = element.localName;
    var focusableTags = ["input", "select", "textarea", "button"];
    if (focusableTags.indexOf(localName) >= 0)
      return true;
    var others2 = {
      a: function a2() {
        return element.hasAttribute("href");
      },
      audio: function audio() {
        return element.hasAttribute("controls");
      },
      video: function video() {
        return element.hasAttribute("controls");
      }
    };
    if (localName in others2) {
      return others2[localName]();
    }
    if (isContentEditable(element))
      return true;
    return hasTabIndex(element);
  }
  var focusableElList = ["input:not([disabled])", "select:not([disabled])", "textarea:not([disabled])", "embed", "iframe", "object", "a[href]", "area[href]", "button:not([disabled])", "[tabindex]", "audio[controls]", "video[controls]", "*[tabindex]:not([aria-disabled])", "*[contenteditable]"];
  var focusableElSelector = focusableElList.join();
  function getAllFocusable(container3) {
    var focusableEls = Array.from(container3.querySelectorAll(focusableElSelector));
    focusableEls.unshift(container3);
    return focusableEls.filter(isFocusable).filter(function(el) {
      return window.getComputedStyle(el).display !== "none";
    });
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  }
  function _createForOfIteratorHelperLoose(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (it)
      return (it = it.call(o)).next.bind(it);
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      return function() {
        if (i >= o.length)
          return {
            done: true
          };
        return {
          done: false,
          value: o[i++]
        };
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function runIfFn(valueOrFn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return isFunction(valueOrFn) ? valueOrFn.apply(void 0, args) : valueOrFn;
  }
  function callAllHandlers() {
    for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      fns[_key2] = arguments[_key2];
    }
    return function func2(event) {
      fns.some(function(fn) {
        fn == null ? void 0 : fn(event);
        return event == null ? void 0 : event.defaultPrevented;
      });
    };
  }
  function once(fn) {
    var result;
    return function func2() {
      if (fn) {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }
        result = fn.apply(this, args);
        fn = null;
      }
      return result;
    };
  }
  var noop = function noop2() {
  };
  var warn = once(function(options) {
    return function() {
      var condition = options.condition, message = options.message;
      if (condition && __DEV__) {
        console.warn(message);
      }
    };
  });
  var error = once(function(options) {
    return function() {
      var condition = options.condition, message = options.message;
      if (condition && __DEV__) {
        console.error(message);
      }
    };
  });
  var pipe = function pipe2() {
    for (var _len6 = arguments.length, fns = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
      fns[_key6] = arguments[_key6];
    }
    return function(v) {
      return fns.reduce(function(a2, b2) {
        return b2(a2);
      }, v);
    };
  };
  function focus(element, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, _options$isActive = _options.isActive, isActive = _options$isActive === void 0 ? isActiveElement : _options$isActive, nextTick = _options.nextTick, _options$preventScrol = _options.preventScroll, preventScroll = _options$preventScrol === void 0 ? true : _options$preventScrol, _options$selectTextIf = _options.selectTextIfInput, selectTextIfInput = _options$selectTextIf === void 0 ? true : _options$selectTextIf;
    if (!element || isActive(element))
      return -1;
    function triggerFocus() {
      if (!element) {
        warn({
          condition: true,
          message: "[chakra-ui]: can't call focus() on `null` or `undefined` element"
        });
        return;
      }
      if (supportsPreventScroll()) {
        element.focus({
          preventScroll
        });
      } else {
        element.focus();
        if (preventScroll) {
          var scrollableElements = getScrollableElements(element);
          restoreScrollPosition(scrollableElements);
        }
      }
      if (isInputElement(element) && selectTextIfInput) {
        element.select();
      }
    }
    if (nextTick) {
      return requestAnimationFrame(triggerFocus);
    }
    triggerFocus();
    return -1;
  }
  var supportsPreventScrollCached = null;
  function supportsPreventScroll() {
    if (supportsPreventScrollCached == null) {
      supportsPreventScrollCached = false;
      try {
        var div = document.createElement("div");
        div.focus({
          get preventScroll() {
            supportsPreventScrollCached = true;
            return true;
          }
        });
      } catch (e) {
      }
    }
    return supportsPreventScrollCached;
  }
  function getScrollableElements(element) {
    var _doc$defaultView;
    var doc2 = getOwnerDocument(element);
    var win2 = (_doc$defaultView = doc2.defaultView) != null ? _doc$defaultView : window;
    var parent = element.parentNode;
    var scrollableElements = [];
    var rootScrollingElement = doc2.scrollingElement || doc2.documentElement;
    while (parent instanceof win2.HTMLElement && parent !== rootScrollingElement) {
      if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) {
        scrollableElements.push({
          element: parent,
          scrollTop: parent.scrollTop,
          scrollLeft: parent.scrollLeft
        });
      }
      parent = parent.parentNode;
    }
    if (rootScrollingElement instanceof win2.HTMLElement) {
      scrollableElements.push({
        element: rootScrollingElement,
        scrollTop: rootScrollingElement.scrollTop,
        scrollLeft: rootScrollingElement.scrollLeft
      });
    }
    return scrollableElements;
  }
  function restoreScrollPosition(scrollableElements) {
    for (var _iterator = _createForOfIteratorHelperLoose(scrollableElements), _step; !(_step = _iterator()).done; ) {
      var _step$value = _step.value, element = _step$value.element, scrollTop = _step$value.scrollTop, scrollLeft = _step$value.scrollLeft;
      element.scrollTop = scrollTop;
      element.scrollLeft = scrollLeft;
    }
  }
  function flatten(target, maxDepth2) {
    if (maxDepth2 === void 0) {
      maxDepth2 = Infinity;
    }
    if (!isObject(target) && !Array.isArray(target) || !maxDepth2) {
      return target;
    }
    return Object.entries(target).reduce(function(result, _ref2) {
      var key = _ref2[0], value = _ref2[1];
      if (isObject(value) || isArray(value)) {
        Object.entries(flatten(value, maxDepth2 - 1)).forEach(function(_ref22) {
          var childKey = _ref22[0], childValue = _ref22[1];
          result[key + "." + childKey] = childValue;
        });
      } else {
        result[key] = value;
      }
      return result;
    }, {});
  }
  var minSafeInteger = Number.MIN_SAFE_INTEGER || -9007199254740991;
  var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991;
  var breakpoints = Object.freeze(["base", "sm", "md", "lg", "xl", "2xl"]);
  function mapResponsive(prop2, mapper) {
    if (isArray(prop2)) {
      return prop2.map(function(item) {
        if (item === null) {
          return null;
        }
        return mapper(item);
      });
    }
    if (isObject(prop2)) {
      return objectKeys(prop2).reduce(function(result, key) {
        result[key] = mapper(prop2[key]);
        return result;
      }, {});
    }
    if (prop2 != null) {
      return mapper(prop2);
    }
    return null;
  }

  // node_modules/@chakra-ui/react-utils/dist/chakra-ui-react-utils.esm.js
  var React4 = __toESM(require_react());
  function assignRef(ref, value) {
    if (ref == null)
      return;
    if (isFunction(ref)) {
      ref(value);
      return;
    }
    try {
      ref.current = value;
    } catch (error2) {
      throw new Error("Cannot assign value '" + value + "' to ref '" + ref + "'");
    }
  }
  function mergeRefs() {
    for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
      refs[_key] = arguments[_key];
    }
    return function(node3) {
      refs.forEach(function(ref) {
        return assignRef(ref, node3);
      });
    };
  }
  function createContext3(options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, _options$strict = _options.strict, strict = _options$strict === void 0 ? true : _options$strict, _options$errorMessage = _options.errorMessage, errorMessage = _options$errorMessage === void 0 ? "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider" : _options$errorMessage, name = _options.name;
    var Context = /* @__PURE__ */ React4.createContext(void 0);
    Context.displayName = name;
    function useContext22() {
      var context = React4.useContext(Context);
      if (!context && strict) {
        var error2 = new Error(errorMessage);
        error2.name = "ContextError";
        Error.captureStackTrace == null ? void 0 : Error.captureStackTrace(error2, useContext22);
        throw error2;
      }
      return context;
    }
    return [Context.Provider, useContext22, Context];
  }
  function getValidChildren(children) {
    return React4.Children.toArray(children).filter(function(child) {
      return /* @__PURE__ */ React4.isValidElement(child);
    });
  }

  // node_modules/@chakra-ui/portal/dist/chakra-ui-portal.esm.js
  var React7 = __toESM(require_react());

  // node_modules/@chakra-ui/hooks/dist/chakra-ui-hooks.esm.js
  var React6 = __toESM(require_react());
  var import_react5 = __toESM(require_react());

  // node_modules/@chakra-ui/hooks/dist/use-animation-state-35233362.esm.js
  var React5 = __toESM(require_react());
  var import_react4 = __toESM(require_react());
  var useSafeLayoutEffect = isBrowser2 ? React5.useLayoutEffect : React5.useEffect;
  function useCallbackRef(fn, deps) {
    if (deps === void 0) {
      deps = [];
    }
    var ref = React5.useRef(fn);
    useSafeLayoutEffect(function() {
      ref.current = fn;
    });
    return React5.useCallback(function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return ref.current == null ? void 0 : ref.current.apply(ref, args);
    }, deps);
  }

  // node_modules/@chakra-ui/hooks/dist/chakra-ui-hooks.esm.js
  var import_copy_to_clipboard = __toESM(require_copy_to_clipboard());
  function useControllableProp(prop2, state2) {
    var isControlled = prop2 !== void 0;
    var value = isControlled && typeof prop2 !== "undefined" ? prop2 : state2;
    return [isControlled, value];
  }
  function _extends2() {
    _extends2 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  var defaultIdContext = {
    current: 1
  };
  var IdContext = /* @__PURE__ */ React6.createContext(defaultIdContext);
  var IdProvider = /* @__PURE__ */ React6.memo(function(_ref2) {
    var children = _ref2.children;
    return /* @__PURE__ */ React6.createElement(IdContext.Provider, {
      value: {
        current: 1
      }
    }, children);
  });
  var genId = function genId2(context) {
    return context.current++;
  };
  function useId(idProp, prefix2) {
    var context = React6.useContext(IdContext);
    var _React$useState = React6.useState(context.current), id2 = _React$useState[0], setId = _React$useState[1];
    React6.useEffect(function() {
      setId(genId(context));
    }, [context]);
    return React6.useMemo(function() {
      return idProp || [prefix2, id2].filter(Boolean).join("-");
    }, [idProp, prefix2, id2]);
  }
  function useIds(idProp) {
    for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      prefixes[_key - 1] = arguments[_key];
    }
    var id2 = useId(idProp);
    return React6.useMemo(function() {
      return prefixes.map(function(prefix2) {
        return prefix2 + "-" + id2;
      });
    }, [id2, prefixes]);
  }
  function useDisclosure(props) {
    if (props === void 0) {
      props = {};
    }
    var _props = props, onCloseProp = _props.onClose, onOpenProp = _props.onOpen, isOpenProp = _props.isOpen, idProp = _props.id;
    var onOpenPropCallbackRef = useCallbackRef(onOpenProp);
    var onClosePropCallbackRef = useCallbackRef(onCloseProp);
    var _React$useState = React6.useState(props.defaultIsOpen || false), isOpenState = _React$useState[0], setIsOpen = _React$useState[1];
    var _useControllableProp = useControllableProp(isOpenProp, isOpenState), isControlled = _useControllableProp[0], isOpen = _useControllableProp[1];
    var id2 = useId(idProp, "disclosure");
    var onClose = React6.useCallback(function() {
      if (!isControlled) {
        setIsOpen(false);
      }
      onClosePropCallbackRef == null ? void 0 : onClosePropCallbackRef();
    }, [isControlled, onClosePropCallbackRef]);
    var onOpen = React6.useCallback(function() {
      if (!isControlled) {
        setIsOpen(true);
      }
      onOpenPropCallbackRef == null ? void 0 : onOpenPropCallbackRef();
    }, [isControlled, onOpenPropCallbackRef]);
    var onToggle = React6.useCallback(function() {
      var action = isOpen ? onClose : onOpen;
      action();
    }, [isOpen, onOpen, onClose]);
    return {
      isOpen: !!isOpen,
      onOpen,
      onClose,
      onToggle,
      isControlled,
      getButtonProps: function getButtonProps(props2) {
        if (props2 === void 0) {
          props2 = {};
        }
        return _extends2({}, props2, {
          "aria-expanded": "true",
          "aria-controls": id2,
          onClick: callAllHandlers(props2.onClick, onToggle)
        });
      },
      getDisclosureProps: function getDisclosureProps(props2) {
        if (props2 === void 0) {
          props2 = {};
        }
        return _extends2({}, props2, {
          hidden: !isOpen,
          id: id2
        });
      }
    };
  }
  var useUpdateEffect = function useUpdateEffect2(effect2, deps) {
    var mounted = React6.useRef(false);
    React6.useEffect(function() {
      if (mounted.current) {
        return effect2();
      }
      mounted.current = true;
      return void 0;
    }, deps);
    return mounted.current;
  };
  function useUnmountEffect(fn, deps) {
    if (deps === void 0) {
      deps = [];
    }
    return React6.useEffect(function() {
      return function() {
        return fn();
      };
    }, deps);
  }
  function useForceUpdate() {
    var unloadingRef = React6.useRef(false);
    var _React$useState = React6.useState(0), count = _React$useState[0], setCount = _React$useState[1];
    useUnmountEffect(function() {
      unloadingRef.current = true;
    });
    return React6.useCallback(function() {
      if (!unloadingRef.current) {
        setCount(count + 1);
      }
    }, [count]);
  }
  function useLatestRef(value) {
    var ref = React6.useRef(null);
    ref.current = value;
    return ref;
  }
  function assignRef2(ref, value) {
    if (ref == null)
      return;
    if (typeof ref === "function") {
      ref(value);
      return;
    }
    try {
      ref.current = value;
    } catch (error2) {
      throw new Error("Cannot assign value '" + value + "' to ref '" + ref + "'");
    }
  }
  function useMergeRefs() {
    for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
      refs[_key] = arguments[_key];
    }
    return React6.useMemo(function() {
      if (refs.every(function(ref) {
        return ref == null;
      })) {
        return null;
      }
      return function(node3) {
        refs.forEach(function(ref) {
          if (ref)
            assignRef2(ref, node3);
        });
      };
    }, refs);
  }
  function useTimeout(callback, delay) {
    var fn = useCallbackRef(callback);
    React6.useEffect(function() {
      if (delay == null)
        return void 0;
      var timeoutId = null;
      timeoutId = window.setTimeout(function() {
        fn();
      }, delay);
      return function() {
        if (timeoutId) {
          window.clearTimeout(timeoutId);
        }
      };
    }, [delay, fn]);
  }

  // node_modules/@chakra-ui/portal/dist/chakra-ui-portal.esm.js
  var import_react_dom = __toESM(require_react_dom());
  var _createContext$1 = createContext3({
    strict: false,
    name: "PortalManagerContext"
  });
  var PortalManagerContextProvider = _createContext$1[0];
  var usePortalManager = _createContext$1[1];
  function PortalManager(props) {
    var children = props.children, zIndex = props.zIndex;
    return /* @__PURE__ */ React7.createElement(PortalManagerContextProvider, {
      value: {
        zIndex
      }
    }, children);
  }
  if (__DEV__) {
    PortalManager.displayName = "PortalManager";
  }
  function _extends3() {
    _extends3 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends3.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var _excluded = ["containerRef"];
  var _createContext = createContext3({
    strict: false,
    name: "PortalContext"
  });
  var PortalContextProvider = _createContext[0];
  var usePortalContext = _createContext[1];
  var PORTAL_CLASSNAME = "chakra-portal";
  var PORTAL_SELECTOR = ".chakra-portal";
  var Container = function Container2(props) {
    return /* @__PURE__ */ React7.createElement("div", {
      className: "chakra-portal-zIndex",
      style: {
        position: "absolute",
        zIndex: props.zIndex,
        top: 0,
        left: 0,
        right: 0
      }
    }, props.children);
  };
  var DefaultPortal = function DefaultPortal2(props) {
    var appendToParentPortal = props.appendToParentPortal, children = props.children;
    var tempNode = React7.useRef(null);
    var portal = React7.useRef(null);
    var forceUpdate = useForceUpdate();
    var parentPortal = usePortalContext();
    var manager2 = usePortalManager();
    useSafeLayoutEffect(function() {
      if (!tempNode.current)
        return;
      var doc2 = tempNode.current.ownerDocument;
      var host = appendToParentPortal ? parentPortal != null ? parentPortal : doc2.body : doc2.body;
      if (!host)
        return;
      portal.current = doc2.createElement("div");
      portal.current.className = PORTAL_CLASSNAME;
      host.appendChild(portal.current);
      forceUpdate();
      var portalNode = portal.current;
      return function() {
        if (host.contains(portalNode)) {
          host.removeChild(portalNode);
        }
      };
    }, []);
    var _children = manager2 != null && manager2.zIndex ? /* @__PURE__ */ React7.createElement(Container, {
      zIndex: manager2 == null ? void 0 : manager2.zIndex
    }, children) : children;
    return portal.current ? /* @__PURE__ */ (0, import_react_dom.createPortal)(/* @__PURE__ */ React7.createElement(PortalContextProvider, {
      value: portal.current
    }, _children), portal.current) : /* @__PURE__ */ React7.createElement("span", {
      ref: tempNode
    });
  };
  var ContainerPortal = function ContainerPortal2(props) {
    var children = props.children, containerRef = props.containerRef, appendToParentPortal = props.appendToParentPortal;
    var containerEl = containerRef.current;
    var host = containerEl != null ? containerEl : isBrowser2 ? document.body : void 0;
    var portal = React7.useMemo(function() {
      var node3 = containerEl == null ? void 0 : containerEl.ownerDocument.createElement("div");
      if (node3)
        node3.className = PORTAL_CLASSNAME;
      return node3;
    }, [containerEl]);
    var forceUpdate = useForceUpdate();
    useSafeLayoutEffect(function() {
      forceUpdate();
    }, []);
    useSafeLayoutEffect(function() {
      if (!portal || !host)
        return;
      host.appendChild(portal);
      return function() {
        host.removeChild(portal);
      };
    }, [portal, host]);
    if (host && portal) {
      return /* @__PURE__ */ (0, import_react_dom.createPortal)(/* @__PURE__ */ React7.createElement(PortalContextProvider, {
        value: appendToParentPortal ? portal : null
      }, children), portal);
    }
    return null;
  };
  function Portal(props) {
    var containerRef = props.containerRef, rest = _objectWithoutPropertiesLoose(props, _excluded);
    return containerRef ? /* @__PURE__ */ React7.createElement(ContainerPortal, _extends3({
      containerRef
    }, rest)) : /* @__PURE__ */ React7.createElement(DefaultPortal, rest);
  }
  Portal.defaultProps = {
    appendToParentPortal: true
  };
  Portal.className = PORTAL_CLASSNAME;
  Portal.selector = PORTAL_SELECTOR;
  if (__DEV__) {
    Portal.displayName = "Portal";
  }

  // node_modules/@chakra-ui/react-env/dist/chakra-ui-react-env.esm.js
  var import_react6 = __toESM(require_react());
  var doc = {
    body: {
      classList: {
        add: function add() {
        },
        remove: function remove() {
        }
      }
    },
    addEventListener: function addEventListener() {
    },
    removeEventListener: function removeEventListener() {
    },
    activeElement: {
      blur: function blur() {
      },
      nodeName: ""
    },
    querySelector: function querySelector() {
      return null;
    },
    querySelectorAll: function querySelectorAll() {
      return [];
    },
    getElementById: function getElementById() {
      return null;
    },
    createEvent: function createEvent() {
      return {
        initEvent: function initEvent() {
        }
      };
    },
    createElement: function createElement6() {
      return {
        children: [],
        childNodes: [],
        style: {},
        setAttribute: function setAttribute() {
        },
        getElementsByTagName: function getElementsByTagName() {
          return [];
        }
      };
    }
  };
  var ssrDocument = doc;
  var noop3 = function noop4() {
  };
  var win = {
    document: ssrDocument,
    navigator: {
      userAgent: ""
    },
    CustomEvent: function CustomEvent() {
      return this;
    },
    addEventListener: noop3,
    removeEventListener: noop3,
    getComputedStyle: function getComputedStyle2() {
      return {
        getPropertyValue: function getPropertyValue() {
          return "";
        }
      };
    },
    matchMedia: function matchMedia() {
      return {
        matches: false,
        addListener: noop3,
        removeListener: noop3
      };
    },
    requestAnimationFrame: function requestAnimationFrame2(callback) {
      if (typeof setTimeout === "undefined") {
        callback();
        return null;
      }
      return setTimeout(callback, 0);
    },
    cancelAnimationFrame: function cancelAnimationFrame2(id2) {
      if (typeof setTimeout === "undefined")
        return;
      clearTimeout(id2);
    },
    setTimeout: function setTimeout2() {
      return 0;
    },
    clearTimeout: noop3,
    setInterval: function setInterval() {
      return 0;
    },
    clearInterval: noop3
  };
  var ssrWindow = win;
  var mockEnv = {
    window: ssrWindow,
    document: ssrDocument
  };
  var defaultEnv = isBrowser2 ? {
    window,
    document
  } : mockEnv;
  var EnvironmentContext = /* @__PURE__ */ (0, import_react6.createContext)(defaultEnv);
  if (__DEV__) {
    EnvironmentContext.displayName = "EnvironmentContext";
  }
  function useEnvironment() {
    return (0, import_react6.useContext)(EnvironmentContext);
  }
  function EnvironmentProvider(props) {
    var children = props.children, environmentProp = props.environment;
    var _useState = (0, import_react6.useState)(null), node3 = _useState[0], setNode = _useState[1];
    var context = (0, import_react6.useMemo)(function() {
      var _ref2;
      var doc2 = node3 == null ? void 0 : node3.ownerDocument;
      var win2 = node3 == null ? void 0 : node3.ownerDocument.defaultView;
      var nodeEnv = doc2 ? {
        document: doc2,
        window: win2
      } : void 0;
      var env = (_ref2 = environmentProp != null ? environmentProp : nodeEnv) != null ? _ref2 : defaultEnv;
      return env;
    }, [node3, environmentProp]);
    var showEnvGetter = !node3 && !environmentProp;
    return /* @__PURE__ */ import_react6.default.createElement(EnvironmentContext.Provider, {
      value: context
    }, children, showEnvGetter && /* @__PURE__ */ import_react6.default.createElement("span", {
      ref: function ref(el) {
        if (el)
          setNode(el);
      }
    }));
  }
  if (__DEV__) {
    EnvironmentProvider.displayName = "EnvironmentProvider";
  }

  // node_modules/@chakra-ui/color-mode/dist/chakra-ui-color-mode.esm.js
  var React9 = __toESM(require_react());
  function _extends4() {
    _extends4 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends4.apply(this, arguments);
  }
  var classNames = {
    light: "chakra-ui-light",
    dark: "chakra-ui-dark"
  };
  var mockBody = {
    classList: {
      add: noop,
      remove: noop
    }
  };
  var getBody = function getBody2(document2) {
    return isBrowser2 ? document2.body : mockBody;
  };
  function syncBodyClassName(isDark3, document2) {
    var body = getBody(document2);
    body.classList.add(isDark3 ? classNames.dark : classNames.light);
    body.classList.remove(isDark3 ? classNames.light : classNames.dark);
  }
  function getMediaQuery(query) {
    var mediaQueryList = window.matchMedia == null ? void 0 : window.matchMedia(query);
    if (!mediaQueryList) {
      return void 0;
    }
    return !!mediaQueryList.media === mediaQueryList.matches;
  }
  var queries = {
    light: "(prefers-color-scheme: light)",
    dark: "(prefers-color-scheme: dark)"
  };
  function getColorScheme(fallback) {
    var _getMediaQuery;
    var isDark3 = (_getMediaQuery = getMediaQuery(queries.dark)) != null ? _getMediaQuery : fallback === "dark";
    return isDark3 ? "dark" : "light";
  }
  function addListener(fn) {
    if (!("matchMedia" in window)) {
      return noop;
    }
    var mediaQueryList = window.matchMedia(queries.dark);
    var listener = function listener2() {
      fn(mediaQueryList.matches ? "dark" : "light", true);
    };
    mediaQueryList.addEventListener("change", listener);
    return function() {
      mediaQueryList.removeEventListener("change", listener);
    };
  }
  var root = {
    get: function get2() {
      return document.documentElement.style.getPropertyValue("--chakra-ui-color-mode") || document.documentElement.dataset.theme;
    },
    set: function set(mode2) {
      if (isBrowser2) {
        document.documentElement.style.setProperty("--chakra-ui-color-mode", mode2);
        document.documentElement.setAttribute("data-theme", mode2);
      }
    }
  };
  var hasSupport = function hasSupport2() {
    return typeof Storage !== "undefined";
  };
  var storageKey = "chakra-ui-color-mode";
  var localStorageManager = {
    get: function get3(init) {
      if (!hasSupport())
        return init;
      try {
        var _value = localStorage.getItem(storageKey);
        return _value != null ? _value : init;
      } catch (error2) {
        if (__DEV__) {
          console.log(error2);
        }
        return init;
      }
    },
    set: function set2(value) {
      if (!hasSupport())
        return;
      try {
        localStorage.setItem(storageKey, value);
      } catch (error2) {
        if (__DEV__) {
          console.log(error2);
        }
      }
    },
    type: "localStorage"
  };
  var ColorModeContext = /* @__PURE__ */ React9.createContext({});
  if (__DEV__) {
    ColorModeContext.displayName = "ColorModeContext";
  }
  var useColorMode = function useColorMode2() {
    var context = React9.useContext(ColorModeContext);
    if (context === void 0) {
      throw new Error("useColorMode must be used within a ColorModeProvider");
    }
    return context;
  };
  function ColorModeProvider(props) {
    var value = props.value, children = props.children, _props$options = props.options, useSystemColorMode = _props$options.useSystemColorMode, initialColorMode = _props$options.initialColorMode, _props$colorModeManag = props.colorModeManager, colorModeManager = _props$colorModeManag === void 0 ? localStorageManager : _props$colorModeManag;
    var defaultColorMode = initialColorMode === "dark" ? "dark" : "light";
    var _React$useState = React9.useState(colorModeManager.type === "cookie" ? colorModeManager.get(defaultColorMode) : defaultColorMode), colorMode = _React$useState[0], rawSetColorMode = _React$useState[1];
    var _useEnvironment = useEnvironment(), document2 = _useEnvironment.document;
    React9.useEffect(function() {
      if (isBrowser2 && colorModeManager.type === "localStorage") {
        var systemColorWithFallback = getColorScheme(defaultColorMode);
        if (useSystemColorMode) {
          return rawSetColorMode(systemColorWithFallback);
        }
        var rootGet = root.get();
        var colorManagerGet = colorModeManager.get();
        if (rootGet) {
          return rawSetColorMode(rootGet);
        }
        if (colorManagerGet) {
          return rawSetColorMode(colorManagerGet);
        }
        if (initialColorMode === "system") {
          return rawSetColorMode(systemColorWithFallback);
        }
        return rawSetColorMode(defaultColorMode);
      }
    }, [colorModeManager, useSystemColorMode, defaultColorMode, initialColorMode]);
    React9.useEffect(function() {
      var isDark3 = colorMode === "dark";
      syncBodyClassName(isDark3, document2);
      root.set(isDark3 ? "dark" : "light");
    }, [colorMode, document2]);
    var setColorMode = React9.useCallback(function(value2, isListenerEvent) {
      if (isListenerEvent === void 0) {
        isListenerEvent = false;
      }
      if (!isListenerEvent) {
        colorModeManager.set(value2);
      } else if (colorModeManager.get() && !useSystemColorMode)
        return;
      rawSetColorMode(value2);
    }, [colorModeManager, useSystemColorMode]);
    var toggleColorMode = React9.useCallback(function() {
      setColorMode(colorMode === "light" ? "dark" : "light");
    }, [colorMode, setColorMode]);
    React9.useEffect(function() {
      var shouldUseSystemListener = useSystemColorMode || initialColorMode === "system";
      var removeListener;
      if (shouldUseSystemListener) {
        removeListener = addListener(setColorMode);
      }
      return function() {
        if (removeListener && shouldUseSystemListener) {
          removeListener();
        }
      };
    }, [setColorMode, useSystemColorMode, initialColorMode]);
    var context = React9.useMemo(function() {
      return {
        colorMode: value != null ? value : colorMode,
        toggleColorMode: value ? noop : toggleColorMode,
        setColorMode: value ? noop : setColorMode
      };
    }, [colorMode, setColorMode, toggleColorMode, value]);
    return /* @__PURE__ */ React9.createElement(ColorModeContext.Provider, {
      value: context
    }, children);
  }
  if (__DEV__) {
    ColorModeProvider.displayName = "ColorModeProvider";
  }
  var DarkMode = function DarkMode2(props) {
    var context = React9.useMemo(function() {
      return {
        colorMode: "dark",
        toggleColorMode: noop,
        setColorMode: noop
      };
    }, []);
    return /* @__PURE__ */ React9.createElement(ColorModeContext.Provider, _extends4({
      value: context
    }, props));
  };
  if (__DEV__) {
    DarkMode.displayName = "DarkMode";
  }
  var LightMode = function LightMode2(props) {
    var context = React9.useMemo(function() {
      return {
        colorMode: "light",
        toggleColorMode: noop,
        setColorMode: noop
      };
    }, []);
    return /* @__PURE__ */ React9.createElement(ColorModeContext.Provider, _extends4({
      value: context
    }, props));
  };
  if (__DEV__) {
    LightMode.displayName = "LightMode";
  }
  function setScript(initialValue) {
    var mql = window.matchMedia("(prefers-color-scheme: dark)");
    var systemPreference = mql.matches ? "dark" : "light";
    var persistedPreference = systemPreference;
    try {
      persistedPreference = localStorage.getItem("chakra-ui-color-mode");
    } catch (error2) {
      console.log("Chakra UI: localStorage is not available. Color mode persistence might not work as expected");
    }
    var colorMode;
    if (persistedPreference) {
      colorMode = persistedPreference;
    } else if (initialValue === "system") {
      colorMode = systemPreference;
    } else {
      colorMode = initialValue != null ? initialValue : systemPreference;
    }
    if (colorMode) {
      document.documentElement.style.setProperty("--chakra-ui-color-mode", colorMode);
      document.documentElement.setAttribute("data-theme", colorMode);
    }
  }
  var ColorModeScript = function ColorModeScript2(props) {
    var _props$initialColorMo = props.initialColorMode, initialColorMode = _props$initialColorMo === void 0 ? "light" : _props$initialColorMo;
    var validColorModeValues = ["dark", "light", "system"];
    if (!validColorModeValues.includes(initialColorMode)) {
      initialColorMode = "light";
    }
    var html = "(" + String(setScript) + ")('" + initialColorMode + "')";
    return /* @__PURE__ */ React9.createElement("script", {
      nonce: props.nonce,
      dangerouslySetInnerHTML: {
        __html: html
      }
    });
  };

  // node_modules/@chakra-ui/styled-system/dist/chakra-ui-styled-system.esm.js
  function _extends5() {
    _extends5 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends5.apply(this, arguments);
  }
  var tokenToCSSVar = function tokenToCSSVar2(scale2, value) {
    return function(theme3) {
      var valueStr = String(value);
      var key = scale2 ? scale2 + "." + valueStr : valueStr;
      return isObject(theme3.__cssMap) && key in theme3.__cssMap ? theme3.__cssMap[key].varRef : value;
    };
  };
  function createTransform(options) {
    var scale2 = options.scale, transform10 = options.transform, compose = options.compose;
    var fn = function fn2(value, theme3) {
      var _transform;
      var _value = tokenToCSSVar(scale2, value)(theme3);
      var result = (_transform = transform10 == null ? void 0 : transform10(_value, theme3)) != null ? _transform : _value;
      if (compose) {
        result = compose(result, theme3);
      }
      return result;
    };
    return fn;
  }
  function toConfig(scale2, transform10) {
    return function(property) {
      var result = {
        property,
        scale: scale2
      };
      result.transform = createTransform({
        scale: scale2,
        transform: transform10
      });
      return result;
    };
  }
  var getRtl = function getRtl2(_ref2) {
    var rtl = _ref2.rtl, ltr = _ref2.ltr;
    return function(theme3) {
      return theme3.direction === "rtl" ? rtl : ltr;
    };
  };
  function logical(options) {
    var property = options.property, scale2 = options.scale, transform10 = options.transform;
    return {
      scale: scale2,
      property: getRtl(property),
      transform: scale2 ? createTransform({
        scale: scale2,
        compose: transform10
      }) : transform10
    };
  }
  var _spaceXTemplate;
  var _spaceYTemplate;
  var transformTemplate = ["rotate(var(--chakra-rotate, 0))", "scaleX(var(--chakra-scale-x, 1))", "scaleY(var(--chakra-scale-y, 1))", "skewX(var(--chakra-skew-x, 0))", "skewY(var(--chakra-skew-y, 0))"];
  function getTransformTemplate() {
    return ["translateX(var(--chakra-translate-x, 0))", "translateY(var(--chakra-translate-y, 0))"].concat(transformTemplate).join(" ");
  }
  function getTransformGpuTemplate() {
    return ["translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)"].concat(transformTemplate).join(" ");
  }
  var filterTemplate = {
    "--chakra-blur": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-invert": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-sepia": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-drop-shadow": "var(--chakra-empty,/*!*/ /*!*/)",
    filter: ["var(--chakra-blur)", "var(--chakra-brightness)", "var(--chakra-contrast)", "var(--chakra-grayscale)", "var(--chakra-hue-rotate)", "var(--chakra-invert)", "var(--chakra-saturate)", "var(--chakra-sepia)", "var(--chakra-drop-shadow)"].join(" ")
  };
  var backdropFilterTemplate = {
    backdropFilter: ["var(--chakra-backdrop-blur)", "var(--chakra-backdrop-brightness)", "var(--chakra-backdrop-contrast)", "var(--chakra-backdrop-grayscale)", "var(--chakra-backdrop-hue-rotate)", "var(--chakra-backdrop-invert)", "var(--chakra-backdrop-opacity)", "var(--chakra-backdrop-saturate)", "var(--chakra-backdrop-sepia)"].join(" "),
    "--chakra-backdrop-blur": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-invert": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-opacity": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-sepia": "var(--chakra-empty,/*!*/ /*!*/)"
  };
  function getRingTemplate(value) {
    return {
      "--chakra-ring-offset-shadow": "var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset-width) var(--chakra-ring-offset-color)",
      "--chakra-ring-shadow": "var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset-width)) var(--chakra-ring-color)",
      "--chakra-ring-width": value,
      boxShadow: ["var(--chakra-ring-offset-shadow)", "var(--chakra-ring-shadow)", "var(--chakra-shadow, 0 0 #0000)"].join(", ")
    };
  }
  var flexDirectionTemplate = {
    "row-reverse": {
      space: "--chakra-space-x-reverse",
      divide: "--chakra-divide-x-reverse"
    },
    "column-reverse": {
      space: "--chakra-space-y-reverse",
      divide: "--chakra-divide-y-reverse"
    }
  };
  var owlSelector = "& > :not(style) ~ :not(style)";
  var spaceXTemplate = (_spaceXTemplate = {}, _spaceXTemplate[owlSelector] = {
    marginInlineStart: "calc(var(--chakra-space-x) * calc(1 - var(--chakra-space-x-reverse)))",
    marginInlineEnd: "calc(var(--chakra-space-x) * var(--chakra-space-x-reverse))"
  }, _spaceXTemplate);
  var spaceYTemplate = (_spaceYTemplate = {}, _spaceYTemplate[owlSelector] = {
    marginTop: "calc(var(--chakra-space-y) * calc(1 - var(--chakra-space-y-reverse)))",
    marginBottom: "calc(var(--chakra-space-y) * var(--chakra-space-y-reverse))"
  }, _spaceYTemplate);
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf4(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf(o, p);
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass)
      _setPrototypeOf(subClass, superClass);
  }
  function _wrapRegExp() {
    _wrapRegExp = function(re, groups) {
      return new BabelRegExp(re, void 0, groups);
    };
    var _super = RegExp.prototype;
    var _groups = /* @__PURE__ */ new WeakMap();
    function BabelRegExp(re, flags, groups) {
      var _this = new RegExp(re, flags);
      _groups.set(_this, groups || _groups.get(re));
      return _setPrototypeOf(_this, BabelRegExp.prototype);
    }
    _inherits(BabelRegExp, RegExp);
    BabelRegExp.prototype.exec = function(str) {
      var result = _super.exec.call(this, str);
      if (result)
        result.groups = buildGroups(result, this);
      return result;
    };
    BabelRegExp.prototype[Symbol.replace] = function(str, substitution) {
      if (typeof substitution === "string") {
        var groups = _groups.get(this);
        return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function(_, name) {
          return "$" + groups[name];
        }));
      } else if (typeof substitution === "function") {
        var _this = this;
        return _super[Symbol.replace].call(this, str, function() {
          var args = arguments;
          if (typeof args[args.length - 1] !== "object") {
            args = [].slice.call(args);
            args.push(buildGroups(args, _this));
          }
          return substitution.apply(this, args);
        });
      } else {
        return _super[Symbol.replace].call(this, str, substitution);
      }
    };
    function buildGroups(result, re) {
      var g = _groups.get(re);
      return Object.keys(g).reduce(function(groups, name) {
        groups[name] = result[g[name]];
        return groups;
      }, /* @__PURE__ */ Object.create(null));
    }
    return _wrapRegExp.apply(this, arguments);
  }
  var directionMap = {
    "to-t": "to top",
    "to-tr": "to top right",
    "to-r": "to right",
    "to-br": "to bottom right",
    "to-b": "to bottom",
    "to-bl": "to bottom left",
    "to-l": "to left",
    "to-tl": "to top left"
  };
  var valueSet = new Set(Object.values(directionMap));
  var globalSet = /* @__PURE__ */ new Set(["none", "-moz-initial", "inherit", "initial", "revert", "unset"]);
  var trimSpace = function trimSpace2(str) {
    return str.trim();
  };
  function parseGradient(value, theme3) {
    var _regex$exec$groups, _regex$exec;
    if (value == null || globalSet.has(value))
      return value;
    var regex = /* @__PURE__ */ _wrapRegExp(/(^[\x2DA-Za-z]+)\(((.*))\)/g, {
      type: 1,
      values: 2
    });
    var _ref2 = (_regex$exec$groups = (_regex$exec = regex.exec(value)) == null ? void 0 : _regex$exec.groups) != null ? _regex$exec$groups : {}, type = _ref2.type, values = _ref2.values;
    if (!type || !values)
      return value;
    var _type = type.includes("-gradient") ? type : type + "-gradient";
    var _values$split$map$fil = values.split(",").map(trimSpace).filter(Boolean), maybeDirection = _values$split$map$fil[0], stops = _values$split$map$fil.slice(1);
    if ((stops == null ? void 0 : stops.length) === 0)
      return value;
    var direction2 = maybeDirection in directionMap ? directionMap[maybeDirection] : maybeDirection;
    stops.unshift(direction2);
    var _values = stops.map(function(stop) {
      if (valueSet.has(stop))
        return stop;
      var firstStop = stop.indexOf(" ");
      var _ref22 = firstStop !== -1 ? [stop.substr(0, firstStop), stop.substr(firstStop + 1)] : [stop], _color = _ref22[0], _stop = _ref22[1];
      var _stopOrFunc = isCSSFunction(_stop) ? _stop : _stop && _stop.split(" ");
      var key = "colors." + _color;
      var color3 = key in theme3.__cssMap ? theme3.__cssMap[key].varRef : _color;
      return _stopOrFunc ? [color3].concat(Array.isArray(_stopOrFunc) ? _stopOrFunc : [_stopOrFunc]).join(" ") : color3;
    });
    return _type + "(" + _values.join(", ") + ")";
  }
  var isCSSFunction = function isCSSFunction2(value) {
    return isString(value) && value.includes("(") && value.includes(")");
  };
  var gradientTransform = function gradientTransform2(value, theme3) {
    return parseGradient(value, theme3 != null ? theme3 : {});
  };
  var analyzeCSSValue2 = function analyzeCSSValue3(value) {
    var num = parseFloat(value.toString());
    var unit = value.toString().replace(String(num), "");
    return {
      unitless: !unit,
      value: num,
      unit
    };
  };
  var wrap = function wrap2(str) {
    return function(value) {
      return str + "(" + value + ")";
    };
  };
  var transformFunctions = {
    filter: function filter(value) {
      return value !== "auto" ? value : filterTemplate;
    },
    backdropFilter: function backdropFilter(value) {
      return value !== "auto" ? value : backdropFilterTemplate;
    },
    ring: function ring(value) {
      return getRingTemplate(transformFunctions.px(value));
    },
    bgClip: function bgClip(value) {
      return value === "text" ? {
        color: "transparent",
        backgroundClip: "text"
      } : {
        backgroundClip: value
      };
    },
    transform: function transform(value) {
      if (value === "auto")
        return getTransformTemplate();
      if (value === "auto-gpu")
        return getTransformGpuTemplate();
      return value;
    },
    px: function px2(value) {
      if (value == null)
        return value;
      var _analyzeCSSValue = analyzeCSSValue2(value), unitless = _analyzeCSSValue.unitless;
      return unitless || isNumber(value) ? value + "px" : value;
    },
    fraction: function fraction(value) {
      return !isNumber(value) || value > 1 ? value : value * 100 + "%";
    },
    "float": function float(value, theme3) {
      var map = {
        left: "right",
        right: "left"
      };
      return theme3.direction === "rtl" ? map[value] : value;
    },
    degree: function degree(value) {
      if (isCssVar(value) || value == null)
        return value;
      var unitless = isString(value) && !value.endsWith("deg");
      return isNumber(value) || unitless ? value + "deg" : value;
    },
    gradient: gradientTransform,
    blur: wrap("blur"),
    opacity: wrap("opacity"),
    brightness: wrap("brightness"),
    contrast: wrap("contrast"),
    dropShadow: wrap("drop-shadow"),
    grayscale: wrap("grayscale"),
    hueRotate: wrap("hue-rotate"),
    invert: wrap("invert"),
    saturate: wrap("saturate"),
    sepia: wrap("sepia"),
    bgImage: function bgImage(value) {
      if (value == null)
        return value;
      var prevent = isCSSFunction(value) || globalSet.has(value);
      return !prevent ? "url(" + value + ")" : value;
    },
    outline: function outline(value) {
      var isNoneOrZero = String(value) === "0" || String(value) === "none";
      return value !== null && isNoneOrZero ? {
        outline: "2px solid transparent",
        outlineOffset: "2px"
      } : {
        outline: value
      };
    },
    flexDirection: function flexDirection(value) {
      var _flexDirectionTemplat;
      var _ref2 = (_flexDirectionTemplat = flexDirectionTemplate[value]) != null ? _flexDirectionTemplat : {}, space2 = _ref2.space, divide3 = _ref2.divide;
      var result = {
        flexDirection: value
      };
      if (space2)
        result[space2] = 1;
      if (divide3)
        result[divide3] = 1;
      return result;
    }
  };
  var t = {
    borderWidths: toConfig("borderWidths"),
    borderStyles: toConfig("borderStyles"),
    colors: toConfig("colors"),
    borders: toConfig("borders"),
    radii: toConfig("radii", transformFunctions.px),
    space: toConfig("space", transformFunctions.px),
    spaceT: toConfig("space", transformFunctions.px),
    degreeT: function degreeT(property) {
      return {
        property,
        transform: transformFunctions.degree
      };
    },
    prop: function prop(property, scale2, transform10) {
      return _extends5({
        property,
        scale: scale2
      }, scale2 && {
        transform: createTransform({
          scale: scale2,
          transform: transform10
        })
      });
    },
    propT: function propT(property, transform10) {
      return {
        property,
        transform: transform10
      };
    },
    sizes: toConfig("sizes", transformFunctions.px),
    sizesT: toConfig("sizes", transformFunctions.fraction),
    shadows: toConfig("shadows"),
    logical,
    blur: toConfig("blur", transformFunctions.blur)
  };
  var background = {
    background: t.colors("background"),
    backgroundColor: t.colors("backgroundColor"),
    backgroundImage: t.propT("backgroundImage", transformFunctions.bgImage),
    backgroundSize: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundAttachment: true,
    backgroundClip: {
      transform: transformFunctions.bgClip
    },
    bgSize: t.prop("backgroundSize"),
    bgPosition: t.prop("backgroundPosition"),
    bg: t.colors("background"),
    bgColor: t.colors("backgroundColor"),
    bgPos: t.prop("backgroundPosition"),
    bgRepeat: t.prop("backgroundRepeat"),
    bgAttachment: t.prop("backgroundAttachment"),
    bgGradient: t.propT("backgroundImage", transformFunctions.gradient),
    bgClip: {
      transform: transformFunctions.bgClip
    }
  };
  Object.assign(background, {
    bgImage: background.backgroundImage,
    bgImg: background.backgroundImage
  });
  var border = {
    border: t.borders("border"),
    borderWidth: t.borderWidths("borderWidth"),
    borderStyle: t.borderStyles("borderStyle"),
    borderColor: t.colors("borderColor"),
    borderRadius: t.radii("borderRadius"),
    borderTop: t.borders("borderTop"),
    borderBlockStart: t.borders("borderBlockStart"),
    borderTopLeftRadius: t.radii("borderTopLeftRadius"),
    borderStartStartRadius: t.logical({
      scale: "radii",
      property: {
        ltr: "borderTopLeftRadius",
        rtl: "borderTopRightRadius"
      }
    }),
    borderEndStartRadius: t.logical({
      scale: "radii",
      property: {
        ltr: "borderBottomLeftRadius",
        rtl: "borderBottomRightRadius"
      }
    }),
    borderTopRightRadius: t.radii("borderTopRightRadius"),
    borderStartEndRadius: t.logical({
      scale: "radii",
      property: {
        ltr: "borderTopRightRadius",
        rtl: "borderTopLeftRadius"
      }
    }),
    borderEndEndRadius: t.logical({
      scale: "radii",
      property: {
        ltr: "borderBottomRightRadius",
        rtl: "borderBottomLeftRadius"
      }
    }),
    borderRight: t.borders("borderRight"),
    borderInlineEnd: t.borders("borderInlineEnd"),
    borderBottom: t.borders("borderBottom"),
    borderBlockEnd: t.borders("borderBlockEnd"),
    borderBottomLeftRadius: t.radii("borderBottomLeftRadius"),
    borderBottomRightRadius: t.radii("borderBottomRightRadius"),
    borderLeft: t.borders("borderLeft"),
    borderInlineStart: {
      property: "borderInlineStart",
      scale: "borders"
    },
    borderInlineStartRadius: t.logical({
      scale: "radii",
      property: {
        ltr: ["borderTopLeftRadius", "borderBottomLeftRadius"],
        rtl: ["borderTopRightRadius", "borderBottomRightRadius"]
      }
    }),
    borderInlineEndRadius: t.logical({
      scale: "radii",
      property: {
        ltr: ["borderTopRightRadius", "borderBottomRightRadius"],
        rtl: ["borderTopLeftRadius", "borderBottomLeftRadius"]
      }
    }),
    borderX: t.borders(["borderLeft", "borderRight"]),
    borderInline: t.borders("borderInline"),
    borderY: t.borders(["borderTop", "borderBottom"]),
    borderBlock: t.borders("borderBlock"),
    borderTopWidth: t.borderWidths("borderTopWidth"),
    borderBlockStartWidth: t.borderWidths("borderBlockStartWidth"),
    borderTopColor: t.colors("borderTopColor"),
    borderBlockStartColor: t.colors("borderBlockStartColor"),
    borderTopStyle: t.borderStyles("borderTopStyle"),
    borderBlockStartStyle: t.borderStyles("borderBlockStartStyle"),
    borderBottomWidth: t.borderWidths("borderBottomWidth"),
    borderBlockEndWidth: t.borderWidths("borderBlockEndWidth"),
    borderBottomColor: t.colors("borderBottomColor"),
    borderBlockEndColor: t.colors("borderBlockEndColor"),
    borderBottomStyle: t.borderStyles("borderBottomStyle"),
    borderBlockEndStyle: t.borderStyles("borderBlockEndStyle"),
    borderLeftWidth: t.borderWidths("borderLeftWidth"),
    borderInlineStartWidth: t.borderWidths("borderInlineStartWidth"),
    borderLeftColor: t.colors("borderLeftColor"),
    borderInlineStartColor: t.colors("borderInlineStartColor"),
    borderLeftStyle: t.borderStyles("borderLeftStyle"),
    borderInlineStartStyle: t.borderStyles("borderInlineStartStyle"),
    borderRightWidth: t.borderWidths("borderRightWidth"),
    borderInlineEndWidth: t.borderWidths("borderInlineEndWidth"),
    borderRightColor: t.colors("borderRightColor"),
    borderInlineEndColor: t.colors("borderInlineEndColor"),
    borderRightStyle: t.borderStyles("borderRightStyle"),
    borderInlineEndStyle: t.borderStyles("borderInlineEndStyle"),
    borderTopRadius: t.radii(["borderTopLeftRadius", "borderTopRightRadius"]),
    borderBottomRadius: t.radii(["borderBottomLeftRadius", "borderBottomRightRadius"]),
    borderLeftRadius: t.radii(["borderTopLeftRadius", "borderBottomLeftRadius"]),
    borderRightRadius: t.radii(["borderTopRightRadius", "borderBottomRightRadius"])
  };
  Object.assign(border, {
    rounded: border.borderRadius,
    roundedTop: border.borderTopRadius,
    roundedTopLeft: border.borderTopLeftRadius,
    roundedTopRight: border.borderTopRightRadius,
    roundedTopStart: border.borderStartStartRadius,
    roundedTopEnd: border.borderStartEndRadius,
    roundedBottom: border.borderBottomRadius,
    roundedBottomLeft: border.borderBottomLeftRadius,
    roundedBottomRight: border.borderBottomRightRadius,
    roundedBottomStart: border.borderEndStartRadius,
    roundedBottomEnd: border.borderEndEndRadius,
    roundedLeft: border.borderLeftRadius,
    roundedRight: border.borderRightRadius,
    roundedStart: border.borderInlineStartRadius,
    roundedEnd: border.borderInlineEndRadius,
    borderStart: border.borderInlineStart,
    borderEnd: border.borderInlineEnd,
    borderTopStartRadius: border.borderStartStartRadius,
    borderTopEndRadius: border.borderStartEndRadius,
    borderBottomStartRadius: border.borderEndStartRadius,
    borderBottomEndRadius: border.borderEndEndRadius,
    borderStartRadius: border.borderInlineStartRadius,
    borderEndRadius: border.borderInlineEndRadius,
    borderStartWidth: border.borderInlineStartWidth,
    borderEndWidth: border.borderInlineEndWidth,
    borderStartColor: border.borderInlineStartColor,
    borderEndColor: border.borderInlineEndColor,
    borderStartStyle: border.borderInlineStartStyle,
    borderEndStyle: border.borderInlineEndStyle
  });
  var color = {
    color: t.colors("color"),
    textColor: t.colors("color"),
    fill: t.colors("fill"),
    stroke: t.colors("stroke")
  };
  var effect = {
    boxShadow: t.shadows("boxShadow"),
    mixBlendMode: true,
    blendMode: t.prop("mixBlendMode"),
    backgroundBlendMode: true,
    bgBlendMode: t.prop("backgroundBlendMode"),
    opacity: true
  };
  Object.assign(effect, {
    shadow: effect.boxShadow
  });
  var filter2 = {
    filter: {
      transform: transformFunctions.filter
    },
    blur: t.blur("--chakra-blur"),
    brightness: t.propT("--chakra-brightness", transformFunctions.brightness),
    contrast: t.propT("--chakra-contrast", transformFunctions.contrast),
    hueRotate: t.degreeT("--chakra-hue-rotate"),
    invert: t.propT("--chakra-invert", transformFunctions.invert),
    saturate: t.propT("--chakra-saturate", transformFunctions.saturate),
    dropShadow: t.propT("--chakra-drop-shadow", transformFunctions.dropShadow),
    backdropFilter: {
      transform: transformFunctions.backdropFilter
    },
    backdropBlur: t.blur("--chakra-backdrop-blur"),
    backdropBrightness: t.propT("--chakra-backdrop-brightness", transformFunctions.brightness),
    backdropContrast: t.propT("--chakra-backdrop-contrast", transformFunctions.contrast),
    backdropHueRotate: t.degreeT("--chakra-backdrop-hue-rotate"),
    backdropInvert: t.propT("--chakra-backdrop-invert", transformFunctions.invert),
    backdropSaturate: t.propT("--chakra-backdrop-saturate", transformFunctions.saturate)
  };
  var flexbox = {
    alignItems: true,
    alignContent: true,
    justifyItems: true,
    justifyContent: true,
    flexWrap: true,
    flexDirection: {
      transform: transformFunctions.flexDirection
    },
    experimental_spaceX: {
      "static": spaceXTemplate,
      transform: createTransform({
        scale: "space",
        transform: function transform2(value) {
          return value !== null ? {
            "--chakra-space-x": value
          } : null;
        }
      })
    },
    experimental_spaceY: {
      "static": spaceYTemplate,
      transform: createTransform({
        scale: "space",
        transform: function transform3(value) {
          return value != null ? {
            "--chakra-space-y": value
          } : null;
        }
      })
    },
    flex: true,
    flexFlow: true,
    flexGrow: true,
    flexShrink: true,
    flexBasis: t.sizes("flexBasis"),
    justifySelf: true,
    alignSelf: true,
    order: true,
    placeItems: true,
    placeContent: true,
    placeSelf: true,
    gap: t.space("gap"),
    rowGap: t.space("rowGap"),
    columnGap: t.space("columnGap")
  };
  Object.assign(flexbox, {
    flexDir: flexbox.flexDirection
  });
  var grid = {
    gridGap: t.space("gridGap"),
    gridColumnGap: t.space("gridColumnGap"),
    gridRowGap: t.space("gridRowGap"),
    gridColumn: true,
    gridRow: true,
    gridAutoFlow: true,
    gridAutoColumns: true,
    gridColumnStart: true,
    gridColumnEnd: true,
    gridRowStart: true,
    gridRowEnd: true,
    gridAutoRows: true,
    gridTemplate: true,
    gridTemplateColumns: true,
    gridTemplateRows: true,
    gridTemplateAreas: true,
    gridArea: true
  };
  var interactivity = {
    appearance: true,
    cursor: true,
    resize: true,
    userSelect: true,
    pointerEvents: true,
    outline: {
      transform: transformFunctions.outline
    },
    outlineOffset: true,
    outlineColor: t.colors("outlineColor")
  };
  var layout = {
    width: t.sizesT("width"),
    inlineSize: t.sizesT("inlineSize"),
    height: t.sizes("height"),
    blockSize: t.sizes("blockSize"),
    boxSize: t.sizes(["width", "height"]),
    minWidth: t.sizes("minWidth"),
    minInlineSize: t.sizes("minInlineSize"),
    minHeight: t.sizes("minHeight"),
    minBlockSize: t.sizes("minBlockSize"),
    maxWidth: t.sizes("maxWidth"),
    maxInlineSize: t.sizes("maxInlineSize"),
    maxHeight: t.sizes("maxHeight"),
    maxBlockSize: t.sizes("maxBlockSize"),
    d: t.prop("display"),
    overflow: true,
    overflowX: true,
    overflowY: true,
    overscrollBehavior: true,
    overscrollBehaviorX: true,
    overscrollBehaviorY: true,
    display: true,
    verticalAlign: true,
    boxSizing: true,
    boxDecorationBreak: true,
    "float": t.propT("float", transformFunctions["float"]),
    objectFit: true,
    objectPosition: true,
    visibility: true,
    isolation: true
  };
  Object.assign(layout, {
    w: layout.width,
    h: layout.height,
    minW: layout.minWidth,
    maxW: layout.maxWidth,
    minH: layout.minHeight,
    maxH: layout.maxHeight,
    overscroll: layout.overscrollBehavior,
    overscrollX: layout.overscrollBehaviorX,
    overscrollY: layout.overscrollBehaviorY
  });
  var list = {
    listStyleType: true,
    listStylePosition: true,
    listStylePos: t.prop("listStylePosition"),
    listStyleImage: true,
    listStyleImg: t.prop("listStyleImage")
  };
  var srOnly = {
    border: "0px",
    clip: "rect(0, 0, 0, 0)",
    width: "1px",
    height: "1px",
    margin: "-1px",
    padding: "0px",
    overflow: "hidden",
    whiteSpace: "nowrap",
    position: "absolute"
  };
  var srFocusable = {
    position: "static",
    width: "auto",
    height: "auto",
    clip: "auto",
    padding: "0",
    margin: "0",
    overflow: "visible",
    whiteSpace: "normal"
  };
  var getWithPriority = function getWithPriority2(theme3, key, styles2) {
    var result = {};
    var obj = memoizedGet(theme3, key, {});
    for (var prop2 in obj) {
      var isInStyles = prop2 in styles2 && styles2[prop2] != null;
      if (!isInStyles)
        result[prop2] = obj[prop2];
    }
    return result;
  };
  var others = {
    srOnly: {
      transform: function transform4(value) {
        if (value === true)
          return srOnly;
        if (value === "focusable")
          return srFocusable;
        return {};
      }
    },
    layerStyle: {
      processResult: true,
      transform: function transform5(value, theme3, styles2) {
        return getWithPriority(theme3, "layerStyles." + value, styles2);
      }
    },
    textStyle: {
      processResult: true,
      transform: function transform6(value, theme3, styles2) {
        return getWithPriority(theme3, "textStyles." + value, styles2);
      }
    },
    apply: {
      processResult: true,
      transform: function transform7(value, theme3, styles2) {
        return getWithPriority(theme3, value, styles2);
      }
    }
  };
  var position2 = {
    position: true,
    pos: t.prop("position"),
    zIndex: t.prop("zIndex", "zIndices"),
    inset: t.spaceT("inset"),
    insetX: t.spaceT(["left", "right"]),
    insetInline: t.spaceT("insetInline"),
    insetY: t.spaceT(["top", "bottom"]),
    insetBlock: t.spaceT("insetBlock"),
    top: t.spaceT("top"),
    insetBlockStart: t.spaceT("insetBlockStart"),
    bottom: t.spaceT("bottom"),
    insetBlockEnd: t.spaceT("insetBlockEnd"),
    left: t.spaceT("left"),
    insetInlineStart: t.logical({
      scale: "space",
      property: {
        ltr: "left",
        rtl: "right"
      }
    }),
    right: t.spaceT("right"),
    insetInlineEnd: t.logical({
      scale: "space",
      property: {
        ltr: "right",
        rtl: "left"
      }
    })
  };
  Object.assign(position2, {
    insetStart: position2.insetInlineStart,
    insetEnd: position2.insetInlineEnd
  });
  var ring2 = {
    ring: {
      transform: transformFunctions.ring
    },
    ringColor: t.colors("--chakra-ring-color"),
    ringOffset: t.prop("--chakra-ring-offset-width"),
    ringOffsetColor: t.colors("--chakra-ring-offset-color"),
    ringInset: t.prop("--chakra-ring-inset")
  };
  var space = {
    margin: t.spaceT("margin"),
    marginTop: t.spaceT("marginTop"),
    marginBlockStart: t.spaceT("marginBlockStart"),
    marginRight: t.spaceT("marginRight"),
    marginInlineEnd: t.spaceT("marginInlineEnd"),
    marginBottom: t.spaceT("marginBottom"),
    marginBlockEnd: t.spaceT("marginBlockEnd"),
    marginLeft: t.spaceT("marginLeft"),
    marginInlineStart: t.spaceT("marginInlineStart"),
    marginX: t.spaceT(["marginInlineStart", "marginInlineEnd"]),
    marginInline: t.spaceT("marginInline"),
    marginY: t.spaceT(["marginTop", "marginBottom"]),
    marginBlock: t.spaceT("marginBlock"),
    padding: t.space("padding"),
    paddingTop: t.space("paddingTop"),
    paddingBlockStart: t.space("paddingBlockStart"),
    paddingRight: t.space("paddingRight"),
    paddingBottom: t.space("paddingBottom"),
    paddingBlockEnd: t.space("paddingBlockEnd"),
    paddingLeft: t.space("paddingLeft"),
    paddingInlineStart: t.space("paddingInlineStart"),
    paddingInlineEnd: t.space("paddingInlineEnd"),
    paddingX: t.space(["paddingInlineStart", "paddingInlineEnd"]),
    paddingInline: t.space("paddingInline"),
    paddingY: t.space(["paddingTop", "paddingBottom"]),
    paddingBlock: t.space("paddingBlock")
  };
  Object.assign(space, {
    m: space.margin,
    mt: space.marginTop,
    mr: space.marginRight,
    me: space.marginInlineEnd,
    marginEnd: space.marginInlineEnd,
    mb: space.marginBottom,
    ml: space.marginLeft,
    ms: space.marginInlineStart,
    marginStart: space.marginInlineStart,
    mx: space.marginX,
    my: space.marginY,
    p: space.padding,
    pt: space.paddingTop,
    py: space.paddingY,
    px: space.paddingX,
    pb: space.paddingBottom,
    pl: space.paddingLeft,
    ps: space.paddingInlineStart,
    paddingStart: space.paddingInlineStart,
    pr: space.paddingRight,
    pe: space.paddingInlineEnd,
    paddingEnd: space.paddingInlineEnd
  });
  var textDecoration = {
    textDecorationColor: t.colors("textDecorationColor"),
    textDecoration: true,
    textDecor: {
      property: "textDecoration"
    },
    textDecorationLine: true,
    textDecorationStyle: true,
    textDecorationThickness: true,
    textUnderlineOffset: true,
    textShadow: t.shadows("textShadow")
  };
  var transform8 = {
    clipPath: true,
    transform: t.propT("transform", transformFunctions.transform),
    transformOrigin: true,
    translateX: t.spaceT("--chakra-translate-x"),
    translateY: t.spaceT("--chakra-translate-y"),
    skewX: t.degreeT("--chakra-skew-x"),
    skewY: t.degreeT("--chakra-skew-y"),
    scaleX: t.prop("--chakra-scale-x"),
    scaleY: t.prop("--chakra-scale-y"),
    scale: t.prop(["--chakra-scale-x", "--chakra-scale-y"]),
    rotate: t.degreeT("--chakra-rotate")
  };
  var transition = {
    transition: true,
    transitionDelay: true,
    animation: true,
    willChange: true,
    transitionDuration: t.prop("transitionDuration", "transition.duration"),
    transitionProperty: t.prop("transitionProperty", "transition.property"),
    transitionTimingFunction: t.prop("transitionTimingFunction", "transition.easing")
  };
  var typography = {
    fontFamily: t.prop("fontFamily", "fonts"),
    fontSize: t.prop("fontSize", "fontSizes", transformFunctions.px),
    fontWeight: t.prop("fontWeight", "fontWeights"),
    lineHeight: t.prop("lineHeight", "lineHeights"),
    letterSpacing: t.prop("letterSpacing", "letterSpacings"),
    textAlign: true,
    fontStyle: true,
    wordBreak: true,
    overflowWrap: true,
    textOverflow: true,
    textTransform: true,
    whiteSpace: true,
    noOfLines: {
      "static": {
        overflow: "hidden",
        textOverflow: "ellipsis",
        display: "-webkit-box",
        WebkitBoxOrient: "vertical",
        WebkitLineClamp: "var(--chakra-line-clamp)"
      },
      property: "--chakra-line-clamp"
    },
    isTruncated: {
      transform: function transform9(value) {
        if (value === true) {
          return {
            overflow: "hidden",
            textOverflow: "ellipsis",
            whiteSpace: "nowrap"
          };
        }
      }
    }
  };
  var scroll = {
    scrollBehavior: true,
    scrollSnapAlign: true,
    scrollSnapStop: true,
    scrollSnapType: true,
    scrollMargin: t.spaceT("scrollMargin"),
    scrollMarginTop: t.spaceT("scrollMarginTop"),
    scrollMarginBottom: t.spaceT("scrollMarginBottom"),
    scrollMarginLeft: t.spaceT("scrollMarginLeft"),
    scrollMarginRight: t.spaceT("scrollMarginRight"),
    scrollMarginX: t.spaceT(["scrollMarginLeft", "scrollMarginRight"]),
    scrollMarginY: t.spaceT(["scrollMarginTop", "scrollMarginBottom"]),
    scrollPadding: t.spaceT("scrollPadding"),
    scrollPaddingTop: t.spaceT("scrollPaddingTop"),
    scrollPaddingBottom: t.spaceT("scrollPaddingBottom"),
    scrollPaddingLeft: t.spaceT("scrollPaddingLeft"),
    scrollPaddingRight: t.spaceT("scrollPaddingRight"),
    scrollPaddingX: t.spaceT(["scrollPaddingLeft", "scrollPaddingRight"]),
    scrollPaddingY: t.spaceT(["scrollPaddingTop", "scrollPaddingBottom"])
  };
  function _arrayLikeToArray2(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  }
  function _unsupportedIterableToArray2(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray2(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray2(o, minLen);
  }
  function _createForOfIteratorHelperLoose2(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (it)
      return (it = it.call(o)).next.bind(it);
    if (Array.isArray(o) || (it = _unsupportedIterableToArray2(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      return function() {
        if (i >= o.length)
          return {
            done: true
          };
        return {
          done: false,
          value: o[i++]
        };
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var state = {
    hover: function hover(str, post) {
      return str + ":hover " + post + ", " + str + "[data-hover] " + post;
    },
    focus: function focus2(str, post) {
      return str + ":focus " + post + ", " + str + "[data-focus] " + post;
    },
    focusVisible: function focusVisible(str, post) {
      return str + ":focus-visible " + post;
    },
    focusWithin: function focusWithin(str, post) {
      return str + ":focus-within " + post;
    },
    active: function active(str, post) {
      return str + ":active " + post + ", " + str + "[data-active] " + post;
    },
    disabled: function disabled(str, post) {
      return str + ":disabled " + post + ", " + str + "[data-disabled] " + post;
    },
    invalid: function invalid(str, post) {
      return str + ":invalid " + post + ", " + str + "[data-invalid] " + post;
    },
    checked: function checked(str, post) {
      return str + ":checked " + post + ", " + str + "[data-checked] " + post;
    },
    indeterminate: function indeterminate(str, post) {
      return str + ":indeterminate " + post + ", " + str + "[aria-checked=mixed] " + post + ", " + str + "[data-indeterminate] " + post;
    },
    readOnly: function readOnly(str, post) {
      return str + ":read-only " + post + ", " + str + "[readonly] " + post + ", " + str + "[data-read-only] " + post;
    },
    expanded: function expanded(str, post) {
      return str + ":read-only " + post + ", " + str + "[aria-expanded=true] " + post + ", " + str + "[data-expanded] " + post;
    },
    placeholderShown: function placeholderShown(str, post) {
      return str + ":placeholder-shown " + post;
    }
  };
  var toGroup = function toGroup2(fn) {
    return merge2(function(v) {
      return fn(v, "&");
    }, "[role=group]", "[data-group]", ".group");
  };
  var toPeer = function toPeer2(fn) {
    return merge2(function(v) {
      return fn(v, "~ &");
    }, "[data-peer]", ".peer");
  };
  var merge2 = function merge3(fn) {
    for (var _len = arguments.length, selectors = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      selectors[_key - 1] = arguments[_key];
    }
    return selectors.map(fn).join(", ");
  };
  var pseudoSelectors = {
    _hover: "&:hover, &[data-hover]",
    _active: "&:active, &[data-active]",
    _focus: "&:focus, &[data-focus]",
    _highlighted: "&[data-highlighted]",
    _focusWithin: "&:focus-within",
    _focusVisible: "&:focus-visible",
    _disabled: "&[disabled], &[aria-disabled=true], &[data-disabled]",
    _readOnly: "&[aria-readonly=true], &[readonly], &[data-readonly]",
    _before: "&::before",
    _after: "&::after",
    _empty: "&:empty",
    _expanded: "&[aria-expanded=true], &[data-expanded]",
    _checked: "&[aria-checked=true], &[data-checked]",
    _grabbed: "&[aria-grabbed=true], &[data-grabbed]",
    _pressed: "&[aria-pressed=true], &[data-pressed]",
    _invalid: "&[aria-invalid=true], &[data-invalid]",
    _valid: "&[data-valid], &[data-state=valid]",
    _loading: "&[data-loading], &[aria-busy=true]",
    _selected: "&[aria-selected=true], &[data-selected]",
    _hidden: "&[hidden], &[data-hidden]",
    _autofill: "&:-webkit-autofill",
    _even: "&:nth-of-type(even)",
    _odd: "&:nth-of-type(odd)",
    _first: "&:first-of-type",
    _last: "&:last-of-type",
    _notFirst: "&:not(:first-of-type)",
    _notLast: "&:not(:last-of-type)",
    _visited: "&:visited",
    _activeLink: "&[aria-current=page]",
    _activeStep: "&[aria-current=step]",
    _indeterminate: "&:indeterminate, &[aria-checked=mixed], &[data-indeterminate]",
    _groupHover: toGroup(state.hover),
    _peerHover: toPeer(state.hover),
    _groupFocus: toGroup(state.focus),
    _peerFocus: toPeer(state.focus),
    _groupFocusVisible: toGroup(state.focusVisible),
    _peerFocusVisible: toPeer(state.focusVisible),
    _groupActive: toGroup(state.active),
    _peerActive: toPeer(state.active),
    _groupDisabled: toGroup(state.disabled),
    _peerDisabled: toPeer(state.disabled),
    _groupInvalid: toGroup(state.invalid),
    _peerInvalid: toPeer(state.invalid),
    _groupChecked: toGroup(state.checked),
    _peerChecked: toPeer(state.checked),
    _groupFocusWithin: toGroup(state.focusWithin),
    _peerFocusWithin: toPeer(state.focusWithin),
    _peerPlaceholderShown: toPeer(state.placeholderShown),
    _placeholder: "&::placeholder",
    _placeholderShown: "&:placeholder-shown",
    _fullScreen: "&:fullscreen",
    _selection: "&::selection",
    _rtl: "[dir=rtl] &, &[dir=rtl]",
    _ltr: "[dir=ltr] &, &[dir=ltr]",
    _mediaDark: "@media (prefers-color-scheme: dark)",
    _mediaReduceMotion: "@media (prefers-reduced-motion: reduce)",
    _dark: ".chakra-ui-dark &:not([data-theme]),[data-theme=dark] &:not([data-theme]),&[data-theme=dark]",
    _light: ".chakra-ui-light &:not([data-theme]),[data-theme=light] &:not([data-theme]),&[data-theme=light]"
  };
  var pseudoPropNames = objectKeys(pseudoSelectors);
  var systemProps = (0, import_lodash.default)({}, background, border, color, flexbox, layout, filter2, ring2, interactivity, grid, others, position2, effect, space, scroll, typography, textDecoration, transform8, list, transition);
  var layoutSystem = Object.assign({}, space, layout, flexbox, grid, position2);
  var layoutPropNames = objectKeys(layoutSystem);
  var propNames = [].concat(objectKeys(systemProps), pseudoPropNames);
  var styleProps = _extends5({}, systemProps, pseudoSelectors);
  var isStyleProp = function isStyleProp2(prop2) {
    return prop2 in styleProps;
  };
  var expandResponsive = function expandResponsive2(styles2) {
    return function(theme3) {
      if (!theme3.__breakpoints)
        return styles2;
      var _theme$__breakpoints = theme3.__breakpoints, isResponsive = _theme$__breakpoints.isResponsive, toArrayValue = _theme$__breakpoints.toArrayValue, medias = _theme$__breakpoints.media;
      var computedStyles = {};
      for (var key in styles2) {
        var value = runIfFn(styles2[key], theme3);
        if (value == null)
          continue;
        value = isObject(value) && isResponsive(value) ? toArrayValue(value) : value;
        if (!Array.isArray(value)) {
          computedStyles[key] = value;
          continue;
        }
        var queries2 = value.slice(0, medias.length).length;
        for (var index = 0; index < queries2; index += 1) {
          var media = medias == null ? void 0 : medias[index];
          if (!media) {
            computedStyles[key] = value[index];
            continue;
          }
          computedStyles[media] = computedStyles[media] || {};
          if (value[index] == null) {
            continue;
          }
          computedStyles[media][key] = value[index];
        }
      }
      return computedStyles;
    };
  };
  var isCSSVariableTokenValue = function isCSSVariableTokenValue2(key, value) {
    return key.startsWith("--") && isString(value) && !isCssVar(value);
  };
  var resolveTokenValue = function resolveTokenValue2(theme3, value) {
    var _ref2, _getVar2;
    if (value == null)
      return value;
    var getVar = function getVar2(val) {
      var _theme$__cssMap, _theme$__cssMap$val;
      return (_theme$__cssMap = theme3.__cssMap) == null ? void 0 : (_theme$__cssMap$val = _theme$__cssMap[val]) == null ? void 0 : _theme$__cssMap$val.varRef;
    };
    var getValue = function getValue2(val) {
      var _getVar;
      return (_getVar = getVar(val)) != null ? _getVar : val;
    };
    var valueSplit = value.split(",").map(function(v) {
      return v.trim();
    });
    var tokenValue = valueSplit[0], fallbackValue = valueSplit[1];
    value = (_ref2 = (_getVar2 = getVar(tokenValue)) != null ? _getVar2 : getValue(fallbackValue)) != null ? _ref2 : getValue(value);
    return value;
  };
  function getCss(options) {
    var _options$configs = options.configs, configs = _options$configs === void 0 ? {} : _options$configs, _options$pseudos = options.pseudos, pseudos = _options$pseudos === void 0 ? {} : _options$pseudos, theme3 = options.theme;
    var css4 = function css5(stylesOrFn, nested) {
      if (nested === void 0) {
        nested = false;
      }
      var _styles = runIfFn(stylesOrFn, theme3);
      var styles2 = expandResponsive(_styles)(theme3);
      var computedStyles = {};
      for (var key in styles2) {
        var _config$transform, _config, _config2, _config3, _config4;
        var valueOrFn = styles2[key];
        var value = runIfFn(valueOrFn, theme3);
        if (key in pseudos) {
          key = pseudos[key];
        }
        if (isCSSVariableTokenValue(key, value)) {
          value = resolveTokenValue(theme3, value);
        }
        var config2 = configs[key];
        if (config2 === true) {
          config2 = {
            property: key
          };
        }
        if (isObject(value)) {
          var _computedStyles$key;
          computedStyles[key] = (_computedStyles$key = computedStyles[key]) != null ? _computedStyles$key : {};
          computedStyles[key] = (0, import_lodash.default)({}, computedStyles[key], css5(value, true));
          continue;
        }
        var rawValue = (_config$transform = (_config = config2) == null ? void 0 : _config.transform == null ? void 0 : _config.transform(value, theme3, _styles)) != null ? _config$transform : value;
        rawValue = (_config2 = config2) != null && _config2.processResult ? css5(rawValue, true) : rawValue;
        var configProperty = runIfFn((_config3 = config2) == null ? void 0 : _config3.property, theme3);
        if (!nested && (_config4 = config2) != null && _config4["static"]) {
          var staticStyles = runIfFn(config2["static"], theme3);
          computedStyles = (0, import_lodash.default)({}, computedStyles, staticStyles);
        }
        if (configProperty && Array.isArray(configProperty)) {
          for (var _iterator = _createForOfIteratorHelperLoose2(configProperty), _step; !(_step = _iterator()).done; ) {
            var property = _step.value;
            computedStyles[property] = rawValue;
          }
          continue;
        }
        if (configProperty) {
          if (configProperty === "&" && isObject(rawValue)) {
            computedStyles = (0, import_lodash.default)({}, computedStyles, rawValue);
          } else {
            computedStyles[configProperty] = rawValue;
          }
          continue;
        }
        if (isObject(rawValue)) {
          computedStyles = (0, import_lodash.default)({}, computedStyles, rawValue);
          continue;
        }
        computedStyles[key] = rawValue;
      }
      return computedStyles;
    };
    return css4;
  }
  var css2 = function css3(styles2) {
    return function(theme3) {
      var cssFn = getCss({
        theme: theme3,
        pseudos: pseudoSelectors,
        configs: systemProps
      });
      return cssFn(styles2);
    };
  };
  function resolveReference(operand) {
    if (isObject(operand) && operand.reference) {
      return operand.reference;
    }
    return String(operand);
  }
  var toExpression = function toExpression2(operator) {
    for (var _len = arguments.length, operands = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      operands[_key - 1] = arguments[_key];
    }
    return operands.map(resolveReference).join(" " + operator + " ").replace(/calc/g, "");
  };
  var _add = function add2() {
    for (var _len2 = arguments.length, operands = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      operands[_key2] = arguments[_key2];
    }
    return "calc(" + toExpression.apply(void 0, ["+"].concat(operands)) + ")";
  };
  var _subtract = function subtract2() {
    for (var _len3 = arguments.length, operands = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      operands[_key3] = arguments[_key3];
    }
    return "calc(" + toExpression.apply(void 0, ["-"].concat(operands)) + ")";
  };
  var _multiply = function multiply() {
    for (var _len4 = arguments.length, operands = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      operands[_key4] = arguments[_key4];
    }
    return "calc(" + toExpression.apply(void 0, ["*"].concat(operands)) + ")";
  };
  var _divide = function divide() {
    for (var _len5 = arguments.length, operands = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      operands[_key5] = arguments[_key5];
    }
    return "calc(" + toExpression.apply(void 0, ["/"].concat(operands)) + ")";
  };
  var _negate = function negate(x) {
    var value = resolveReference(x);
    if (value != null && !Number.isNaN(parseFloat(value))) {
      return String(value).startsWith("-") ? String(value).slice(1) : "-" + value;
    }
    return _multiply(value, -1);
  };
  var calc = Object.assign(function(x) {
    return {
      add: function add4() {
        for (var _len6 = arguments.length, operands = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          operands[_key6] = arguments[_key6];
        }
        return calc(_add.apply(void 0, [x].concat(operands)));
      },
      subtract: function subtract4() {
        for (var _len7 = arguments.length, operands = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          operands[_key7] = arguments[_key7];
        }
        return calc(_subtract.apply(void 0, [x].concat(operands)));
      },
      multiply: function multiply3() {
        for (var _len8 = arguments.length, operands = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
          operands[_key8] = arguments[_key8];
        }
        return calc(_multiply.apply(void 0, [x].concat(operands)));
      },
      divide: function divide3() {
        for (var _len9 = arguments.length, operands = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
          operands[_key9] = arguments[_key9];
        }
        return calc(_divide.apply(void 0, [x].concat(operands)));
      },
      negate: function negate3() {
        return calc(_negate(x));
      },
      toString: function toString() {
        return x.toString();
      }
    };
  }, {
    add: _add,
    subtract: _subtract,
    multiply: _multiply,
    divide: _divide,
    negate: _negate
  });
  function replaceWhiteSpace(value, replaceValue) {
    if (replaceValue === void 0) {
      replaceValue = "-";
    }
    return value.replace(/\s+/g, replaceValue);
  }
  function escape(value) {
    var valueStr = replaceWhiteSpace(value.toString());
    if (valueStr.includes("\\."))
      return value;
    var isDecimal2 = !Number.isInteger(parseFloat(value.toString()));
    return isDecimal2 ? valueStr.replace(".", "\\.") : value;
  }
  function addPrefix(value, prefix2) {
    if (prefix2 === void 0) {
      prefix2 = "";
    }
    return [prefix2, escape(value)].filter(Boolean).join("-");
  }
  function toVarReference(name, fallback) {
    return "var(" + escape(name) + (fallback ? ", " + fallback : "") + ")";
  }
  function toVarDefinition(value, prefix2) {
    if (prefix2 === void 0) {
      prefix2 = "";
    }
    return "--" + addPrefix(value, prefix2);
  }
  function cssVar(name, fallback, cssVarPrefix) {
    var cssVariable = toVarDefinition(name, cssVarPrefix);
    return {
      variable: cssVariable,
      reference: toVarReference(cssVariable, fallback)
    };
  }
  function tokenToCssVar(token2, prefix2) {
    return cssVar(String(token2).replace(/\./g, "-"), void 0, prefix2);
  }
  function createThemeVars(flatTokens, options) {
    var cssVars = {};
    var cssMap = {};
    var _loop = function _loop2() {
      var _Object$entries$_i = _Object$entries[_i], token2 = _Object$entries$_i[0], tokenValue = _Object$entries$_i[1];
      var isSemantic = tokenValue.isSemantic, value = tokenValue.value;
      var _tokenToCssVar = tokenToCssVar(token2, options == null ? void 0 : options.cssVarPrefix), variable = _tokenToCssVar.variable, reference = _tokenToCssVar.reference;
      if (!isSemantic) {
        if (token2.startsWith("space")) {
          var keys3 = token2.split(".");
          var firstKey = keys3[0], referenceKeys = keys3.slice(1);
          var negativeLookupKey = firstKey + ".-" + referenceKeys.join(".");
          var negativeValue = calc.negate(value);
          var negatedReference = calc.negate(reference);
          cssMap[negativeLookupKey] = {
            value: negativeValue,
            "var": variable,
            varRef: negatedReference
          };
        }
        cssVars[variable] = value;
        cssMap[token2] = {
          value,
          "var": variable,
          varRef: reference
        };
        return "continue";
      }
      var lookupToken = function lookupToken2(maybeToken) {
        var scale2 = String(token2).split(".")[0];
        var withScale = [scale2, maybeToken].join(".");
        var resolvedTokenValue = flatTokens[withScale];
        if (!resolvedTokenValue)
          return maybeToken;
        var _tokenToCssVar2 = tokenToCssVar(withScale, options == null ? void 0 : options.cssVarPrefix), reference2 = _tokenToCssVar2.reference;
        return reference2;
      };
      var normalizedValue = isObject(value) ? value : {
        "default": value
      };
      cssVars = (0, import_lodash.default)(cssVars, Object.entries(normalizedValue).reduce(function(acc, _ref2) {
        var _pseudoSelectors$cond, _acc$conditionSelecto;
        var conditionAlias = _ref2[0], conditionValue = _ref2[1];
        var maybeReference = lookupToken(conditionValue);
        if (conditionAlias === "default") {
          acc[variable] = maybeReference;
          return acc;
        }
        var conditionSelector = (_pseudoSelectors$cond = pseudoSelectors == null ? void 0 : pseudoSelectors[conditionAlias]) != null ? _pseudoSelectors$cond : conditionAlias;
        acc[conditionSelector] = (_acc$conditionSelecto = {}, _acc$conditionSelecto[variable] = maybeReference, _acc$conditionSelecto);
        return acc;
      }, {}));
      cssMap[token2] = {
        value: reference,
        "var": variable,
        varRef: reference
      };
    };
    for (var _i = 0, _Object$entries = Object.entries(flatTokens); _i < _Object$entries.length; _i++) {
      var _ret = _loop();
      if (_ret === "continue")
        continue;
    }
    return {
      cssVars,
      cssMap
    };
  }
  function _objectWithoutPropertiesLoose2(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var _excluded2 = ["__cssMap", "__cssVars", "__breakpoints"];
  var tokens = ["colors", "borders", "borderWidths", "borderStyles", "fonts", "fontSizes", "fontWeights", "letterSpacings", "lineHeights", "radii", "space", "shadows", "sizes", "zIndices", "transition", "blur"];
  function extractTokens(theme3) {
    var _tokens = tokens;
    return pick(theme3, _tokens);
  }
  function extractSemanticTokens(theme3) {
    return theme3.semanticTokens;
  }
  function omitVars(rawTheme) {
    rawTheme.__cssMap;
    rawTheme.__cssVars;
    rawTheme.__breakpoints;
    var cleanTheme = _objectWithoutPropertiesLoose2(rawTheme, _excluded2);
    return cleanTheme;
  }
  function flattenTokens(_ref2) {
    var _flatten, _flatten2;
    var tokens2 = _ref2.tokens, semanticTokens = _ref2.semanticTokens;
    var tokenEntries = Object.entries((_flatten = flatten(tokens2)) != null ? _flatten : {}).map(function(_ref22) {
      var token2 = _ref22[0], value = _ref22[1];
      var enhancedToken = {
        isSemantic: false,
        value
      };
      return [token2, enhancedToken];
    });
    var semanticTokenEntries = Object.entries((_flatten2 = flatten(semanticTokens, 1)) != null ? _flatten2 : {}).map(function(_ref3) {
      var token2 = _ref3[0], value = _ref3[1];
      var enhancedToken = {
        isSemantic: true,
        value
      };
      return [token2, enhancedToken];
    });
    return fromEntries([].concat(tokenEntries, semanticTokenEntries));
  }
  function toCSSVar(rawTheme) {
    var _theme$config;
    var theme3 = omitVars(rawTheme);
    var tokens2 = extractTokens(theme3);
    var semanticTokens = extractSemanticTokens(theme3);
    var flatTokens = flattenTokens({
      tokens: tokens2,
      semanticTokens
    });
    var cssVarPrefix = (_theme$config = theme3.config) == null ? void 0 : _theme$config.cssVarPrefix;
    var _createThemeVars = createThemeVars(flatTokens, {
      cssVarPrefix
    }), cssMap = _createThemeVars.cssMap, cssVars = _createThemeVars.cssVars;
    var defaultCssVars = {
      "--chakra-ring-inset": "var(--chakra-empty,/*!*/ /*!*/)",
      "--chakra-ring-offset-width": "0px",
      "--chakra-ring-offset-color": "#fff",
      "--chakra-ring-color": "rgba(66, 153, 225, 0.6)",
      "--chakra-ring-offset-shadow": "0 0 #0000",
      "--chakra-ring-shadow": "0 0 #0000",
      "--chakra-space-x-reverse": "0",
      "--chakra-space-y-reverse": "0"
    };
    Object.assign(theme3, {
      __cssVars: _extends5({}, defaultCssVars, cssVars),
      __cssMap: cssMap,
      __breakpoints: analyzeBreakpoints(theme3.breakpoints)
    });
    return theme3;
  }

  // node_modules/@chakra-ui/system/dist/chakra-ui-system.esm.js
  var React11 = __toESM(require_react());
  var import_react12 = __toESM(require_react());
  var import_react_fast_compare = __toESM(require_react_fast_compare());

  // node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js
  var import_react9 = __toESM(require_react());

  // node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.browser.esm.js
  var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
  var isPropValid = /* @__PURE__ */ emotion_memoize_browser_esm_default(function(prop2) {
    return reactPropsRegex.test(prop2) || prop2.charCodeAt(0) === 111 && prop2.charCodeAt(1) === 110 && prop2.charCodeAt(2) < 91;
  });
  var emotion_is_prop_valid_browser_esm_default = isPropValid;

  // node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js
  var React10 = __toESM(require_react());
  var import_react7 = __toESM(require_react());
  var testOmitPropsOnStringTag = emotion_is_prop_valid_browser_esm_default;
  var testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
    return key !== "theme";
  };
  var getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag2) {
    return typeof tag2 === "string" && tag2.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
  };
  var composeShouldForwardProps = function composeShouldForwardProps2(tag2, options, isReal) {
    var shouldForwardProp3;
    if (options) {
      var optionsShouldForwardProp = options.shouldForwardProp;
      shouldForwardProp3 = tag2.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
        return tag2.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
      } : optionsShouldForwardProp;
    }
    if (typeof shouldForwardProp3 !== "function" && isReal) {
      shouldForwardProp3 = tag2.__emotion_forwardProp;
    }
    return shouldForwardProp3;
  };
  var useInsertionEffect7 = React10["useInsertionEffect"] ? React10["useInsertionEffect"] : function useInsertionEffect8(create) {
    create();
  };
  function useInsertionEffectMaybe2(create) {
    useInsertionEffect7(create);
  }
  var ILLEGAL_ESCAPE_SEQUENCE_ERROR2 = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
  var Insertion5 = function Insertion6(_ref2) {
    var cache = _ref2.cache, serialized = _ref2.serialized, isStringTag = _ref2.isStringTag;
    registerStyles(cache, serialized, isStringTag);
    var rules = useInsertionEffectMaybe2(function() {
      return insertStyles(cache, serialized, isStringTag);
    });
    return null;
  };
  var createStyled = function createStyled2(tag2, options) {
    if (true) {
      if (tag2 === void 0) {
        throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");
      }
    }
    var isReal = tag2.__emotion_real === tag2;
    var baseTag = isReal && tag2.__emotion_base || tag2;
    var identifierName;
    var targetClassName;
    if (options !== void 0) {
      identifierName = options.label;
      targetClassName = options.target;
    }
    var shouldForwardProp3 = composeShouldForwardProps(tag2, options, isReal);
    var defaultShouldForwardProp = shouldForwardProp3 || getDefaultShouldForwardProp(baseTag);
    var shouldUseAs = !defaultShouldForwardProp("as");
    return function() {
      var args = arguments;
      var styles2 = isReal && tag2.__emotion_styles !== void 0 ? tag2.__emotion_styles.slice(0) : [];
      if (identifierName !== void 0) {
        styles2.push("label:" + identifierName + ";");
      }
      if (args[0] == null || args[0].raw === void 0) {
        styles2.push.apply(styles2, args);
      } else {
        if (args[0][0] === void 0) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2);
        }
        styles2.push(args[0][0]);
        var len = args.length;
        var i = 1;
        for (; i < len; i++) {
          if (args[0][i] === void 0) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2);
          }
          styles2.push(args[i], args[0][i]);
        }
      }
      var Styled = withEmotionCache(function(props, cache, ref) {
        var FinalTag = shouldUseAs && props.as || baseTag;
        var className = "";
        var classInterpolations = [];
        var mergedProps = props;
        if (props.theme == null) {
          mergedProps = {};
          for (var key in props) {
            mergedProps[key] = props[key];
          }
          mergedProps.theme = (0, import_react7.useContext)(ThemeContext);
        }
        if (typeof props.className === "string") {
          className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
        } else if (props.className != null) {
          className = props.className + " ";
        }
        var serialized = serializeStyles(styles2.concat(classInterpolations), cache.registered, mergedProps);
        className += cache.key + "-" + serialized.name;
        if (targetClassName !== void 0) {
          className += " " + targetClassName;
        }
        var finalShouldForwardProp = shouldUseAs && shouldForwardProp3 === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
        var newProps = {};
        for (var _key in props) {
          if (shouldUseAs && _key === "as")
            continue;
          if (finalShouldForwardProp(_key)) {
            newProps[_key] = props[_key];
          }
        }
        newProps.className = className;
        newProps.ref = ref;
        return /* @__PURE__ */ (0, import_react7.createElement)(import_react7.Fragment, null, /* @__PURE__ */ (0, import_react7.createElement)(Insertion5, {
          cache,
          serialized,
          isStringTag: typeof FinalTag === "string"
        }), /* @__PURE__ */ (0, import_react7.createElement)(FinalTag, newProps));
      });
      Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
      Styled.defaultProps = tag2.defaultProps;
      Styled.__emotion_real = Styled;
      Styled.__emotion_base = baseTag;
      Styled.__emotion_styles = styles2;
      Styled.__emotion_forwardProp = shouldForwardProp3;
      Object.defineProperty(Styled, "toString", {
        value: function value() {
          if (targetClassName === void 0 && true) {
            return "NO_COMPONENT_SELECTOR";
          }
          return "." + targetClassName;
        }
      });
      Styled.withComponent = function(nextTag, nextOptions) {
        return createStyled2(nextTag, _extends({}, options, nextOptions, {
          shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
        })).apply(void 0, styles2);
      };
      return Styled;
    };
  };
  var emotion_styled_base_browser_esm_default = createStyled;

  // node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js
  var tags = [
    "a",
    "abbr",
    "address",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "bdi",
    "bdo",
    "big",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "col",
    "colgroup",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dialog",
    "div",
    "dl",
    "dt",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hgroup",
    "hr",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "keygen",
    "label",
    "legend",
    "li",
    "link",
    "main",
    "map",
    "mark",
    "marquee",
    "menu",
    "menuitem",
    "meta",
    "meter",
    "nav",
    "noscript",
    "object",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "pre",
    "progress",
    "q",
    "rp",
    "rt",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "small",
    "source",
    "span",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "title",
    "tr",
    "track",
    "u",
    "ul",
    "var",
    "video",
    "wbr",
    "circle",
    "clipPath",
    "defs",
    "ellipse",
    "foreignObject",
    "g",
    "image",
    "line",
    "linearGradient",
    "mask",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "radialGradient",
    "rect",
    "stop",
    "svg",
    "text",
    "tspan"
  ];
  var newStyled = emotion_styled_base_browser_esm_default.bind();
  tags.forEach(function(tagName) {
    newStyled[tagName] = newStyled(tagName);
  });
  var emotion_styled_browser_esm_default = newStyled;

  // node_modules/@chakra-ui/system/dist/chakra-ui-system.esm.js
  function _extends6() {
    _extends6 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends6.apply(this, arguments);
  }
  var ThemeProvider3 = function ThemeProvider4(props) {
    var cssVarsRoot = props.cssVarsRoot, theme3 = props.theme, children = props.children;
    var computedTheme = React11.useMemo(function() {
      return toCSSVar(theme3);
    }, [theme3]);
    return /* @__PURE__ */ React11.createElement(ThemeProvider, {
      theme: computedTheme
    }, /* @__PURE__ */ React11.createElement(CSSVars, {
      root: cssVarsRoot
    }), children);
  };
  var CSSVars = function CSSVars2(_ref2) {
    var _ref$root = _ref2.root, root2 = _ref$root === void 0 ? ":host, :root" : _ref$root;
    var selector2 = [root2, "[data-theme]"].join(",");
    return /* @__PURE__ */ React11.createElement(Global, {
      styles: function styles2(theme3) {
        var _ref22;
        return _ref22 = {}, _ref22[selector2] = theme3.__cssVars, _ref22;
      }
    });
  };
  function useTheme2() {
    var theme3 = React11.useContext(ThemeContext);
    if (!theme3) {
      throw Error("useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`");
    }
    return theme3;
  }
  var _createContext2 = createContext3({
    name: "StylesContext",
    errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
  });
  var StylesProvider = _createContext2[0];
  var useStyles = _createContext2[1];
  var GlobalStyle = function GlobalStyle2() {
    var _useColorMode = useColorMode(), colorMode = _useColorMode.colorMode;
    return /* @__PURE__ */ React11.createElement(Global, {
      styles: function styles2(theme3) {
        var styleObjectOrFn = memoizedGet(theme3, "styles.global");
        var globalStyles = runIfFn(styleObjectOrFn, {
          theme: theme3,
          colorMode
        });
        if (!globalStyles)
          return void 0;
        var styles3 = css2(globalStyles)(theme3);
        return styles3;
      }
    });
  };
  function omitThemingProps(props) {
    return omit(props, ["styleConfig", "size", "variant", "colorScheme"]);
  }
  function useChakra() {
    var colorModeResult = useColorMode();
    var theme3 = useTheme2();
    return _extends6({}, colorModeResult, {
      theme: theme3
    });
  }
  function _objectWithoutPropertiesLoose3(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var allPropNames = new Set([].concat(propNames, ["textStyle", "layerStyle", "apply", "isTruncated", "noOfLines", "focusBorderColor", "errorBorderColor", "as", "__css", "css", "sx"]));
  var validHTMLProps = /* @__PURE__ */ new Set(["htmlWidth", "htmlHeight", "htmlSize"]);
  var shouldForwardProp = function shouldForwardProp2(prop2) {
    return validHTMLProps.has(prop2) || !allPropNames.has(prop2);
  };
  var _excluded$1 = ["theme", "css", "__css", "sx"];
  var _excluded22 = ["baseStyle"];
  var toCSSObject = function toCSSObject2(_ref2) {
    var baseStyle22 = _ref2.baseStyle;
    return function(props) {
      props.theme;
      var cssProp = props.css, __css = props.__css, sx = props.sx, rest = _objectWithoutPropertiesLoose3(props, _excluded$1);
      var styleProps2 = objectFilter(rest, function(_, prop2) {
        return isStyleProp(prop2);
      });
      var finalBaseStyle = runIfFn(baseStyle22, props);
      var finalStyles = Object.assign({}, __css, finalBaseStyle, filterUndefined(styleProps2), sx);
      var computedCSS = css2(finalStyles)(props.theme);
      return cssProp ? [computedCSS, cssProp] : computedCSS;
    };
  };
  function styled(component, options) {
    var _ref2 = options != null ? options : {}, baseStyle22 = _ref2.baseStyle, styledOptions = _objectWithoutPropertiesLoose3(_ref2, _excluded22);
    if (!styledOptions.shouldForwardProp) {
      styledOptions.shouldForwardProp = shouldForwardProp;
    }
    var styleObject = toCSSObject({
      baseStyle: baseStyle22
    });
    return emotion_styled_browser_esm_default(component, styledOptions)(styleObject);
  }
  function forwardRef3(component) {
    return /* @__PURE__ */ React11.forwardRef(component);
  }
  var _excluded3 = ["styleConfig"];
  function useStyleConfig(themeKey, props, opts) {
    var _styleConfig$defaultP;
    if (props === void 0) {
      props = {};
    }
    if (opts === void 0) {
      opts = {};
    }
    var _props = props, styleConfigProp = _props.styleConfig, rest = _objectWithoutPropertiesLoose3(_props, _excluded3);
    var _useChakra = useChakra(), theme3 = _useChakra.theme, colorMode = _useChakra.colorMode;
    var themeStyleConfig = memoizedGet(theme3, "components." + themeKey);
    var styleConfig = styleConfigProp || themeStyleConfig;
    var mergedProps = (0, import_lodash.default)({
      theme: theme3,
      colorMode
    }, (_styleConfig$defaultP = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _styleConfig$defaultP : {}, filterUndefined(omit(rest, ["children"])));
    var stylesRef = (0, import_react12.useRef)({});
    if (styleConfig) {
      var _styleConfig$baseStyl, _styleConfig$variants, _styleConfig$variants2, _styleConfig$sizes$me, _styleConfig$sizes, _opts;
      var baseStyles = runIfFn((_styleConfig$baseStyl = styleConfig.baseStyle) != null ? _styleConfig$baseStyl : {}, mergedProps);
      var variants3 = runIfFn((_styleConfig$variants = (_styleConfig$variants2 = styleConfig.variants) == null ? void 0 : _styleConfig$variants2[mergedProps.variant]) != null ? _styleConfig$variants : {}, mergedProps);
      var sizes3 = runIfFn((_styleConfig$sizes$me = (_styleConfig$sizes = styleConfig.sizes) == null ? void 0 : _styleConfig$sizes[mergedProps.size]) != null ? _styleConfig$sizes$me : {}, mergedProps);
      var styles2 = (0, import_lodash.default)({}, baseStyles, sizes3, variants3);
      if ((_opts = opts) != null && _opts.isMultiPart && styleConfig.parts) {
        styleConfig.parts.forEach(function(part) {
          var _styles$part;
          styles2[part] = (_styles$part = styles2[part]) != null ? _styles$part : {};
        });
      }
      var isStyleEqual = (0, import_react_fast_compare.default)(stylesRef.current, styles2);
      if (!isStyleEqual) {
        stylesRef.current = styles2;
      }
    }
    return stylesRef.current;
  }
  function useMultiStyleConfig(themeKey, props) {
    return useStyleConfig(themeKey, props, {
      isMultiPart: true
    });
  }
  function factory() {
    var cache = /* @__PURE__ */ new Map();
    return new Proxy(styled, {
      apply: function apply(target, thisArg, argArray) {
        return styled.apply(void 0, argArray);
      },
      get: function get4(_, element) {
        if (!cache.has(element)) {
          cache.set(element, styled(element));
        }
        return cache.get(element);
      }
    });
  }
  var chakra = factory();

  // node_modules/@chakra-ui/provider/dist/chakra-ui-provider.esm.js
  var React12 = __toESM(require_react());
  var ChakraProvider = function ChakraProvider2(props) {
    var children = props.children, colorModeManager = props.colorModeManager, portalZIndex = props.portalZIndex, _props$resetCSS = props.resetCSS, resetCSS = _props$resetCSS === void 0 ? true : _props$resetCSS, _props$theme = props.theme, theme3 = _props$theme === void 0 ? {} : _props$theme, environment = props.environment, cssVarsRoot = props.cssVarsRoot;
    var _children = /* @__PURE__ */ React12.createElement(EnvironmentProvider, {
      environment
    }, children);
    return /* @__PURE__ */ React12.createElement(IdProvider, null, /* @__PURE__ */ React12.createElement(ThemeProvider3, {
      theme: theme3,
      cssVarsRoot
    }, /* @__PURE__ */ React12.createElement(ColorModeProvider, {
      colorModeManager,
      options: theme3.config
    }, resetCSS && /* @__PURE__ */ React12.createElement(CSSReset$1, null), /* @__PURE__ */ React12.createElement(GlobalStyle, null), portalZIndex ? /* @__PURE__ */ React12.createElement(PortalManager, {
      zIndex: portalZIndex
    }, _children) : _children)));
  };

  // node_modules/@chakra-ui/theme/foundations/spacing/dist/chakra-ui-theme-foundations-spacing.esm.js
  var spacing = {
    px: "1px",
    0.5: "0.125rem",
    1: "0.25rem",
    1.5: "0.375rem",
    2: "0.5rem",
    2.5: "0.625rem",
    3: "0.75rem",
    3.5: "0.875rem",
    4: "1rem",
    5: "1.25rem",
    6: "1.5rem",
    7: "1.75rem",
    8: "2rem",
    9: "2.25rem",
    10: "2.5rem",
    12: "3rem",
    14: "3.5rem",
    16: "4rem",
    20: "5rem",
    24: "6rem",
    28: "7rem",
    32: "8rem",
    36: "9rem",
    40: "10rem",
    44: "11rem",
    48: "12rem",
    52: "13rem",
    56: "14rem",
    60: "15rem",
    64: "16rem",
    72: "18rem",
    80: "20rem",
    96: "24rem"
  };

  // node_modules/@chakra-ui/theme/dist/sizes-6d76cdc8.esm.js
  function _extends7() {
    _extends7 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends7.apply(this, arguments);
  }
  var largeSizes = {
    max: "max-content",
    min: "min-content",
    full: "100%",
    "3xs": "14rem",
    "2xs": "16rem",
    xs: "20rem",
    sm: "24rem",
    md: "28rem",
    lg: "32rem",
    xl: "36rem",
    "2xl": "42rem",
    "3xl": "48rem",
    "4xl": "56rem",
    "5xl": "64rem",
    "6xl": "72rem",
    "7xl": "80rem",
    "8xl": "90rem"
  };
  var container = {
    sm: "640px",
    md: "768px",
    lg: "1024px",
    xl: "1280px"
  };
  var sizes = _extends7({}, spacing, largeSizes, {
    container
  });

  // node_modules/@ctrl/tinycolor/dist/module/util.js
  function bound01(n, max) {
    if (isOnePointZero(n)) {
      n = "100%";
    }
    var isPercent = isPercentage(n);
    n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));
    if (isPercent) {
      n = parseInt(String(n * max), 10) / 100;
    }
    if (Math.abs(n - max) < 1e-6) {
      return 1;
    }
    if (max === 360) {
      n = (n < 0 ? n % max + max : n % max) / parseFloat(String(max));
    } else {
      n = n % max / parseFloat(String(max));
    }
    return n;
  }
  function clamp01(val) {
    return Math.min(1, Math.max(0, val));
  }
  function isOnePointZero(n) {
    return typeof n === "string" && n.indexOf(".") !== -1 && parseFloat(n) === 1;
  }
  function isPercentage(n) {
    return typeof n === "string" && n.indexOf("%") !== -1;
  }
  function boundAlpha(a2) {
    a2 = parseFloat(a2);
    if (isNaN(a2) || a2 < 0 || a2 > 1) {
      a2 = 1;
    }
    return a2;
  }
  function convertToPercentage(n) {
    if (n <= 1) {
      return Number(n) * 100 + "%";
    }
    return n;
  }
  function pad2(c2) {
    return c2.length === 1 ? "0" + c2 : String(c2);
  }

  // node_modules/@ctrl/tinycolor/dist/module/conversion.js
  function rgbToRgb(r, g, b2) {
    return {
      r: bound01(r, 255) * 255,
      g: bound01(g, 255) * 255,
      b: bound01(b2, 255) * 255
    };
  }
  function rgbToHsl(r, g, b2) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b2 = bound01(b2, 255);
    var max = Math.max(r, g, b2);
    var min = Math.min(r, g, b2);
    var h = 0;
    var s = 0;
    var l = (max + min) / 2;
    if (max === min) {
      s = 0;
      h = 0;
    } else {
      var d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b2) / d + (g < b2 ? 6 : 0);
          break;
        case g:
          h = (b2 - r) / d + 2;
          break;
        case b2:
          h = (r - g) / d + 4;
          break;
        default:
          break;
      }
      h /= 6;
    }
    return { h, s, l };
  }
  function hue2rgb(p, q, t2) {
    if (t2 < 0) {
      t2 += 1;
    }
    if (t2 > 1) {
      t2 -= 1;
    }
    if (t2 < 1 / 6) {
      return p + (q - p) * (6 * t2);
    }
    if (t2 < 1 / 2) {
      return q;
    }
    if (t2 < 2 / 3) {
      return p + (q - p) * (2 / 3 - t2) * 6;
    }
    return p;
  }
  function hslToRgb(h, s, l) {
    var r;
    var g;
    var b2;
    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);
    if (s === 0) {
      g = l;
      b2 = l;
      r = l;
    } else {
      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      var p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b2 = hue2rgb(p, q, h - 1 / 3);
    }
    return { r: r * 255, g: g * 255, b: b2 * 255 };
  }
  function rgbToHsv(r, g, b2) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b2 = bound01(b2, 255);
    var max = Math.max(r, g, b2);
    var min = Math.min(r, g, b2);
    var h = 0;
    var v = max;
    var d = max - min;
    var s = max === 0 ? 0 : d / max;
    if (max === min) {
      h = 0;
    } else {
      switch (max) {
        case r:
          h = (g - b2) / d + (g < b2 ? 6 : 0);
          break;
        case g:
          h = (b2 - r) / d + 2;
          break;
        case b2:
          h = (r - g) / d + 4;
          break;
        default:
          break;
      }
      h /= 6;
    }
    return { h, s, v };
  }
  function hsvToRgb(h, s, v) {
    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);
    var i = Math.floor(h);
    var f = h - i;
    var p = v * (1 - s);
    var q = v * (1 - f * s);
    var t2 = v * (1 - (1 - f) * s);
    var mod = i % 6;
    var r = [v, q, p, p, t2, v][mod];
    var g = [t2, v, v, q, p, p][mod];
    var b2 = [p, p, t2, v, v, q][mod];
    return { r: r * 255, g: g * 255, b: b2 * 255 };
  }
  function rgbToHex(r, g, b2, allow3Char) {
    var hex2 = [
      pad2(Math.round(r).toString(16)),
      pad2(Math.round(g).toString(16)),
      pad2(Math.round(b2).toString(16))
    ];
    if (allow3Char && hex2[0].startsWith(hex2[0].charAt(1)) && hex2[1].startsWith(hex2[1].charAt(1)) && hex2[2].startsWith(hex2[2].charAt(1))) {
      return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0);
    }
    return hex2.join("");
  }
  function rgbaToHex(r, g, b2, a2, allow4Char) {
    var hex2 = [
      pad2(Math.round(r).toString(16)),
      pad2(Math.round(g).toString(16)),
      pad2(Math.round(b2).toString(16)),
      pad2(convertDecimalToHex(a2))
    ];
    if (allow4Char && hex2[0].startsWith(hex2[0].charAt(1)) && hex2[1].startsWith(hex2[1].charAt(1)) && hex2[2].startsWith(hex2[2].charAt(1)) && hex2[3].startsWith(hex2[3].charAt(1))) {
      return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0) + hex2[3].charAt(0);
    }
    return hex2.join("");
  }
  function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
  }
  function convertHexToDecimal(h) {
    return parseIntFromHex(h) / 255;
  }
  function parseIntFromHex(val) {
    return parseInt(val, 16);
  }
  function numberInputToObject(color3) {
    return {
      r: color3 >> 16,
      g: (color3 & 65280) >> 8,
      b: color3 & 255
    };
  }

  // node_modules/@ctrl/tinycolor/dist/module/css-color-names.js
  var names = {
    aliceblue: "#f0f8ff",
    antiquewhite: "#faebd7",
    aqua: "#00ffff",
    aquamarine: "#7fffd4",
    azure: "#f0ffff",
    beige: "#f5f5dc",
    bisque: "#ffe4c4",
    black: "#000000",
    blanchedalmond: "#ffebcd",
    blue: "#0000ff",
    blueviolet: "#8a2be2",
    brown: "#a52a2a",
    burlywood: "#deb887",
    cadetblue: "#5f9ea0",
    chartreuse: "#7fff00",
    chocolate: "#d2691e",
    coral: "#ff7f50",
    cornflowerblue: "#6495ed",
    cornsilk: "#fff8dc",
    crimson: "#dc143c",
    cyan: "#00ffff",
    darkblue: "#00008b",
    darkcyan: "#008b8b",
    darkgoldenrod: "#b8860b",
    darkgray: "#a9a9a9",
    darkgreen: "#006400",
    darkgrey: "#a9a9a9",
    darkkhaki: "#bdb76b",
    darkmagenta: "#8b008b",
    darkolivegreen: "#556b2f",
    darkorange: "#ff8c00",
    darkorchid: "#9932cc",
    darkred: "#8b0000",
    darksalmon: "#e9967a",
    darkseagreen: "#8fbc8f",
    darkslateblue: "#483d8b",
    darkslategray: "#2f4f4f",
    darkslategrey: "#2f4f4f",
    darkturquoise: "#00ced1",
    darkviolet: "#9400d3",
    deeppink: "#ff1493",
    deepskyblue: "#00bfff",
    dimgray: "#696969",
    dimgrey: "#696969",
    dodgerblue: "#1e90ff",
    firebrick: "#b22222",
    floralwhite: "#fffaf0",
    forestgreen: "#228b22",
    fuchsia: "#ff00ff",
    gainsboro: "#dcdcdc",
    ghostwhite: "#f8f8ff",
    goldenrod: "#daa520",
    gold: "#ffd700",
    gray: "#808080",
    green: "#008000",
    greenyellow: "#adff2f",
    grey: "#808080",
    honeydew: "#f0fff0",
    hotpink: "#ff69b4",
    indianred: "#cd5c5c",
    indigo: "#4b0082",
    ivory: "#fffff0",
    khaki: "#f0e68c",
    lavenderblush: "#fff0f5",
    lavender: "#e6e6fa",
    lawngreen: "#7cfc00",
    lemonchiffon: "#fffacd",
    lightblue: "#add8e6",
    lightcoral: "#f08080",
    lightcyan: "#e0ffff",
    lightgoldenrodyellow: "#fafad2",
    lightgray: "#d3d3d3",
    lightgreen: "#90ee90",
    lightgrey: "#d3d3d3",
    lightpink: "#ffb6c1",
    lightsalmon: "#ffa07a",
    lightseagreen: "#20b2aa",
    lightskyblue: "#87cefa",
    lightslategray: "#778899",
    lightslategrey: "#778899",
    lightsteelblue: "#b0c4de",
    lightyellow: "#ffffe0",
    lime: "#00ff00",
    limegreen: "#32cd32",
    linen: "#faf0e6",
    magenta: "#ff00ff",
    maroon: "#800000",
    mediumaquamarine: "#66cdaa",
    mediumblue: "#0000cd",
    mediumorchid: "#ba55d3",
    mediumpurple: "#9370db",
    mediumseagreen: "#3cb371",
    mediumslateblue: "#7b68ee",
    mediumspringgreen: "#00fa9a",
    mediumturquoise: "#48d1cc",
    mediumvioletred: "#c71585",
    midnightblue: "#191970",
    mintcream: "#f5fffa",
    mistyrose: "#ffe4e1",
    moccasin: "#ffe4b5",
    navajowhite: "#ffdead",
    navy: "#000080",
    oldlace: "#fdf5e6",
    olive: "#808000",
    olivedrab: "#6b8e23",
    orange: "#ffa500",
    orangered: "#ff4500",
    orchid: "#da70d6",
    palegoldenrod: "#eee8aa",
    palegreen: "#98fb98",
    paleturquoise: "#afeeee",
    palevioletred: "#db7093",
    papayawhip: "#ffefd5",
    peachpuff: "#ffdab9",
    peru: "#cd853f",
    pink: "#ffc0cb",
    plum: "#dda0dd",
    powderblue: "#b0e0e6",
    purple: "#800080",
    rebeccapurple: "#663399",
    red: "#ff0000",
    rosybrown: "#bc8f8f",
    royalblue: "#4169e1",
    saddlebrown: "#8b4513",
    salmon: "#fa8072",
    sandybrown: "#f4a460",
    seagreen: "#2e8b57",
    seashell: "#fff5ee",
    sienna: "#a0522d",
    silver: "#c0c0c0",
    skyblue: "#87ceeb",
    slateblue: "#6a5acd",
    slategray: "#708090",
    slategrey: "#708090",
    snow: "#fffafa",
    springgreen: "#00ff7f",
    steelblue: "#4682b4",
    tan: "#d2b48c",
    teal: "#008080",
    thistle: "#d8bfd8",
    tomato: "#ff6347",
    turquoise: "#40e0d0",
    violet: "#ee82ee",
    wheat: "#f5deb3",
    white: "#ffffff",
    whitesmoke: "#f5f5f5",
    yellow: "#ffff00",
    yellowgreen: "#9acd32"
  };

  // node_modules/@ctrl/tinycolor/dist/module/format-input.js
  function inputToRGB(color3) {
    var rgb = { r: 0, g: 0, b: 0 };
    var a2 = 1;
    var s = null;
    var v = null;
    var l = null;
    var ok = false;
    var format = false;
    if (typeof color3 === "string") {
      color3 = stringInputToObject(color3);
    }
    if (typeof color3 === "object") {
      if (isValidCSSUnit(color3.r) && isValidCSSUnit(color3.g) && isValidCSSUnit(color3.b)) {
        rgb = rgbToRgb(color3.r, color3.g, color3.b);
        ok = true;
        format = String(color3.r).substr(-1) === "%" ? "prgb" : "rgb";
      } else if (isValidCSSUnit(color3.h) && isValidCSSUnit(color3.s) && isValidCSSUnit(color3.v)) {
        s = convertToPercentage(color3.s);
        v = convertToPercentage(color3.v);
        rgb = hsvToRgb(color3.h, s, v);
        ok = true;
        format = "hsv";
      } else if (isValidCSSUnit(color3.h) && isValidCSSUnit(color3.s) && isValidCSSUnit(color3.l)) {
        s = convertToPercentage(color3.s);
        l = convertToPercentage(color3.l);
        rgb = hslToRgb(color3.h, s, l);
        ok = true;
        format = "hsl";
      }
      if (Object.prototype.hasOwnProperty.call(color3, "a")) {
        a2 = color3.a;
      }
    }
    a2 = boundAlpha(a2);
    return {
      ok,
      format: color3.format || format,
      r: Math.min(255, Math.max(rgb.r, 0)),
      g: Math.min(255, Math.max(rgb.g, 0)),
      b: Math.min(255, Math.max(rgb.b, 0)),
      a: a2
    };
  }
  var CSS_INTEGER = "[-\\+]?\\d+%?";
  var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
  var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
  var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
  var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
  var matchers = {
    CSS_UNIT: new RegExp(CSS_UNIT),
    rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
    rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
    hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
    hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
    hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
    hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
  };
  function stringInputToObject(color3) {
    color3 = color3.trim().toLowerCase();
    if (color3.length === 0) {
      return false;
    }
    var named = false;
    if (names[color3]) {
      color3 = names[color3];
      named = true;
    } else if (color3 === "transparent") {
      return { r: 0, g: 0, b: 0, a: 0, format: "name" };
    }
    var match2 = matchers.rgb.exec(color3);
    if (match2) {
      return { r: match2[1], g: match2[2], b: match2[3] };
    }
    match2 = matchers.rgba.exec(color3);
    if (match2) {
      return { r: match2[1], g: match2[2], b: match2[3], a: match2[4] };
    }
    match2 = matchers.hsl.exec(color3);
    if (match2) {
      return { h: match2[1], s: match2[2], l: match2[3] };
    }
    match2 = matchers.hsla.exec(color3);
    if (match2) {
      return { h: match2[1], s: match2[2], l: match2[3], a: match2[4] };
    }
    match2 = matchers.hsv.exec(color3);
    if (match2) {
      return { h: match2[1], s: match2[2], v: match2[3] };
    }
    match2 = matchers.hsva.exec(color3);
    if (match2) {
      return { h: match2[1], s: match2[2], v: match2[3], a: match2[4] };
    }
    match2 = matchers.hex8.exec(color3);
    if (match2) {
      return {
        r: parseIntFromHex(match2[1]),
        g: parseIntFromHex(match2[2]),
        b: parseIntFromHex(match2[3]),
        a: convertHexToDecimal(match2[4]),
        format: named ? "name" : "hex8"
      };
    }
    match2 = matchers.hex6.exec(color3);
    if (match2) {
      return {
        r: parseIntFromHex(match2[1]),
        g: parseIntFromHex(match2[2]),
        b: parseIntFromHex(match2[3]),
        format: named ? "name" : "hex"
      };
    }
    match2 = matchers.hex4.exec(color3);
    if (match2) {
      return {
        r: parseIntFromHex(match2[1] + match2[1]),
        g: parseIntFromHex(match2[2] + match2[2]),
        b: parseIntFromHex(match2[3] + match2[3]),
        a: convertHexToDecimal(match2[4] + match2[4]),
        format: named ? "name" : "hex8"
      };
    }
    match2 = matchers.hex3.exec(color3);
    if (match2) {
      return {
        r: parseIntFromHex(match2[1] + match2[1]),
        g: parseIntFromHex(match2[2] + match2[2]),
        b: parseIntFromHex(match2[3] + match2[3]),
        format: named ? "name" : "hex"
      };
    }
    return false;
  }
  function isValidCSSUnit(color3) {
    return Boolean(matchers.CSS_UNIT.exec(String(color3)));
  }

  // node_modules/@ctrl/tinycolor/dist/module/index.js
  var TinyColor = function() {
    function TinyColor2(color3, opts) {
      if (color3 === void 0) {
        color3 = "";
      }
      if (opts === void 0) {
        opts = {};
      }
      var _a;
      if (color3 instanceof TinyColor2) {
        return color3;
      }
      if (typeof color3 === "number") {
        color3 = numberInputToObject(color3);
      }
      this.originalInput = color3;
      var rgb = inputToRGB(color3);
      this.originalInput = color3;
      this.r = rgb.r;
      this.g = rgb.g;
      this.b = rgb.b;
      this.a = rgb.a;
      this.roundA = Math.round(100 * this.a) / 100;
      this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;
      this.gradientType = opts.gradientType;
      if (this.r < 1) {
        this.r = Math.round(this.r);
      }
      if (this.g < 1) {
        this.g = Math.round(this.g);
      }
      if (this.b < 1) {
        this.b = Math.round(this.b);
      }
      this.isValid = rgb.ok;
    }
    TinyColor2.prototype.isDark = function() {
      return this.getBrightness() < 128;
    };
    TinyColor2.prototype.isLight = function() {
      return !this.isDark();
    };
    TinyColor2.prototype.getBrightness = function() {
      var rgb = this.toRgb();
      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
    };
    TinyColor2.prototype.getLuminance = function() {
      var rgb = this.toRgb();
      var R;
      var G;
      var B;
      var RsRGB = rgb.r / 255;
      var GsRGB = rgb.g / 255;
      var BsRGB = rgb.b / 255;
      if (RsRGB <= 0.03928) {
        R = RsRGB / 12.92;
      } else {
        R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
      }
      if (GsRGB <= 0.03928) {
        G = GsRGB / 12.92;
      } else {
        G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
      }
      if (BsRGB <= 0.03928) {
        B = BsRGB / 12.92;
      } else {
        B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
      }
      return 0.2126 * R + 0.7152 * G + 0.0722 * B;
    };
    TinyColor2.prototype.getAlpha = function() {
      return this.a;
    };
    TinyColor2.prototype.setAlpha = function(alpha2) {
      this.a = boundAlpha(alpha2);
      this.roundA = Math.round(100 * this.a) / 100;
      return this;
    };
    TinyColor2.prototype.toHsv = function() {
      var hsv = rgbToHsv(this.r, this.g, this.b);
      return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };
    };
    TinyColor2.prototype.toHsvString = function() {
      var hsv = rgbToHsv(this.r, this.g, this.b);
      var h = Math.round(hsv.h * 360);
      var s = Math.round(hsv.s * 100);
      var v = Math.round(hsv.v * 100);
      return this.a === 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this.roundA + ")";
    };
    TinyColor2.prototype.toHsl = function() {
      var hsl = rgbToHsl(this.r, this.g, this.b);
      return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };
    };
    TinyColor2.prototype.toHslString = function() {
      var hsl = rgbToHsl(this.r, this.g, this.b);
      var h = Math.round(hsl.h * 360);
      var s = Math.round(hsl.s * 100);
      var l = Math.round(hsl.l * 100);
      return this.a === 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this.roundA + ")";
    };
    TinyColor2.prototype.toHex = function(allow3Char) {
      if (allow3Char === void 0) {
        allow3Char = false;
      }
      return rgbToHex(this.r, this.g, this.b, allow3Char);
    };
    TinyColor2.prototype.toHexString = function(allow3Char) {
      if (allow3Char === void 0) {
        allow3Char = false;
      }
      return "#" + this.toHex(allow3Char);
    };
    TinyColor2.prototype.toHex8 = function(allow4Char) {
      if (allow4Char === void 0) {
        allow4Char = false;
      }
      return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);
    };
    TinyColor2.prototype.toHex8String = function(allow4Char) {
      if (allow4Char === void 0) {
        allow4Char = false;
      }
      return "#" + this.toHex8(allow4Char);
    };
    TinyColor2.prototype.toRgb = function() {
      return {
        r: Math.round(this.r),
        g: Math.round(this.g),
        b: Math.round(this.b),
        a: this.a
      };
    };
    TinyColor2.prototype.toRgbString = function() {
      var r = Math.round(this.r);
      var g = Math.round(this.g);
      var b2 = Math.round(this.b);
      return this.a === 1 ? "rgb(" + r + ", " + g + ", " + b2 + ")" : "rgba(" + r + ", " + g + ", " + b2 + ", " + this.roundA + ")";
    };
    TinyColor2.prototype.toPercentageRgb = function() {
      var fmt = function(x) {
        return Math.round(bound01(x, 255) * 100) + "%";
      };
      return {
        r: fmt(this.r),
        g: fmt(this.g),
        b: fmt(this.b),
        a: this.a
      };
    };
    TinyColor2.prototype.toPercentageRgbString = function() {
      var rnd = function(x) {
        return Math.round(bound01(x, 255) * 100);
      };
      return this.a === 1 ? "rgb(" + rnd(this.r) + "%, " + rnd(this.g) + "%, " + rnd(this.b) + "%)" : "rgba(" + rnd(this.r) + "%, " + rnd(this.g) + "%, " + rnd(this.b) + "%, " + this.roundA + ")";
    };
    TinyColor2.prototype.toName = function() {
      if (this.a === 0) {
        return "transparent";
      }
      if (this.a < 1) {
        return false;
      }
      var hex2 = "#" + rgbToHex(this.r, this.g, this.b, false);
      for (var _i = 0, _a = Object.entries(names); _i < _a.length; _i++) {
        var _b = _a[_i], key = _b[0], value = _b[1];
        if (hex2 === value) {
          return key;
        }
      }
      return false;
    };
    TinyColor2.prototype.toString = function(format) {
      var formatSet = Boolean(format);
      format = format !== null && format !== void 0 ? format : this.format;
      var formattedString = false;
      var hasAlpha = this.a < 1 && this.a >= 0;
      var needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith("hex") || format === "name");
      if (needsAlphaFormat) {
        if (format === "name" && this.a === 0) {
          return this.toName();
        }
        return this.toRgbString();
      }
      if (format === "rgb") {
        formattedString = this.toRgbString();
      }
      if (format === "prgb") {
        formattedString = this.toPercentageRgbString();
      }
      if (format === "hex" || format === "hex6") {
        formattedString = this.toHexString();
      }
      if (format === "hex3") {
        formattedString = this.toHexString(true);
      }
      if (format === "hex4") {
        formattedString = this.toHex8String(true);
      }
      if (format === "hex8") {
        formattedString = this.toHex8String();
      }
      if (format === "name") {
        formattedString = this.toName();
      }
      if (format === "hsl") {
        formattedString = this.toHslString();
      }
      if (format === "hsv") {
        formattedString = this.toHsvString();
      }
      return formattedString || this.toHexString();
    };
    TinyColor2.prototype.toNumber = function() {
      return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
    };
    TinyColor2.prototype.clone = function() {
      return new TinyColor2(this.toString());
    };
    TinyColor2.prototype.lighten = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.l += amount / 100;
      hsl.l = clamp01(hsl.l);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.brighten = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var rgb = this.toRgb();
      rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
      rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
      rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
      return new TinyColor2(rgb);
    };
    TinyColor2.prototype.darken = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.l -= amount / 100;
      hsl.l = clamp01(hsl.l);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.tint = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      return this.mix("white", amount);
    };
    TinyColor2.prototype.shade = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      return this.mix("black", amount);
    };
    TinyColor2.prototype.desaturate = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.s -= amount / 100;
      hsl.s = clamp01(hsl.s);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.saturate = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.s += amount / 100;
      hsl.s = clamp01(hsl.s);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.greyscale = function() {
      return this.desaturate(100);
    };
    TinyColor2.prototype.spin = function(amount) {
      var hsl = this.toHsl();
      var hue = (hsl.h + amount) % 360;
      hsl.h = hue < 0 ? 360 + hue : hue;
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.mix = function(color3, amount) {
      if (amount === void 0) {
        amount = 50;
      }
      var rgb1 = this.toRgb();
      var rgb2 = new TinyColor2(color3).toRgb();
      var p = amount / 100;
      var rgba2 = {
        r: (rgb2.r - rgb1.r) * p + rgb1.r,
        g: (rgb2.g - rgb1.g) * p + rgb1.g,
        b: (rgb2.b - rgb1.b) * p + rgb1.b,
        a: (rgb2.a - rgb1.a) * p + rgb1.a
      };
      return new TinyColor2(rgba2);
    };
    TinyColor2.prototype.analogous = function(results, slices) {
      if (results === void 0) {
        results = 6;
      }
      if (slices === void 0) {
        slices = 30;
      }
      var hsl = this.toHsl();
      var part = 360 / slices;
      var ret = [this];
      for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
        hsl.h = (hsl.h + part) % 360;
        ret.push(new TinyColor2(hsl));
      }
      return ret;
    };
    TinyColor2.prototype.complement = function() {
      var hsl = this.toHsl();
      hsl.h = (hsl.h + 180) % 360;
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.monochromatic = function(results) {
      if (results === void 0) {
        results = 6;
      }
      var hsv = this.toHsv();
      var h = hsv.h;
      var s = hsv.s;
      var v = hsv.v;
      var res = [];
      var modification = 1 / results;
      while (results--) {
        res.push(new TinyColor2({ h, s, v }));
        v = (v + modification) % 1;
      }
      return res;
    };
    TinyColor2.prototype.splitcomplement = function() {
      var hsl = this.toHsl();
      var h = hsl.h;
      return [
        this,
        new TinyColor2({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),
        new TinyColor2({ h: (h + 216) % 360, s: hsl.s, l: hsl.l })
      ];
    };
    TinyColor2.prototype.onBackground = function(background2) {
      var fg = this.toRgb();
      var bg = new TinyColor2(background2).toRgb();
      return new TinyColor2({
        r: bg.r + (fg.r - bg.r) * fg.a,
        g: bg.g + (fg.g - bg.g) * fg.a,
        b: bg.b + (fg.b - bg.b) * fg.a
      });
    };
    TinyColor2.prototype.triad = function() {
      return this.polyad(3);
    };
    TinyColor2.prototype.tetrad = function() {
      return this.polyad(4);
    };
    TinyColor2.prototype.polyad = function(n) {
      var hsl = this.toHsl();
      var h = hsl.h;
      var result = [this];
      var increment = 360 / n;
      for (var i = 1; i < n; i++) {
        result.push(new TinyColor2({ h: (h + i * increment) % 360, s: hsl.s, l: hsl.l }));
      }
      return result;
    };
    TinyColor2.prototype.equals = function(color3) {
      return this.toRgbString() === new TinyColor2(color3).toRgbString();
    };
    return TinyColor2;
  }();

  // node_modules/@ctrl/tinycolor/dist/module/random.js
  function random(options) {
    if (options === void 0) {
      options = {};
    }
    if (options.count !== void 0 && options.count !== null) {
      var totalColors = options.count;
      var colors2 = [];
      options.count = void 0;
      while (totalColors > colors2.length) {
        options.count = null;
        if (options.seed) {
          options.seed += 1;
        }
        colors2.push(random(options));
      }
      options.count = totalColors;
      return colors2;
    }
    var h = pickHue(options.hue, options.seed);
    var s = pickSaturation(h, options);
    var v = pickBrightness(h, s, options);
    var res = { h, s, v };
    if (options.alpha !== void 0) {
      res.a = options.alpha;
    }
    return new TinyColor(res);
  }
  function pickHue(hue, seed) {
    var hueRange = getHueRange(hue);
    var res = randomWithin(hueRange, seed);
    if (res < 0) {
      res = 360 + res;
    }
    return res;
  }
  function pickSaturation(hue, options) {
    if (options.hue === "monochrome") {
      return 0;
    }
    if (options.luminosity === "random") {
      return randomWithin([0, 100], options.seed);
    }
    var saturationRange = getColorInfo(hue).saturationRange;
    var sMin = saturationRange[0];
    var sMax = saturationRange[1];
    switch (options.luminosity) {
      case "bright":
        sMin = 55;
        break;
      case "dark":
        sMin = sMax - 10;
        break;
      case "light":
        sMax = 55;
        break;
      default:
        break;
    }
    return randomWithin([sMin, sMax], options.seed);
  }
  function pickBrightness(H, S, options) {
    var bMin = getMinimumBrightness(H, S);
    var bMax = 100;
    switch (options.luminosity) {
      case "dark":
        bMax = bMin + 20;
        break;
      case "light":
        bMin = (bMax + bMin) / 2;
        break;
      case "random":
        bMin = 0;
        bMax = 100;
        break;
      default:
        break;
    }
    return randomWithin([bMin, bMax], options.seed);
  }
  function getMinimumBrightness(H, S) {
    var lowerBounds = getColorInfo(H).lowerBounds;
    for (var i = 0; i < lowerBounds.length - 1; i++) {
      var s1 = lowerBounds[i][0];
      var v1 = lowerBounds[i][1];
      var s2 = lowerBounds[i + 1][0];
      var v2 = lowerBounds[i + 1][1];
      if (S >= s1 && S <= s2) {
        var m = (v2 - v1) / (s2 - s1);
        var b2 = v1 - m * s1;
        return m * S + b2;
      }
    }
    return 0;
  }
  function getHueRange(colorInput) {
    var num = parseInt(colorInput, 10);
    if (!Number.isNaN(num) && num < 360 && num > 0) {
      return [num, num];
    }
    if (typeof colorInput === "string") {
      var namedColor = bounds.find(function(n) {
        return n.name === colorInput;
      });
      if (namedColor) {
        var color3 = defineColor(namedColor);
        if (color3.hueRange) {
          return color3.hueRange;
        }
      }
      var parsed = new TinyColor(colorInput);
      if (parsed.isValid) {
        var hue = parsed.toHsv().h;
        return [hue, hue];
      }
    }
    return [0, 360];
  }
  function getColorInfo(hue) {
    if (hue >= 334 && hue <= 360) {
      hue -= 360;
    }
    for (var _i = 0, bounds_1 = bounds; _i < bounds_1.length; _i++) {
      var bound = bounds_1[_i];
      var color3 = defineColor(bound);
      if (color3.hueRange && hue >= color3.hueRange[0] && hue <= color3.hueRange[1]) {
        return color3;
      }
    }
    throw Error("Color not found");
  }
  function randomWithin(range, seed) {
    if (seed === void 0) {
      return Math.floor(range[0] + Math.random() * (range[1] + 1 - range[0]));
    }
    var max = range[1] || 1;
    var min = range[0] || 0;
    seed = (seed * 9301 + 49297) % 233280;
    var rnd = seed / 233280;
    return Math.floor(min + rnd * (max - min));
  }
  function defineColor(bound) {
    var sMin = bound.lowerBounds[0][0];
    var sMax = bound.lowerBounds[bound.lowerBounds.length - 1][0];
    var bMin = bound.lowerBounds[bound.lowerBounds.length - 1][1];
    var bMax = bound.lowerBounds[0][1];
    return {
      name: bound.name,
      hueRange: bound.hueRange,
      lowerBounds: bound.lowerBounds,
      saturationRange: [sMin, sMax],
      brightnessRange: [bMin, bMax]
    };
  }
  var bounds = [
    {
      name: "monochrome",
      hueRange: null,
      lowerBounds: [
        [0, 0],
        [100, 0]
      ]
    },
    {
      name: "red",
      hueRange: [-26, 18],
      lowerBounds: [
        [20, 100],
        [30, 92],
        [40, 89],
        [50, 85],
        [60, 78],
        [70, 70],
        [80, 60],
        [90, 55],
        [100, 50]
      ]
    },
    {
      name: "orange",
      hueRange: [19, 46],
      lowerBounds: [
        [20, 100],
        [30, 93],
        [40, 88],
        [50, 86],
        [60, 85],
        [70, 70],
        [100, 70]
      ]
    },
    {
      name: "yellow",
      hueRange: [47, 62],
      lowerBounds: [
        [25, 100],
        [40, 94],
        [50, 89],
        [60, 86],
        [70, 84],
        [80, 82],
        [90, 80],
        [100, 75]
      ]
    },
    {
      name: "green",
      hueRange: [63, 178],
      lowerBounds: [
        [30, 100],
        [40, 90],
        [50, 85],
        [60, 81],
        [70, 74],
        [80, 64],
        [90, 50],
        [100, 40]
      ]
    },
    {
      name: "blue",
      hueRange: [179, 257],
      lowerBounds: [
        [20, 100],
        [30, 86],
        [40, 80],
        [50, 74],
        [60, 60],
        [70, 52],
        [80, 44],
        [90, 39],
        [100, 35]
      ]
    },
    {
      name: "purple",
      hueRange: [258, 282],
      lowerBounds: [
        [20, 100],
        [30, 87],
        [40, 79],
        [50, 70],
        [60, 65],
        [70, 59],
        [80, 52],
        [90, 45],
        [100, 42]
      ]
    },
    {
      name: "pink",
      hueRange: [283, 334],
      lowerBounds: [
        [20, 100],
        [30, 90],
        [40, 86],
        [60, 84],
        [80, 80],
        [90, 75],
        [100, 73]
      ]
    }
  ];

  // node_modules/@chakra-ui/theme-tools/dist/chakra-ui-theme-tools.esm.js
  var getColor = function getColor2(theme3, color3, fallback) {
    var hex2 = memoizedGet(theme3, "colors." + color3, color3);
    var _TinyColor = new TinyColor(hex2), isValid = _TinyColor.isValid;
    return isValid ? hex2 : fallback;
  };
  var tone = function tone2(color3) {
    return function(theme3) {
      var hex2 = getColor(theme3, color3);
      var isDark3 = new TinyColor(hex2).isDark();
      return isDark3 ? "dark" : "light";
    };
  };
  var isDark = function isDark2(color3) {
    return function(theme3) {
      return tone(color3)(theme3) === "dark";
    };
  };
  var transparentize = function transparentize2(color3, opacity) {
    return function(theme3) {
      var raw = getColor(theme3, color3);
      return new TinyColor(raw).setAlpha(opacity).toRgbString();
    };
  };
  function generateStripe(size2, color3) {
    if (size2 === void 0) {
      size2 = "1rem";
    }
    if (color3 === void 0) {
      color3 = "rgba(255, 255, 255, 0.15)";
    }
    return {
      backgroundImage: "linear-gradient(\n    45deg,\n    " + color3 + " 25%,\n    transparent 25%,\n    transparent 50%,\n    " + color3 + " 50%,\n    " + color3 + " 75%,\n    transparent 75%,\n    transparent\n  )",
      backgroundSize: size2 + " " + size2
    };
  }
  function randomColor(opts) {
    var fallback = random().toHexString();
    if (!opts || isEmptyObject(opts)) {
      return fallback;
    }
    if (opts.string && opts.colors) {
      return randomColorFromList(opts.string, opts.colors);
    }
    if (opts.string && !opts.colors) {
      return randomColorFromString(opts.string);
    }
    if (opts.colors && !opts.string) {
      return randomFromList(opts.colors);
    }
    return fallback;
  }
  function randomColorFromString(str) {
    var hash2 = 0;
    if (str.length === 0)
      return hash2.toString();
    for (var i = 0; i < str.length; i += 1) {
      hash2 = str.charCodeAt(i) + ((hash2 << 5) - hash2);
      hash2 = hash2 & hash2;
    }
    var color3 = "#";
    for (var j = 0; j < 3; j += 1) {
      var value = hash2 >> j * 8 & 255;
      color3 += ("00" + value.toString(16)).substr(-2);
    }
    return color3;
  }
  function randomColorFromList(str, list3) {
    var index = 0;
    if (str.length === 0)
      return list3[0];
    for (var i = 0; i < str.length; i += 1) {
      index = str.charCodeAt(i) + ((index << 5) - index);
      index = index & index;
    }
    index = (index % list3.length + list3.length) % list3.length;
    return list3[index];
  }
  function randomFromList(list3) {
    return list3[Math.floor(Math.random() * list3.length)];
  }
  function mode(light, dark) {
    return function(props) {
      return props.colorMode === "dark" ? dark : light;
    };
  }
  function orient(options) {
    var orientation = options.orientation, vertical = options.vertical, horizontal = options.horizontal;
    if (!orientation)
      return {};
    return orientation === "vertical" ? vertical : horizontal;
  }
  function _extends8() {
    _extends8 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends8.apply(this, arguments);
  }
  var createBreakpoints = function createBreakpoints2(config2) {
    warn({
      condition: true,
      message: ["[chakra-ui]: createBreakpoints(...) will be deprecated pretty soon", "simply pass the breakpoints as an object. Remove the createBreakpoint(..) call"].join("")
    });
    return _extends8({
      base: "0em"
    }, config2);
  };
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    return Constructor;
  }
  var Anatomy = /* @__PURE__ */ function() {
    function Anatomy2(name) {
      var _this = this;
      this.map = {};
      this.called = false;
      this.assert = function() {
        if (!_this.called) {
          _this.called = true;
          return;
        }
        throw new Error("[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?");
      };
      this.parts = function() {
        _this.assert();
        for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
          values[_key] = arguments[_key];
        }
        for (var _i = 0, _values = values; _i < _values.length; _i++) {
          var part = _values[_i];
          _this.map[part] = _this.toPart(part);
        }
        return _this;
      };
      this.extend = function() {
        for (var _len2 = arguments.length, parts = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          parts[_key2] = arguments[_key2];
        }
        for (var _i2 = 0, _parts = parts; _i2 < _parts.length; _i2++) {
          var part = _parts[_i2];
          if (part in _this.map)
            continue;
          _this.map[part] = _this.toPart(part);
        }
        return _this;
      };
      this.toPart = function(part) {
        var el = ["container", "root"].includes(part != null ? part : "") ? [_this.name] : [_this.name, part];
        var attr = el.filter(Boolean).join("__");
        var className = "chakra-" + attr;
        var partObj = {
          className,
          selector: "." + className,
          toString: function toString() {
            return part;
          }
        };
        return partObj;
      };
      this.__type = {};
    }
    _createClass(Anatomy2, [{
      key: "selectors",
      get: function get4() {
        var value = fromEntries(Object.entries(this.map).map(function(_ref2) {
          var key = _ref2[0], part = _ref2[1];
          return [key, part.selector];
        }));
        return value;
      }
    }, {
      key: "classNames",
      get: function get4() {
        var value = fromEntries(Object.entries(this.map).map(function(_ref2) {
          var key = _ref2[0], part = _ref2[1];
          return [key, part.className];
        }));
        return value;
      }
    }, {
      key: "keys",
      get: function get4() {
        return Object.keys(this.map);
      }
    }]);
    return Anatomy2;
  }();
  function anatomy(name) {
    return new Anatomy(name);
  }
  function toRef(operand) {
    if (isObject(operand) && operand.reference) {
      return operand.reference;
    }
    return String(operand);
  }
  var toExpr = function toExpr2(operator) {
    for (var _len = arguments.length, operands = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      operands[_key - 1] = arguments[_key];
    }
    return operands.map(toRef).join(" " + operator + " ").replace(/calc/g, "");
  };
  var _add2 = function add3() {
    for (var _len2 = arguments.length, operands = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      operands[_key2] = arguments[_key2];
    }
    return "calc(" + toExpr.apply(void 0, ["+"].concat(operands)) + ")";
  };
  var _subtract2 = function subtract3() {
    for (var _len3 = arguments.length, operands = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      operands[_key3] = arguments[_key3];
    }
    return "calc(" + toExpr.apply(void 0, ["-"].concat(operands)) + ")";
  };
  var _multiply2 = function multiply2() {
    for (var _len4 = arguments.length, operands = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      operands[_key4] = arguments[_key4];
    }
    return "calc(" + toExpr.apply(void 0, ["*"].concat(operands)) + ")";
  };
  var _divide2 = function divide2() {
    for (var _len5 = arguments.length, operands = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      operands[_key5] = arguments[_key5];
    }
    return "calc(" + toExpr.apply(void 0, ["/"].concat(operands)) + ")";
  };
  var _negate2 = function negate2(x) {
    var value = toRef(x);
    if (value != null && !Number.isNaN(parseFloat(value))) {
      return String(value).startsWith("-") ? String(value).slice(1) : "-" + value;
    }
    return _multiply2(value, -1);
  };
  var calc2 = Object.assign(function(x) {
    return {
      add: function add4() {
        for (var _len6 = arguments.length, operands = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          operands[_key6] = arguments[_key6];
        }
        return calc2(_add2.apply(void 0, [x].concat(operands)));
      },
      subtract: function subtract4() {
        for (var _len7 = arguments.length, operands = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          operands[_key7] = arguments[_key7];
        }
        return calc2(_subtract2.apply(void 0, [x].concat(operands)));
      },
      multiply: function multiply3() {
        for (var _len8 = arguments.length, operands = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
          operands[_key8] = arguments[_key8];
        }
        return calc2(_multiply2.apply(void 0, [x].concat(operands)));
      },
      divide: function divide3() {
        for (var _len9 = arguments.length, operands = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
          operands[_key9] = arguments[_key9];
        }
        return calc2(_divide2.apply(void 0, [x].concat(operands)));
      },
      negate: function negate3() {
        return calc2(_negate2(x));
      },
      toString: function toString() {
        return x.toString();
      }
    };
  }, {
    add: _add2,
    subtract: _subtract2,
    multiply: _multiply2,
    divide: _divide2,
    negate: _negate2
  });
  function isDecimal(value) {
    return !Number.isInteger(parseFloat(value.toString()));
  }
  function replaceWhiteSpace2(value, replaceValue) {
    if (replaceValue === void 0) {
      replaceValue = "-";
    }
    return value.replace(/\s+/g, replaceValue);
  }
  function escape2(value) {
    var valueStr = replaceWhiteSpace2(value.toString());
    if (valueStr.includes("\\."))
      return value;
    return isDecimal(value) ? valueStr.replace(".", "\\.") : value;
  }
  function addPrefix2(value, prefix2) {
    if (prefix2 === void 0) {
      prefix2 = "";
    }
    return [prefix2, escape2(value)].filter(Boolean).join("-");
  }
  function toVarRef(name, fallback) {
    return "var(" + escape2(name) + (fallback ? ", " + fallback : "") + ")";
  }
  function toVar(value, prefix2) {
    if (prefix2 === void 0) {
      prefix2 = "";
    }
    return "--" + addPrefix2(value, prefix2);
  }
  function cssVar2(name, options) {
    var cssVariable = toVar(name, options == null ? void 0 : options.prefix);
    return {
      variable: cssVariable,
      reference: toVarRef(cssVariable, getFallback(options == null ? void 0 : options.fallback))
    };
  }
  function getFallback(fallback) {
    if (typeof fallback === "string")
      return fallback;
    return fallback == null ? void 0 : fallback.reference;
  }

  // node_modules/@chakra-ui/anatomy/dist/chakra-ui-anatomy.esm.js
  var accordionAnatomy = anatomy("accordion").parts("root", "container", "button", "panel").extend("icon");
  var alertAnatomy = anatomy("alert").parts("title", "description", "container").extend("icon");
  var avatarAnatomy = anatomy("avatar").parts("label", "badge", "container").extend("excessLabel", "group");
  var breadcrumbAnatomy = anatomy("breadcrumb").parts("link", "item", "container").extend("separator");
  var buttonAnatomy = anatomy("button").parts();
  var checkboxAnatomy = anatomy("checkbox").parts("control", "icon", "container").extend("label");
  var circularProgressAnatomy = anatomy("progress").parts("track", "filledTrack").extend("label");
  var drawerAnatomy = anatomy("drawer").parts("overlay", "dialogContainer", "dialog").extend("header", "closeButton", "body", "footer");
  var editableAnatomy = anatomy("editable").parts("preview", "input", "textarea");
  var formAnatomy = anatomy("form").parts("container", "requiredIndicator", "helperText");
  var formErrorAnatomy = anatomy("formError").parts("text", "icon");
  var inputAnatomy = anatomy("input").parts("addon", "field", "element");
  var listAnatomy = anatomy("list").parts("container", "item", "icon");
  var menuAnatomy = anatomy("menu").parts("button", "list", "item").extend("groupTitle", "command", "divider");
  var modalAnatomy = anatomy("modal").parts("overlay", "dialogContainer", "dialog").extend("header", "closeButton", "body", "footer");
  var numberInputAnatomy = anatomy("numberinput").parts("root", "field", "stepperGroup", "stepper");
  var pinInputAnatomy = anatomy("pininput").parts("field");
  var popoverAnatomy = anatomy("popover").parts("content", "header", "body", "footer").extend("popper", "arrow", "closeButton");
  var progressAnatomy = anatomy("progress").parts("label", "filledTrack", "track");
  var radioAnatomy = anatomy("radio").parts("container", "control", "label");
  var selectAnatomy = anatomy("select").parts("field", "icon");
  var sliderAnatomy = anatomy("slider").parts("container", "track", "thumb", "filledTrack");
  var statAnatomy = anatomy("stat").parts("container", "label", "helpText", "number", "icon");
  var switchAnatomy = anatomy("switch").parts("container", "track", "thumb");
  var tableAnatomy = anatomy("table").parts("table", "thead", "tbody", "tr", "th", "td", "tfoot", "caption");
  var tabsAnatomy = anatomy("tabs").parts("root", "tab", "tablist", "tabpanel", "tabpanels", "indicator");
  var tagAnatomy = anatomy("tag").parts("container", "label", "closeButton");

  // node_modules/@chakra-ui/theme/foundations/typography/dist/chakra-ui-theme-foundations-typography.esm.js
  var typography2 = {
    letterSpacings: {
      tighter: "-0.05em",
      tight: "-0.025em",
      normal: "0",
      wide: "0.025em",
      wider: "0.05em",
      widest: "0.1em"
    },
    lineHeights: {
      normal: "normal",
      none: 1,
      shorter: 1.25,
      "short": 1.375,
      base: 1.5,
      tall: 1.625,
      taller: "2",
      "3": ".75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem"
    },
    fontWeights: {
      hairline: 100,
      thin: 200,
      light: 300,
      normal: 400,
      medium: 500,
      semibold: 600,
      bold: 700,
      extrabold: 800,
      black: 900
    },
    fonts: {
      heading: '-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
      body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
      mono: 'SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace'
    },
    fontSizes: {
      xs: "0.75rem",
      sm: "0.875rem",
      md: "1rem",
      lg: "1.125rem",
      xl: "1.25rem",
      "2xl": "1.5rem",
      "3xl": "1.875rem",
      "4xl": "2.25rem",
      "5xl": "3rem",
      "6xl": "3.75rem",
      "7xl": "4.5rem",
      "8xl": "6rem",
      "9xl": "8rem"
    }
  };

  // node_modules/@chakra-ui/theme/dist/index-7ef32ef8.esm.js
  var baseStyleContainer$3 = {
    borderTopWidth: "1px",
    borderColor: "inherit",
    _last: {
      borderBottomWidth: "1px"
    }
  };
  var baseStyleButton$1 = {
    transitionProperty: "common",
    transitionDuration: "normal",
    fontSize: "1rem",
    _focus: {
      boxShadow: "outline"
    },
    _hover: {
      bg: "blackAlpha.50"
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    },
    px: 4,
    py: 2
  };
  var baseStylePanel = {
    pt: 2,
    px: 4,
    pb: 5
  };
  var baseStyleIcon$5 = {
    fontSize: "1.25em"
  };
  var baseStyle$D = {
    root: {},
    container: baseStyleContainer$3,
    button: baseStyleButton$1,
    panel: baseStylePanel,
    icon: baseStyleIcon$5
  };
  var accordion = {
    parts: accordionAnatomy.keys,
    baseStyle: baseStyle$D
  };
  var baseStyle$C = {
    container: {
      px: 4,
      py: 3
    },
    title: {
      fontWeight: "bold",
      lineHeight: 6,
      marginEnd: 2
    },
    description: {
      lineHeight: 6
    },
    icon: {
      flexShrink: 0,
      marginEnd: 3,
      w: 5,
      h: 6
    }
  };
  function getBg(props) {
    var theme3 = props.theme, c2 = props.colorScheme;
    var lightBg = getColor(theme3, c2 + ".100", c2);
    var darkBg = transparentize(c2 + ".200", 0.16)(theme3);
    return mode(lightBg, darkBg)(props);
  }
  var variantSubtle$1 = function variantSubtle(props) {
    var c2 = props.colorScheme;
    return {
      container: {
        bg: getBg(props)
      },
      icon: {
        color: mode(c2 + ".500", c2 + ".200")(props)
      }
    };
  };
  var variantLeftAccent = function variantLeftAccent2(props) {
    var c2 = props.colorScheme;
    return {
      container: {
        paddingStart: 3,
        borderStartWidth: "4px",
        borderStartColor: mode(c2 + ".500", c2 + ".200")(props),
        bg: getBg(props)
      },
      icon: {
        color: mode(c2 + ".500", c2 + ".200")(props)
      }
    };
  };
  var variantTopAccent = function variantTopAccent2(props) {
    var c2 = props.colorScheme;
    return {
      container: {
        pt: 2,
        borderTopWidth: "4px",
        borderTopColor: mode(c2 + ".500", c2 + ".200")(props),
        bg: getBg(props)
      },
      icon: {
        color: mode(c2 + ".500", c2 + ".200")(props)
      }
    };
  };
  var variantSolid$3 = function variantSolid(props) {
    var c2 = props.colorScheme;
    return {
      container: {
        bg: mode(c2 + ".500", c2 + ".200")(props),
        color: mode("white", "gray.900")(props)
      }
    };
  };
  var variants$b = {
    subtle: variantSubtle$1,
    "left-accent": variantLeftAccent,
    "top-accent": variantTopAccent,
    solid: variantSolid$3
  };
  var defaultProps$n = {
    variant: "subtle",
    colorScheme: "blue"
  };
  var alert = {
    parts: alertAnatomy.keys,
    baseStyle: baseStyle$C,
    variants: variants$b,
    defaultProps: defaultProps$n
  };
  var baseStyleBadge = function baseStyleBadge2(props) {
    return {
      transform: "translate(25%, 25%)",
      borderRadius: "full",
      border: "0.2em solid",
      borderColor: mode("white", "gray.800")(props)
    };
  };
  var baseStyleExcessLabel = function baseStyleExcessLabel2(props) {
    return {
      bg: mode("gray.200", "whiteAlpha.400")(props)
    };
  };
  var baseStyleContainer$2 = function baseStyleContainer(props) {
    var name = props.name, theme3 = props.theme;
    var bg = name ? randomColor({
      string: name
    }) : "gray.400";
    var isBgDark = isDark(bg)(theme3);
    var color3 = "white";
    if (!isBgDark)
      color3 = "gray.800";
    var borderColor = mode("white", "gray.800")(props);
    return {
      bg,
      color: color3,
      borderColor,
      verticalAlign: "top"
    };
  };
  var baseStyle$B = function baseStyle(props) {
    return {
      badge: baseStyleBadge(props),
      excessLabel: baseStyleExcessLabel(props),
      container: baseStyleContainer$2(props)
    };
  };
  function getSize$3(size2) {
    var themeSize = sizes[size2];
    return {
      container: {
        width: size2,
        height: size2,
        fontSize: "calc(" + (themeSize != null ? themeSize : size2) + " / 2.5)"
      },
      excessLabel: {
        width: size2,
        height: size2
      },
      label: {
        fontSize: "calc(" + (themeSize != null ? themeSize : size2) + " / 2.5)",
        lineHeight: size2 !== "100%" ? themeSize != null ? themeSize : size2 : void 0
      }
    };
  }
  var sizes$k = {
    "2xs": getSize$3("4"),
    xs: getSize$3("6"),
    sm: getSize$3("8"),
    md: getSize$3("12"),
    lg: getSize$3("16"),
    xl: getSize$3("24"),
    "2xl": getSize$3("32"),
    full: getSize$3("100%")
  };
  var defaultProps$m = {
    size: "md"
  };
  var avatar = {
    parts: avatarAnatomy.keys,
    baseStyle: baseStyle$B,
    sizes: sizes$k,
    defaultProps: defaultProps$m
  };
  var baseStyle$A = {
    px: 1,
    textTransform: "uppercase",
    fontSize: "xs",
    borderRadius: "sm",
    fontWeight: "bold"
  };
  var variantSolid$2 = function variantSolid2(props) {
    var c2 = props.colorScheme, theme3 = props.theme;
    var dark = transparentize(c2 + ".500", 0.6)(theme3);
    return {
      bg: mode(c2 + ".500", dark)(props),
      color: mode("white", "whiteAlpha.800")(props)
    };
  };
  var variantSubtle2 = function variantSubtle3(props) {
    var c2 = props.colorScheme, theme3 = props.theme;
    var darkBg = transparentize(c2 + ".200", 0.16)(theme3);
    return {
      bg: mode(c2 + ".100", darkBg)(props),
      color: mode(c2 + ".800", c2 + ".200")(props)
    };
  };
  var variantOutline$2 = function variantOutline(props) {
    var c2 = props.colorScheme, theme3 = props.theme;
    var darkColor = transparentize(c2 + ".200", 0.8)(theme3);
    var lightColor = getColor(theme3, c2 + ".500");
    var color3 = mode(lightColor, darkColor)(props);
    return {
      color: color3,
      boxShadow: "inset 0 0 0px 1px " + color3
    };
  };
  var variants$a = {
    solid: variantSolid$2,
    subtle: variantSubtle2,
    outline: variantOutline$2
  };
  var defaultProps$l = {
    variant: "subtle",
    colorScheme: "gray"
  };
  var Badge = {
    baseStyle: baseStyle$A,
    variants: variants$a,
    defaultProps: defaultProps$l
  };
  var baseStyleLink = {
    transitionProperty: "common",
    transitionDuration: "fast",
    transitionTimingFunction: "ease-out",
    cursor: "pointer",
    textDecoration: "none",
    outline: "none",
    color: "inherit",
    _hover: {
      textDecoration: "underline"
    },
    _focus: {
      boxShadow: "outline"
    }
  };
  var baseStyle$z = {
    link: baseStyleLink
  };
  var breadcrumb = {
    parts: breadcrumbAnatomy.keys,
    baseStyle: baseStyle$z
  };
  var baseStyle$y = {
    lineHeight: "1.2",
    borderRadius: "md",
    fontWeight: "semibold",
    transitionProperty: "common",
    transitionDuration: "normal",
    _focus: {
      boxShadow: "outline"
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed",
      boxShadow: "none"
    },
    _hover: {
      _disabled: {
        bg: "initial"
      }
    }
  };
  var variantGhost = function variantGhost2(props) {
    var c2 = props.colorScheme, theme3 = props.theme;
    if (c2 === "gray") {
      return {
        color: mode("inherit", "whiteAlpha.900")(props),
        _hover: {
          bg: mode("gray.100", "whiteAlpha.200")(props)
        },
        _active: {
          bg: mode("gray.200", "whiteAlpha.300")(props)
        }
      };
    }
    var darkHoverBg = transparentize(c2 + ".200", 0.12)(theme3);
    var darkActiveBg = transparentize(c2 + ".200", 0.24)(theme3);
    return {
      color: mode(c2 + ".600", c2 + ".200")(props),
      bg: "transparent",
      _hover: {
        bg: mode(c2 + ".50", darkHoverBg)(props)
      },
      _active: {
        bg: mode(c2 + ".100", darkActiveBg)(props)
      }
    };
  };
  var variantOutline$1 = function variantOutline2(props) {
    var c2 = props.colorScheme;
    var borderColor = mode("gray.200", "whiteAlpha.300")(props);
    return _extends7({
      border: "1px solid",
      borderColor: c2 === "gray" ? borderColor : "currentColor"
    }, variantGhost(props));
  };
  var accessibleColorMap = {
    yellow: {
      bg: "yellow.400",
      color: "black",
      hoverBg: "yellow.500",
      activeBg: "yellow.600"
    },
    cyan: {
      bg: "cyan.400",
      color: "black",
      hoverBg: "cyan.500",
      activeBg: "cyan.600"
    }
  };
  var variantSolid$1 = function variantSolid3(props) {
    var _accessibleColorMap$c;
    var c2 = props.colorScheme;
    if (c2 === "gray") {
      var _bg = mode("gray.100", "whiteAlpha.200")(props);
      return {
        bg: _bg,
        _hover: {
          bg: mode("gray.200", "whiteAlpha.300")(props),
          _disabled: {
            bg: _bg
          }
        },
        _active: {
          bg: mode("gray.300", "whiteAlpha.400")(props)
        }
      };
    }
    var _ref2 = (_accessibleColorMap$c = accessibleColorMap[c2]) != null ? _accessibleColorMap$c : {}, _ref$bg = _ref2.bg, bg = _ref$bg === void 0 ? c2 + ".500" : _ref$bg, _ref$color = _ref2.color, color3 = _ref$color === void 0 ? "white" : _ref$color, _ref$hoverBg = _ref2.hoverBg, hoverBg = _ref$hoverBg === void 0 ? c2 + ".600" : _ref$hoverBg, _ref$activeBg = _ref2.activeBg, activeBg = _ref$activeBg === void 0 ? c2 + ".700" : _ref$activeBg;
    var background2 = mode(bg, c2 + ".200")(props);
    return {
      bg: background2,
      color: mode(color3, "gray.800")(props),
      _hover: {
        bg: mode(hoverBg, c2 + ".300")(props),
        _disabled: {
          bg: background2
        }
      },
      _active: {
        bg: mode(activeBg, c2 + ".400")(props)
      }
    };
  };
  var variantLink = function variantLink2(props) {
    var c2 = props.colorScheme;
    return {
      padding: 0,
      height: "auto",
      lineHeight: "normal",
      verticalAlign: "baseline",
      color: mode(c2 + ".500", c2 + ".200")(props),
      _hover: {
        textDecoration: "underline",
        _disabled: {
          textDecoration: "none"
        }
      },
      _active: {
        color: mode(c2 + ".700", c2 + ".500")(props)
      }
    };
  };
  var variantUnstyled$2 = {
    bg: "none",
    color: "inherit",
    display: "inline",
    lineHeight: "inherit",
    m: 0,
    p: 0
  };
  var variants$9 = {
    ghost: variantGhost,
    outline: variantOutline$1,
    solid: variantSolid$1,
    link: variantLink,
    unstyled: variantUnstyled$2
  };
  var sizes$j = {
    lg: {
      h: 12,
      minW: 12,
      fontSize: "lg",
      px: 6
    },
    md: {
      h: 10,
      minW: 10,
      fontSize: "md",
      px: 4
    },
    sm: {
      h: 8,
      minW: 8,
      fontSize: "sm",
      px: 3
    },
    xs: {
      h: 6,
      minW: 6,
      fontSize: "xs",
      px: 2
    }
  };
  var defaultProps$k = {
    variant: "solid",
    size: "md",
    colorScheme: "gray"
  };
  var button = {
    baseStyle: baseStyle$y,
    variants: variants$9,
    sizes: sizes$j,
    defaultProps: defaultProps$k
  };
  var baseStyleControl$1 = function baseStyleControl(props) {
    var c2 = props.colorScheme;
    return {
      w: "100%",
      transitionProperty: "box-shadow",
      transitionDuration: "normal",
      border: "2px solid",
      borderRadius: "sm",
      borderColor: "inherit",
      color: "white",
      _checked: {
        bg: mode(c2 + ".500", c2 + ".200")(props),
        borderColor: mode(c2 + ".500", c2 + ".200")(props),
        color: mode("white", "gray.900")(props),
        _hover: {
          bg: mode(c2 + ".600", c2 + ".300")(props),
          borderColor: mode(c2 + ".600", c2 + ".300")(props)
        },
        _disabled: {
          borderColor: mode("gray.200", "transparent")(props),
          bg: mode("gray.200", "whiteAlpha.300")(props),
          color: mode("gray.500", "whiteAlpha.500")(props)
        }
      },
      _indeterminate: {
        bg: mode(c2 + ".500", c2 + ".200")(props),
        borderColor: mode(c2 + ".500", c2 + ".200")(props),
        color: mode("white", "gray.900")(props)
      },
      _disabled: {
        bg: mode("gray.100", "whiteAlpha.100")(props),
        borderColor: mode("gray.100", "transparent")(props)
      },
      _focus: {
        boxShadow: "outline"
      },
      _invalid: {
        borderColor: mode("red.500", "red.300")(props)
      }
    };
  };
  var baseStyleLabel$3 = {
    userSelect: "none",
    _disabled: {
      opacity: 0.4
    }
  };
  var baseStyleIcon$4 = {
    transitionProperty: "transform",
    transitionDuration: "normal"
  };
  var baseStyle$x = function baseStyle2(props) {
    return {
      icon: baseStyleIcon$4,
      control: baseStyleControl$1(props),
      label: baseStyleLabel$3
    };
  };
  var sizes$i = {
    sm: {
      control: {
        h: 3,
        w: 3
      },
      label: {
        fontSize: "sm"
      },
      icon: {
        fontSize: "0.45rem"
      }
    },
    md: {
      control: {
        w: 4,
        h: 4
      },
      label: {
        fontSize: "md"
      },
      icon: {
        fontSize: "0.625rem"
      }
    },
    lg: {
      control: {
        w: 5,
        h: 5
      },
      label: {
        fontSize: "lg"
      },
      icon: {
        fontSize: "0.625rem"
      }
    }
  };
  var defaultProps$j = {
    size: "md",
    colorScheme: "blue"
  };
  var Checkbox = {
    parts: checkboxAnatomy.keys,
    baseStyle: baseStyle$x,
    sizes: sizes$i,
    defaultProps: defaultProps$j
  };
  var _lg$1;
  var _md$1;
  var _sm$1;
  var $size$1 = cssVar2("close-button-size");
  var baseStyle$w = function baseStyle3(props) {
    var hoverBg = mode("blackAlpha.100", "whiteAlpha.100")(props);
    var activeBg = mode("blackAlpha.200", "whiteAlpha.200")(props);
    return {
      w: [$size$1.reference],
      h: [$size$1.reference],
      borderRadius: "md",
      transitionProperty: "common",
      transitionDuration: "normal",
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed",
        boxShadow: "none"
      },
      _hover: {
        bg: hoverBg
      },
      _active: {
        bg: activeBg
      },
      _focus: {
        boxShadow: "outline"
      }
    };
  };
  var sizes$h = {
    lg: (_lg$1 = {}, _lg$1[$size$1.variable] = "40px", _lg$1.fontSize = "16px", _lg$1),
    md: (_md$1 = {}, _md$1[$size$1.variable] = "32px", _md$1.fontSize = "12px", _md$1),
    sm: (_sm$1 = {}, _sm$1[$size$1.variable] = "24px", _sm$1.fontSize = "10px", _sm$1)
  };
  var defaultProps$i = {
    size: "md"
  };
  var closeButton = {
    baseStyle: baseStyle$w,
    sizes: sizes$h,
    defaultProps: defaultProps$i
  };
  var variants$8 = Badge.variants;
  var defaultProps$h = Badge.defaultProps;
  var baseStyle$v = {
    fontFamily: "mono",
    fontSize: "sm",
    px: "0.2em",
    borderRadius: "sm"
  };
  var code = {
    baseStyle: baseStyle$v,
    variants: variants$8,
    defaultProps: defaultProps$h
  };
  var baseStyle$u = {
    w: "100%",
    mx: "auto",
    maxW: "60ch",
    px: "1rem"
  };
  var container2 = {
    baseStyle: baseStyle$u
  };
  var baseStyle$t = {
    opacity: 0.6,
    borderColor: "inherit"
  };
  var variantSolid4 = {
    borderStyle: "solid"
  };
  var variantDashed = {
    borderStyle: "dashed"
  };
  var variants$7 = {
    solid: variantSolid4,
    dashed: variantDashed
  };
  var defaultProps$g = {
    variant: "solid"
  };
  var divider = {
    baseStyle: baseStyle$t,
    variants: variants$7,
    defaultProps: defaultProps$g
  };
  function getSize$2(value) {
    if (value === "full") {
      return {
        dialog: {
          maxW: "100vw",
          h: "100vh"
        }
      };
    }
    return {
      dialog: {
        maxW: value
      }
    };
  }
  var baseStyleOverlay$1 = {
    bg: "blackAlpha.600",
    zIndex: "overlay"
  };
  var baseStyleDialogContainer$1 = {
    display: "flex",
    zIndex: "modal",
    justifyContent: "center"
  };
  var baseStyleDialog$1 = function baseStyleDialog(props) {
    var isFullHeight = props.isFullHeight;
    return _extends7({}, isFullHeight && {
      height: "100vh"
    }, {
      zIndex: "modal",
      maxH: "100vh",
      bg: mode("white", "gray.700")(props),
      color: "inherit",
      boxShadow: mode("lg", "dark-lg")(props)
    });
  };
  var baseStyleHeader$2 = {
    px: 6,
    py: 4,
    fontSize: "xl",
    fontWeight: "semibold"
  };
  var baseStyleCloseButton$3 = {
    position: "absolute",
    top: 2,
    insetEnd: 3
  };
  var baseStyleBody$2 = {
    px: 6,
    py: 2,
    flex: 1,
    overflow: "auto"
  };
  var baseStyleFooter$2 = {
    px: 6,
    py: 4
  };
  var baseStyle$s = function baseStyle4(props) {
    return {
      overlay: baseStyleOverlay$1,
      dialogContainer: baseStyleDialogContainer$1,
      dialog: baseStyleDialog$1(props),
      header: baseStyleHeader$2,
      closeButton: baseStyleCloseButton$3,
      body: baseStyleBody$2,
      footer: baseStyleFooter$2
    };
  };
  var sizes$g = {
    xs: getSize$2("xs"),
    sm: getSize$2("md"),
    md: getSize$2("lg"),
    lg: getSize$2("2xl"),
    xl: getSize$2("4xl"),
    full: getSize$2("full")
  };
  var defaultProps$f = {
    size: "xs"
  };
  var drawer = {
    parts: drawerAnatomy.keys,
    baseStyle: baseStyle$s,
    sizes: sizes$g,
    defaultProps: defaultProps$f
  };
  var baseStylePreview = {
    borderRadius: "md",
    py: "3px",
    transitionProperty: "common",
    transitionDuration: "normal"
  };
  var baseStyleInput = {
    borderRadius: "md",
    py: "3px",
    transitionProperty: "common",
    transitionDuration: "normal",
    width: "full",
    _focus: {
      boxShadow: "outline"
    },
    _placeholder: {
      opacity: 0.6
    }
  };
  var baseStyleTextarea = {
    borderRadius: "md",
    py: "3px",
    transitionProperty: "common",
    transitionDuration: "normal",
    width: "full",
    _focus: {
      boxShadow: "outline"
    },
    _placeholder: {
      opacity: 0.6
    }
  };
  var baseStyle$r = {
    preview: baseStylePreview,
    input: baseStyleInput,
    textarea: baseStyleTextarea
  };
  var editable = {
    parts: editableAnatomy.keys,
    baseStyle: baseStyle$r
  };
  var baseStyleRequiredIndicator = function baseStyleRequiredIndicator2(props) {
    return {
      marginStart: 1,
      color: mode("red.500", "red.300")(props)
    };
  };
  var baseStyleHelperText = function baseStyleHelperText2(props) {
    return {
      mt: 2,
      color: mode("gray.500", "whiteAlpha.600")(props),
      lineHeight: "normal",
      fontSize: "sm"
    };
  };
  var baseStyle$q = function baseStyle5(props) {
    return {
      container: {
        width: "100%",
        position: "relative"
      },
      requiredIndicator: baseStyleRequiredIndicator(props),
      helperText: baseStyleHelperText(props)
    };
  };
  var form = {
    parts: formAnatomy.keys,
    baseStyle: baseStyle$q
  };
  var baseStyleText = function baseStyleText2(props) {
    return {
      color: mode("red.500", "red.300")(props),
      mt: 2,
      fontSize: "sm",
      lineHeight: "normal"
    };
  };
  var baseStyleIcon$3 = function baseStyleIcon(props) {
    return {
      marginEnd: "0.5em",
      color: mode("red.500", "red.300")(props)
    };
  };
  var baseStyle$p = function baseStyle6(props) {
    return {
      text: baseStyleText(props),
      icon: baseStyleIcon$3(props)
    };
  };
  var formError = {
    parts: formErrorAnatomy.keys,
    baseStyle: baseStyle$p
  };
  var baseStyle$o = {
    fontSize: "md",
    marginEnd: 3,
    mb: 2,
    fontWeight: "medium",
    transitionProperty: "common",
    transitionDuration: "normal",
    opacity: 1,
    _disabled: {
      opacity: 0.4
    }
  };
  var formLabel = {
    baseStyle: baseStyle$o
  };
  var baseStyle$n = {
    fontFamily: "heading",
    fontWeight: "bold"
  };
  var sizes$f = {
    "4xl": {
      fontSize: ["6xl", null, "7xl"],
      lineHeight: 1
    },
    "3xl": {
      fontSize: ["5xl", null, "6xl"],
      lineHeight: 1
    },
    "2xl": {
      fontSize: ["4xl", null, "5xl"],
      lineHeight: [1.2, null, 1]
    },
    xl: {
      fontSize: ["3xl", null, "4xl"],
      lineHeight: [1.33, null, 1.2]
    },
    lg: {
      fontSize: ["2xl", null, "3xl"],
      lineHeight: [1.33, null, 1.2]
    },
    md: {
      fontSize: "xl",
      lineHeight: 1.2
    },
    sm: {
      fontSize: "md",
      lineHeight: 1.2
    },
    xs: {
      fontSize: "sm",
      lineHeight: 1.2
    }
  };
  var defaultProps$e = {
    size: "xl"
  };
  var heading = {
    baseStyle: baseStyle$n,
    sizes: sizes$f,
    defaultProps: defaultProps$e
  };
  var baseStyle$m = {
    field: {
      width: "100%",
      minWidth: 0,
      outline: 0,
      position: "relative",
      appearance: "none",
      transitionProperty: "common",
      transitionDuration: "normal"
    }
  };
  var size = {
    lg: {
      fontSize: "lg",
      px: 4,
      h: 12,
      borderRadius: "md"
    },
    md: {
      fontSize: "md",
      px: 4,
      h: 10,
      borderRadius: "md"
    },
    sm: {
      fontSize: "sm",
      px: 3,
      h: 8,
      borderRadius: "sm"
    },
    xs: {
      fontSize: "xs",
      px: 2,
      h: 6,
      borderRadius: "sm"
    }
  };
  var sizes$e = {
    lg: {
      field: size.lg,
      addon: size.lg
    },
    md: {
      field: size.md,
      addon: size.md
    },
    sm: {
      field: size.sm,
      addon: size.sm
    },
    xs: {
      field: size.xs,
      addon: size.xs
    }
  };
  function getDefaults(props) {
    var fc = props.focusBorderColor, ec = props.errorBorderColor;
    return {
      focusBorderColor: fc || mode("blue.500", "blue.300")(props),
      errorBorderColor: ec || mode("red.500", "red.300")(props)
    };
  }
  var variantOutline3 = function variantOutline4(props) {
    var theme3 = props.theme;
    var _getDefaults = getDefaults(props), fc = _getDefaults.focusBorderColor, ec = _getDefaults.errorBorderColor;
    return {
      field: {
        border: "1px solid",
        borderColor: "inherit",
        bg: "inherit",
        _hover: {
          borderColor: mode("gray.300", "whiteAlpha.400")(props)
        },
        _readOnly: {
          boxShadow: "none !important",
          userSelect: "all"
        },
        _disabled: {
          opacity: 0.4,
          cursor: "not-allowed"
        },
        _invalid: {
          borderColor: getColor(theme3, ec),
          boxShadow: "0 0 0 1px " + getColor(theme3, ec)
        },
        _focus: {
          zIndex: 1,
          borderColor: getColor(theme3, fc),
          boxShadow: "0 0 0 1px " + getColor(theme3, fc)
        }
      },
      addon: {
        border: "1px solid",
        borderColor: mode("inherit", "whiteAlpha.50")(props),
        bg: mode("gray.100", "whiteAlpha.300")(props)
      }
    };
  };
  var variantFilled = function variantFilled2(props) {
    var theme3 = props.theme;
    var _getDefaults2 = getDefaults(props), fc = _getDefaults2.focusBorderColor, ec = _getDefaults2.errorBorderColor;
    return {
      field: {
        border: "2px solid",
        borderColor: "transparent",
        bg: mode("gray.100", "whiteAlpha.50")(props),
        _hover: {
          bg: mode("gray.200", "whiteAlpha.100")(props)
        },
        _readOnly: {
          boxShadow: "none !important",
          userSelect: "all"
        },
        _disabled: {
          opacity: 0.4,
          cursor: "not-allowed"
        },
        _invalid: {
          borderColor: getColor(theme3, ec)
        },
        _focus: {
          bg: "transparent",
          borderColor: getColor(theme3, fc)
        }
      },
      addon: {
        border: "2px solid",
        borderColor: "transparent",
        bg: mode("gray.100", "whiteAlpha.50")(props)
      }
    };
  };
  var variantFlushed = function variantFlushed2(props) {
    var theme3 = props.theme;
    var _getDefaults3 = getDefaults(props), fc = _getDefaults3.focusBorderColor, ec = _getDefaults3.errorBorderColor;
    return {
      field: {
        borderBottom: "1px solid",
        borderColor: "inherit",
        borderRadius: 0,
        px: 0,
        bg: "transparent",
        _readOnly: {
          boxShadow: "none !important",
          userSelect: "all"
        },
        _invalid: {
          borderColor: getColor(theme3, ec),
          boxShadow: "0px 1px 0px 0px " + getColor(theme3, ec)
        },
        _focus: {
          borderColor: getColor(theme3, fc),
          boxShadow: "0px 1px 0px 0px " + getColor(theme3, fc)
        }
      },
      addon: {
        borderBottom: "2px solid",
        borderColor: "inherit",
        borderRadius: 0,
        px: 0,
        bg: "transparent"
      }
    };
  };
  var variantUnstyled$1 = {
    field: {
      bg: "transparent",
      px: 0,
      height: "auto"
    },
    addon: {
      bg: "transparent",
      px: 0,
      height: "auto"
    }
  };
  var variants$6 = {
    outline: variantOutline3,
    filled: variantFilled,
    flushed: variantFlushed,
    unstyled: variantUnstyled$1
  };
  var defaultProps$d = {
    size: "md",
    variant: "outline"
  };
  var Input = {
    parts: inputAnatomy.keys,
    baseStyle: baseStyle$m,
    sizes: sizes$e,
    variants: variants$6,
    defaultProps: defaultProps$d
  };
  var baseStyle$l = function baseStyle7(props) {
    return {
      bg: mode("gray.100", "whiteAlpha")(props),
      borderRadius: "md",
      borderWidth: "1px",
      borderBottomWidth: "3px",
      fontSize: "0.8em",
      fontWeight: "bold",
      lineHeight: "normal",
      px: "0.4em",
      whiteSpace: "nowrap"
    };
  };
  var kbd = {
    baseStyle: baseStyle$l
  };
  var baseStyle$k = {
    transitionProperty: "common",
    transitionDuration: "fast",
    transitionTimingFunction: "ease-out",
    cursor: "pointer",
    textDecoration: "none",
    outline: "none",
    color: "inherit",
    _hover: {
      textDecoration: "underline"
    },
    _focus: {
      boxShadow: "outline"
    }
  };
  var link = {
    baseStyle: baseStyle$k
  };
  var baseStyleIcon$2 = {
    marginEnd: "0.5rem",
    display: "inline",
    verticalAlign: "text-bottom"
  };
  var baseStyle$j = {
    container: {},
    item: {},
    icon: baseStyleIcon$2
  };
  var list2 = {
    parts: listAnatomy.keys,
    baseStyle: baseStyle$j
  };
  var baseStyleList = function baseStyleList2(props) {
    return {
      bg: mode("#fff", "gray.700")(props),
      boxShadow: mode("sm", "dark-lg")(props),
      color: "inherit",
      minW: "3xs",
      py: "2",
      zIndex: 1,
      borderRadius: "md",
      borderWidth: "1px"
    };
  };
  var baseStyleItem = function baseStyleItem2(props) {
    return {
      py: "0.4rem",
      px: "0.8rem",
      transitionProperty: "background",
      transitionDuration: "ultra-fast",
      transitionTimingFunction: "ease-in",
      _focus: {
        bg: mode("gray.100", "whiteAlpha.100")(props)
      },
      _active: {
        bg: mode("gray.200", "whiteAlpha.200")(props)
      },
      _expanded: {
        bg: mode("gray.100", "whiteAlpha.100")(props)
      },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      }
    };
  };
  var baseStyleGroupTitle = {
    mx: 4,
    my: 2,
    fontWeight: "semibold",
    fontSize: "sm"
  };
  var baseStyleCommand = {
    opacity: 0.6
  };
  var baseStyleDivider = {
    border: 0,
    borderBottom: "1px solid",
    borderColor: "inherit",
    my: "0.5rem",
    opacity: 0.6
  };
  var baseStyleButton = {
    transitionProperty: "common",
    transitionDuration: "normal"
  };
  var baseStyle$i = function baseStyle8(props) {
    return {
      button: baseStyleButton,
      list: baseStyleList(props),
      item: baseStyleItem(props),
      groupTitle: baseStyleGroupTitle,
      command: baseStyleCommand,
      divider: baseStyleDivider
    };
  };
  var menu = {
    parts: menuAnatomy.keys,
    baseStyle: baseStyle$i
  };
  var baseStyleOverlay = {
    bg: "blackAlpha.600",
    zIndex: "modal"
  };
  var baseStyleDialogContainer = function baseStyleDialogContainer2(props) {
    var isCentered = props.isCentered, scrollBehavior = props.scrollBehavior;
    return {
      display: "flex",
      zIndex: "modal",
      justifyContent: "center",
      alignItems: isCentered ? "center" : "flex-start",
      overflow: scrollBehavior === "inside" ? "hidden" : "auto"
    };
  };
  var baseStyleDialog2 = function baseStyleDialog3(props) {
    var scrollBehavior = props.scrollBehavior;
    return {
      borderRadius: "md",
      bg: mode("white", "gray.700")(props),
      color: "inherit",
      my: "3.75rem",
      zIndex: "modal",
      maxH: scrollBehavior === "inside" ? "calc(100% - 7.5rem)" : void 0,
      boxShadow: mode("lg", "dark-lg")(props)
    };
  };
  var baseStyleHeader$1 = {
    px: 6,
    py: 4,
    fontSize: "xl",
    fontWeight: "semibold"
  };
  var baseStyleCloseButton$2 = {
    position: "absolute",
    top: 2,
    insetEnd: 3
  };
  var baseStyleBody$1 = function baseStyleBody(props) {
    var scrollBehavior = props.scrollBehavior;
    return {
      px: 6,
      py: 2,
      flex: 1,
      overflow: scrollBehavior === "inside" ? "auto" : void 0
    };
  };
  var baseStyleFooter$1 = {
    px: 6,
    py: 4
  };
  var baseStyle$h = function baseStyle9(props) {
    return {
      overlay: baseStyleOverlay,
      dialogContainer: baseStyleDialogContainer(props),
      dialog: baseStyleDialog2(props),
      header: baseStyleHeader$1,
      closeButton: baseStyleCloseButton$2,
      body: baseStyleBody$1(props),
      footer: baseStyleFooter$1
    };
  };
  function getSize$1(value) {
    if (value === "full") {
      return {
        dialog: {
          maxW: "100vw",
          minH: "100vh",
          "@supports(min-height: -webkit-fill-available)": {
            minH: "-webkit-fill-available"
          },
          my: 0
        }
      };
    }
    return {
      dialog: {
        maxW: value
      }
    };
  }
  var sizes$d = {
    xs: getSize$1("xs"),
    sm: getSize$1("sm"),
    md: getSize$1("md"),
    lg: getSize$1("lg"),
    xl: getSize$1("xl"),
    "2xl": getSize$1("2xl"),
    "3xl": getSize$1("3xl"),
    "4xl": getSize$1("4xl"),
    "5xl": getSize$1("5xl"),
    "6xl": getSize$1("6xl"),
    full: getSize$1("full")
  };
  var defaultProps$c = {
    size: "md"
  };
  var modal = {
    parts: modalAnatomy.keys,
    baseStyle: baseStyle$h,
    sizes: sizes$d,
    defaultProps: defaultProps$c
  };
  var _baseStyleRoot;
  var _Input$baseStyle$fiel;
  var _Input$baseStyle;
  var variants$5 = Input.variants;
  var defaultProps$b = Input.defaultProps;
  var $stepperWidth = cssVar2("number-input-stepper-width");
  var $inputPadding = cssVar2("number-input-input-padding");
  var inputPaddingValue = calc2($stepperWidth).add("0.5rem").toString();
  var baseStyleRoot$1 = (_baseStyleRoot = {}, _baseStyleRoot[$stepperWidth.variable] = "24px", _baseStyleRoot[$inputPadding.variable] = inputPaddingValue, _baseStyleRoot);
  var baseStyleField$1 = (_Input$baseStyle$fiel = (_Input$baseStyle = Input.baseStyle) == null ? void 0 : _Input$baseStyle.field) != null ? _Input$baseStyle$fiel : {};
  var baseStyleStepperGroup = {
    width: [$stepperWidth.reference]
  };
  var baseStyleStepper = function baseStyleStepper2(props) {
    return {
      borderStart: "1px solid",
      borderStartColor: mode("inherit", "whiteAlpha.300")(props),
      color: mode("inherit", "whiteAlpha.800")(props),
      _active: {
        bg: mode("gray.200", "whiteAlpha.300")(props)
      },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      }
    };
  };
  var baseStyle$g = function baseStyle10(props) {
    return {
      root: baseStyleRoot$1,
      field: baseStyleField$1,
      stepperGroup: baseStyleStepperGroup,
      stepper: baseStyleStepper(props)
    };
  };
  function getSize(size2) {
    var _sizeStyle$field$font, _sizeStyle$field;
    var sizeStyle = Input.sizes[size2];
    var radius = {
      lg: "md",
      md: "md",
      sm: "sm",
      xs: "sm"
    };
    var _fontSize = (_sizeStyle$field$font = (_sizeStyle$field = sizeStyle.field) == null ? void 0 : _sizeStyle$field.fontSize) != null ? _sizeStyle$field$font : "md";
    var fontSize = typography2.fontSizes[_fontSize.toString()];
    return {
      field: _extends7({}, sizeStyle.field, {
        paddingInlineEnd: $inputPadding.reference,
        verticalAlign: "top"
      }),
      stepper: {
        fontSize: calc2(fontSize).multiply(0.75).toString(),
        _first: {
          borderTopEndRadius: radius[size2]
        },
        _last: {
          borderBottomEndRadius: radius[size2],
          mt: "-1px",
          borderTopWidth: 1
        }
      }
    };
  }
  var sizes$c = {
    xs: getSize("xs"),
    sm: getSize("sm"),
    md: getSize("md"),
    lg: getSize("lg")
  };
  var numberInput = {
    parts: numberInputAnatomy.keys,
    baseStyle: baseStyle$g,
    sizes: sizes$c,
    variants: variants$5,
    defaultProps: defaultProps$b
  };
  var _Input$variants$unsty$1;
  var baseStyle$f = _extends7({}, Input.baseStyle.field, {
    textAlign: "center"
  });
  var sizes$b = {
    lg: {
      fontSize: "lg",
      w: 12,
      h: 12,
      borderRadius: "md"
    },
    md: {
      fontSize: "md",
      w: 10,
      h: 10,
      borderRadius: "md"
    },
    sm: {
      fontSize: "sm",
      w: 8,
      h: 8,
      borderRadius: "sm"
    },
    xs: {
      fontSize: "xs",
      w: 6,
      h: 6,
      borderRadius: "sm"
    }
  };
  var variants$4 = {
    outline: function outline2(props) {
      var _Input$variants$outli;
      return (_Input$variants$outli = Input.variants.outline(props).field) != null ? _Input$variants$outli : {};
    },
    flushed: function flushed(props) {
      var _Input$variants$flush;
      return (_Input$variants$flush = Input.variants.flushed(props).field) != null ? _Input$variants$flush : {};
    },
    filled: function filled(props) {
      var _Input$variants$fille;
      return (_Input$variants$fille = Input.variants.filled(props).field) != null ? _Input$variants$fille : {};
    },
    unstyled: (_Input$variants$unsty$1 = Input.variants.unstyled.field) != null ? _Input$variants$unsty$1 : {}
  };
  var defaultProps$a = Input.defaultProps;
  var pinInput = {
    baseStyle: baseStyle$f,
    sizes: sizes$b,
    variants: variants$4,
    defaultProps: defaultProps$a
  };
  var $popperBg = cssVar2("popper-bg");
  var $arrowBg$1 = cssVar2("popper-arrow-bg");
  var $arrowShadowColor = cssVar2("popper-arrow-shadow-color");
  var baseStylePopper = {
    zIndex: 10
  };
  var baseStyleContent = function baseStyleContent2(props) {
    var _ref2;
    var bg = mode("white", "gray.700")(props);
    var shadowColor = mode("gray.200", "whiteAlpha.300")(props);
    return _ref2 = {}, _ref2[$popperBg.variable] = "colors." + bg, _ref2.bg = $popperBg.reference, _ref2[$arrowBg$1.variable] = $popperBg.reference, _ref2[$arrowShadowColor.variable] = "colors." + shadowColor, _ref2.width = "xs", _ref2.border = "1px solid", _ref2.borderColor = "inherit", _ref2.borderRadius = "md", _ref2.boxShadow = "sm", _ref2.zIndex = "inherit", _ref2._focus = {
      outline: 0,
      boxShadow: "outline"
    }, _ref2;
  };
  var baseStyleHeader = {
    px: 3,
    py: 2,
    borderBottomWidth: "1px"
  };
  var baseStyleBody2 = {
    px: 3,
    py: 2
  };
  var baseStyleFooter = {
    px: 3,
    py: 2,
    borderTopWidth: "1px"
  };
  var baseStyleCloseButton$1 = {
    position: "absolute",
    borderRadius: "md",
    top: 1,
    insetEnd: 2,
    padding: 2
  };
  var baseStyle$e = function baseStyle11(props) {
    return {
      popper: baseStylePopper,
      content: baseStyleContent(props),
      header: baseStyleHeader,
      body: baseStyleBody2,
      footer: baseStyleFooter,
      arrow: {},
      closeButton: baseStyleCloseButton$1
    };
  };
  var popover = {
    parts: popoverAnatomy.keys,
    baseStyle: baseStyle$e
  };
  function filledStyle(props) {
    var c2 = props.colorScheme, t2 = props.theme, isIndeterminate = props.isIndeterminate, hasStripe = props.hasStripe;
    var stripeStyle = mode(generateStripe(), generateStripe("1rem", "rgba(0,0,0,0.1)"))(props);
    var bgColor = mode(c2 + ".500", c2 + ".200")(props);
    var gradient = "linear-gradient(\n    to right,\n    transparent 0%,\n    " + getColor(t2, bgColor) + " 50%,\n    transparent 100%\n  )";
    var addStripe = !isIndeterminate && hasStripe;
    return _extends7({}, addStripe && stripeStyle, isIndeterminate ? {
      bgImage: gradient
    } : {
      bgColor
    });
  }
  var baseStyleLabel$2 = {
    lineHeight: "1",
    fontSize: "0.25em",
    fontWeight: "bold",
    color: "white"
  };
  var baseStyleTrack$2 = function baseStyleTrack(props) {
    return {
      bg: mode("gray.100", "whiteAlpha.300")(props)
    };
  };
  var baseStyleFilledTrack$1 = function baseStyleFilledTrack(props) {
    return _extends7({
      transitionProperty: "common",
      transitionDuration: "slow"
    }, filledStyle(props));
  };
  var baseStyle$d = function baseStyle12(props) {
    return {
      label: baseStyleLabel$2,
      filledTrack: baseStyleFilledTrack$1(props),
      track: baseStyleTrack$2(props)
    };
  };
  var sizes$a = {
    xs: {
      track: {
        h: "0.25rem"
      }
    },
    sm: {
      track: {
        h: "0.5rem"
      }
    },
    md: {
      track: {
        h: "0.75rem"
      }
    },
    lg: {
      track: {
        h: "1rem"
      }
    }
  };
  var defaultProps$9 = {
    size: "md",
    colorScheme: "blue"
  };
  var progress = {
    parts: progressAnatomy.keys,
    sizes: sizes$a,
    baseStyle: baseStyle$d,
    defaultProps: defaultProps$9
  };
  var baseStyleControl2 = function baseStyleControl3(props) {
    var _Checkbox$baseStyle = Checkbox.baseStyle(props), _Checkbox$baseStyle$c = _Checkbox$baseStyle.control, control = _Checkbox$baseStyle$c === void 0 ? {} : _Checkbox$baseStyle$c;
    return _extends7({}, control, {
      borderRadius: "full",
      _checked: _extends7({}, control["_checked"], {
        _before: {
          content: '""',
          display: "inline-block",
          pos: "relative",
          w: "50%",
          h: "50%",
          borderRadius: "50%",
          bg: "currentColor"
        }
      })
    });
  };
  var baseStyle$c = function baseStyle13(props) {
    return {
      label: Checkbox.baseStyle(props).label,
      control: baseStyleControl2(props)
    };
  };
  var sizes$9 = {
    md: {
      control: {
        w: 4,
        h: 4
      },
      label: {
        fontSize: "md"
      }
    },
    lg: {
      control: {
        w: 5,
        h: 5
      },
      label: {
        fontSize: "lg"
      }
    },
    sm: {
      control: {
        width: 3,
        height: 3
      },
      label: {
        fontSize: "sm"
      }
    }
  };
  var defaultProps$8 = {
    size: "md",
    colorScheme: "blue"
  };
  var radio = {
    parts: radioAnatomy.keys,
    baseStyle: baseStyle$c,
    sizes: sizes$9,
    defaultProps: defaultProps$8
  };
  var baseStyleField = function baseStyleField2(props) {
    return _extends7({}, Input.baseStyle.field, {
      bg: mode("white", "gray.700")(props),
      appearance: "none",
      paddingBottom: "1px",
      lineHeight: "normal",
      "> option, > optgroup": {
        bg: mode("white", "gray.700")(props)
      }
    });
  };
  var baseStyleIcon$1 = {
    width: "1.5rem",
    height: "100%",
    insetEnd: "0.5rem",
    position: "relative",
    color: "currentColor",
    fontSize: "1.25rem",
    _disabled: {
      opacity: 0.5
    }
  };
  var baseStyle$b = function baseStyle14(props) {
    return {
      field: baseStyleField(props),
      icon: baseStyleIcon$1
    };
  };
  var iconSpacing = {
    paddingInlineEnd: "2rem"
  };
  var sizes$8 = (0, import_lodash.default)({}, Input.sizes, {
    lg: {
      field: iconSpacing
    },
    md: {
      field: iconSpacing
    },
    sm: {
      field: iconSpacing
    },
    xs: {
      field: iconSpacing,
      icon: {
        insetEnd: "0.25rem"
      }
    }
  });
  var select = {
    parts: selectAnatomy.keys,
    baseStyle: baseStyle$b,
    sizes: sizes$8,
    variants: Input.variants,
    defaultProps: Input.defaultProps
  };
  var fade = function fade2(startColor, endColor) {
    return keyframes({
      from: {
        borderColor: startColor,
        background: startColor
      },
      to: {
        borderColor: endColor,
        background: endColor
      }
    });
  };
  var baseStyle$a = function baseStyle15(props) {
    var defaultStartColor = mode("gray.100", "gray.800")(props);
    var defaultEndColor = mode("gray.400", "gray.600")(props);
    var _props$startColor = props.startColor, startColor = _props$startColor === void 0 ? defaultStartColor : _props$startColor, _props$endColor = props.endColor, endColor = _props$endColor === void 0 ? defaultEndColor : _props$endColor, speed = props.speed, theme3 = props.theme;
    var start = getColor(theme3, startColor);
    var end = getColor(theme3, endColor);
    return {
      opacity: 0.7,
      borderRadius: "2px",
      borderColor: start,
      background: end,
      animation: speed + "s linear infinite alternate " + fade(start, end)
    };
  };
  var skeleton = {
    baseStyle: baseStyle$a
  };
  var baseStyle$9 = function baseStyle16(props) {
    return {
      borderRadius: "md",
      fontWeight: "semibold",
      _focus: {
        boxShadow: "outline",
        padding: "1rem",
        position: "fixed",
        top: "1.5rem",
        insetStart: "1.5rem",
        bg: mode("white", "gray.700")(props)
      }
    };
  };
  var skipLink = {
    baseStyle: baseStyle$9
  };
  function thumbOrientation(props) {
    return orient({
      orientation: props.orientation,
      vertical: {
        left: "50%",
        transform: "translateX(-50%)",
        _active: {
          transform: "translateX(-50%) scale(1.15)"
        }
      },
      horizontal: {
        top: "50%",
        transform: "translateY(-50%)",
        _active: {
          transform: "translateY(-50%) scale(1.15)"
        }
      }
    });
  }
  var baseStyleContainer$1 = function baseStyleContainer2(props) {
    var orientation = props.orientation;
    return _extends7({
      display: "inline-block",
      position: "relative",
      cursor: "pointer",
      _disabled: {
        opacity: 0.6,
        cursor: "default",
        pointerEvents: "none"
      }
    }, orient({
      orientation,
      vertical: {
        h: "100%"
      },
      horizontal: {
        w: "100%"
      }
    }));
  };
  var baseStyleTrack$1 = function baseStyleTrack2(props) {
    return {
      overflow: "hidden",
      borderRadius: "sm",
      bg: mode("gray.200", "whiteAlpha.200")(props),
      _disabled: {
        bg: mode("gray.300", "whiteAlpha.300")(props)
      }
    };
  };
  var baseStyleThumb$1 = function baseStyleThumb(props) {
    return _extends7({
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      position: "absolute",
      outline: 0,
      zIndex: 1,
      borderRadius: "full",
      bg: "white",
      boxShadow: "base",
      border: "1px solid",
      borderColor: "transparent",
      transitionProperty: "transform",
      transitionDuration: "normal",
      _focus: {
        boxShadow: "outline"
      },
      _disabled: {
        bg: "gray.300"
      }
    }, thumbOrientation(props));
  };
  var baseStyleFilledTrack2 = function baseStyleFilledTrack3(props) {
    var c2 = props.colorScheme;
    return {
      width: "inherit",
      height: "inherit",
      bg: mode(c2 + ".500", c2 + ".200")(props)
    };
  };
  var baseStyle$8 = function baseStyle17(props) {
    return {
      container: baseStyleContainer$1(props),
      track: baseStyleTrack$1(props),
      thumb: baseStyleThumb$1(props),
      filledTrack: baseStyleFilledTrack2(props)
    };
  };
  var sizeLg = function sizeLg2(props) {
    return {
      thumb: {
        w: "16px",
        h: "16px"
      },
      track: orient({
        orientation: props.orientation,
        horizontal: {
          h: "4px"
        },
        vertical: {
          w: "4px"
        }
      })
    };
  };
  var sizeMd = function sizeMd2(props) {
    return {
      thumb: {
        w: "14px",
        h: "14px"
      },
      track: orient({
        orientation: props.orientation,
        horizontal: {
          h: "4px"
        },
        vertical: {
          w: "4px"
        }
      })
    };
  };
  var sizeSm = function sizeSm2(props) {
    return {
      thumb: {
        w: "10px",
        h: "10px"
      },
      track: orient({
        orientation: props.orientation,
        horizontal: {
          h: "2px"
        },
        vertical: {
          w: "2px"
        }
      })
    };
  };
  var sizes$7 = {
    lg: sizeLg,
    md: sizeMd,
    sm: sizeSm
  };
  var defaultProps$7 = {
    size: "md",
    colorScheme: "blue"
  };
  var slider = {
    parts: sliderAnatomy.keys,
    sizes: sizes$7,
    baseStyle: baseStyle$8,
    defaultProps: defaultProps$7
  };
  var _xs;
  var _sm;
  var _md;
  var _lg;
  var _xl;
  var $size = cssVar2("spinner-size");
  var baseStyle$7 = {
    width: [$size.reference],
    height: [$size.reference]
  };
  var sizes$6 = {
    xs: (_xs = {}, _xs[$size.variable] = "0.75rem", _xs),
    sm: (_sm = {}, _sm[$size.variable] = "1rem", _sm),
    md: (_md = {}, _md[$size.variable] = "1.5rem", _md),
    lg: (_lg = {}, _lg[$size.variable] = "2rem", _lg),
    xl: (_xl = {}, _xl[$size.variable] = "3rem", _xl)
  };
  var defaultProps$6 = {
    size: "md"
  };
  var spinner = {
    baseStyle: baseStyle$7,
    sizes: sizes$6,
    defaultProps: defaultProps$6
  };
  var baseStyleLabel$1 = {
    fontWeight: "medium"
  };
  var baseStyleHelpText = {
    opacity: 0.8,
    marginBottom: 2
  };
  var baseStyleNumber = {
    verticalAlign: "baseline",
    fontWeight: "semibold"
  };
  var baseStyleIcon2 = {
    marginEnd: 1,
    w: "14px",
    h: "14px",
    verticalAlign: "middle"
  };
  var baseStyle$6 = {
    container: {},
    label: baseStyleLabel$1,
    helpText: baseStyleHelpText,
    number: baseStyleNumber,
    icon: baseStyleIcon2
  };
  var sizes$5 = {
    md: {
      label: {
        fontSize: "sm"
      },
      helpText: {
        fontSize: "sm"
      },
      number: {
        fontSize: "2xl"
      }
    }
  };
  var defaultProps$5 = {
    size: "md"
  };
  var stat = {
    parts: statAnatomy.keys,
    baseStyle: baseStyle$6,
    sizes: sizes$5,
    defaultProps: defaultProps$5
  };
  var _container2;
  var _container3;
  var _container4;
  var $width = cssVar2("switch-track-width");
  var $height = cssVar2("switch-track-height");
  var $diff = cssVar2("switch-track-diff");
  var diffValue = calc2.subtract($width, $height);
  var $translateX = cssVar2("switch-thumb-x");
  var baseStyleTrack3 = function baseStyleTrack4(props) {
    var c2 = props.colorScheme;
    return {
      borderRadius: "full",
      p: "2px",
      width: [$width.reference],
      height: [$height.reference],
      transitionProperty: "common",
      transitionDuration: "fast",
      bg: mode("gray.300", "whiteAlpha.400")(props),
      _focus: {
        boxShadow: "outline"
      },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      },
      _checked: {
        bg: mode(c2 + ".500", c2 + ".200")(props)
      }
    };
  };
  var baseStyleThumb2 = {
    bg: "white",
    transitionProperty: "transform",
    transitionDuration: "normal",
    borderRadius: "inherit",
    width: [$height.reference],
    height: [$height.reference],
    _checked: {
      transform: "translateX(" + $translateX.reference + ")"
    }
  };
  var baseStyle$5 = function baseStyle18(props) {
    var _rtl, _container;
    return {
      container: (_container = {}, _container[$diff.variable] = diffValue, _container[$translateX.variable] = $diff.reference, _container._rtl = (_rtl = {}, _rtl[$translateX.variable] = calc2($diff).negate().toString(), _rtl), _container),
      track: baseStyleTrack3(props),
      thumb: baseStyleThumb2
    };
  };
  var sizes$4 = {
    sm: {
      container: (_container2 = {}, _container2[$width.variable] = "1.375rem", _container2[$height.variable] = "0.75rem", _container2)
    },
    md: {
      container: (_container3 = {}, _container3[$width.variable] = "1.875rem", _container3[$height.variable] = "1rem", _container3)
    },
    lg: {
      container: (_container4 = {}, _container4[$width.variable] = "2.875rem", _container4[$height.variable] = "1.5rem", _container4)
    }
  };
  var defaultProps$4 = {
    size: "md",
    colorScheme: "blue"
  };
  var _switch = {
    parts: switchAnatomy.keys,
    baseStyle: baseStyle$5,
    sizes: sizes$4,
    defaultProps: defaultProps$4
  };
  var baseStyle$4 = {
    table: {
      fontVariantNumeric: "lining-nums tabular-nums",
      borderCollapse: "collapse",
      width: "full"
    },
    th: {
      fontFamily: "heading",
      fontWeight: "bold",
      textTransform: "uppercase",
      letterSpacing: "wider",
      textAlign: "start"
    },
    td: {
      textAlign: "start"
    },
    caption: {
      mt: 4,
      fontFamily: "heading",
      textAlign: "center",
      fontWeight: "medium"
    }
  };
  var numericStyles = {
    "&[data-is-numeric=true]": {
      textAlign: "end"
    }
  };
  var variantSimple = function variantSimple2(props) {
    var c2 = props.colorScheme;
    return {
      th: _extends7({
        color: mode("gray.600", "gray.400")(props),
        borderBottom: "1px",
        borderColor: mode(c2 + ".100", c2 + ".700")(props)
      }, numericStyles),
      td: _extends7({
        borderBottom: "1px",
        borderColor: mode(c2 + ".100", c2 + ".700")(props)
      }, numericStyles),
      caption: {
        color: mode("gray.600", "gray.100")(props)
      },
      tfoot: {
        tr: {
          "&:last-of-type": {
            th: {
              borderBottomWidth: 0
            }
          }
        }
      }
    };
  };
  var variantStripe = function variantStripe2(props) {
    var c2 = props.colorScheme;
    return {
      th: _extends7({
        color: mode("gray.600", "gray.400")(props),
        borderBottom: "1px",
        borderColor: mode(c2 + ".100", c2 + ".700")(props)
      }, numericStyles),
      td: _extends7({
        borderBottom: "1px",
        borderColor: mode(c2 + ".100", c2 + ".700")(props)
      }, numericStyles),
      caption: {
        color: mode("gray.600", "gray.100")(props)
      },
      tbody: {
        tr: {
          "&:nth-of-type(odd)": {
            "th, td": {
              borderBottomWidth: "1px",
              borderColor: mode(c2 + ".100", c2 + ".700")(props)
            },
            td: {
              background: mode(c2 + ".100", c2 + ".700")(props)
            }
          }
        }
      },
      tfoot: {
        tr: {
          "&:last-of-type": {
            th: {
              borderBottomWidth: 0
            }
          }
        }
      }
    };
  };
  var variants$3 = {
    simple: variantSimple,
    striped: variantStripe,
    unstyled: {}
  };
  var sizes$3 = {
    sm: {
      th: {
        px: "4",
        py: "1",
        lineHeight: "4",
        fontSize: "xs"
      },
      td: {
        px: "4",
        py: "2",
        fontSize: "sm",
        lineHeight: "4"
      },
      caption: {
        px: "4",
        py: "2",
        fontSize: "xs"
      }
    },
    md: {
      th: {
        px: "6",
        py: "3",
        lineHeight: "4",
        fontSize: "xs"
      },
      td: {
        px: "6",
        py: "4",
        lineHeight: "5"
      },
      caption: {
        px: "6",
        py: "2",
        fontSize: "sm"
      }
    },
    lg: {
      th: {
        px: "8",
        py: "4",
        lineHeight: "5",
        fontSize: "sm"
      },
      td: {
        px: "8",
        py: "5",
        lineHeight: "6"
      },
      caption: {
        px: "6",
        py: "2",
        fontSize: "md"
      }
    }
  };
  var defaultProps$3 = {
    variant: "simple",
    size: "md",
    colorScheme: "gray"
  };
  var table = {
    parts: tableAnatomy.keys,
    baseStyle: baseStyle$4,
    variants: variants$3,
    sizes: sizes$3,
    defaultProps: defaultProps$3
  };
  var baseStyleRoot = function baseStyleRoot2(props) {
    var orientation = props.orientation;
    return {
      display: orientation === "vertical" ? "flex" : "block"
    };
  };
  var baseStyleTab = function baseStyleTab2(props) {
    var isFitted = props.isFitted;
    return {
      flex: isFitted ? 1 : void 0,
      transitionProperty: "common",
      transitionDuration: "normal",
      _focus: {
        zIndex: 1,
        boxShadow: "outline"
      }
    };
  };
  var baseStyleTablist = function baseStyleTablist2(props) {
    var _props$align = props.align, align = _props$align === void 0 ? "start" : _props$align, orientation = props.orientation;
    var alignments = {
      end: "flex-end",
      center: "center",
      start: "flex-start"
    };
    return {
      justifyContent: alignments[align],
      flexDirection: orientation === "vertical" ? "column" : "row"
    };
  };
  var baseStyleTabpanel = {
    p: 4
  };
  var baseStyle$3 = function baseStyle19(props) {
    return {
      root: baseStyleRoot(props),
      tab: baseStyleTab(props),
      tablist: baseStyleTablist(props),
      tabpanel: baseStyleTabpanel
    };
  };
  var sizes$2 = {
    sm: {
      tab: {
        py: 1,
        px: 4,
        fontSize: "sm"
      }
    },
    md: {
      tab: {
        fontSize: "md",
        py: 2,
        px: 4
      }
    },
    lg: {
      tab: {
        fontSize: "lg",
        py: 3,
        px: 4
      }
    }
  };
  var variantLine = function variantLine2(props) {
    var _tablist, _tab;
    var c2 = props.colorScheme, orientation = props.orientation;
    var isVertical = orientation === "vertical";
    var borderProp = orientation === "vertical" ? "borderStart" : "borderBottom";
    var marginProp = isVertical ? "marginStart" : "marginBottom";
    return {
      tablist: (_tablist = {}, _tablist[borderProp] = "2px solid", _tablist.borderColor = "inherit", _tablist),
      tab: (_tab = {}, _tab[borderProp] = "2px solid", _tab.borderColor = "transparent", _tab[marginProp] = "-2px", _tab._selected = {
        color: mode(c2 + ".600", c2 + ".300")(props),
        borderColor: "currentColor"
      }, _tab._active = {
        bg: mode("gray.200", "whiteAlpha.300")(props)
      }, _tab._disabled = {
        opacity: 0.4,
        cursor: "not-allowed"
      }, _tab)
    };
  };
  var variantEnclosed = function variantEnclosed2(props) {
    var c2 = props.colorScheme;
    return {
      tab: {
        borderTopRadius: "md",
        border: "1px solid",
        borderColor: "transparent",
        mb: "-1px",
        _selected: {
          color: mode(c2 + ".600", c2 + ".300")(props),
          borderColor: "inherit",
          borderBottomColor: mode("white", "gray.800")(props)
        }
      },
      tablist: {
        mb: "-1px",
        borderBottom: "1px solid",
        borderColor: "inherit"
      }
    };
  };
  var variantEnclosedColored = function variantEnclosedColored2(props) {
    var c2 = props.colorScheme;
    return {
      tab: {
        border: "1px solid",
        borderColor: "inherit",
        bg: mode("gray.50", "whiteAlpha.50")(props),
        mb: "-1px",
        _notLast: {
          marginEnd: "-1px"
        },
        _selected: {
          bg: mode("#fff", "gray.800")(props),
          color: mode(c2 + ".600", c2 + ".300")(props),
          borderColor: "inherit",
          borderTopColor: "currentColor",
          borderBottomColor: "transparent"
        }
      },
      tablist: {
        mb: "-1px",
        borderBottom: "1px solid",
        borderColor: "inherit"
      }
    };
  };
  var variantSoftRounded = function variantSoftRounded2(props) {
    var c2 = props.colorScheme, theme3 = props.theme;
    return {
      tab: {
        borderRadius: "full",
        fontWeight: "semibold",
        color: "gray.600",
        _selected: {
          color: getColor(theme3, c2 + ".700"),
          bg: getColor(theme3, c2 + ".100")
        }
      }
    };
  };
  var variantSolidRounded = function variantSolidRounded2(props) {
    var c2 = props.colorScheme;
    return {
      tab: {
        borderRadius: "full",
        fontWeight: "semibold",
        color: mode("gray.600", "inherit")(props),
        _selected: {
          color: mode("#fff", "gray.800")(props),
          bg: mode(c2 + ".600", c2 + ".300")(props)
        }
      }
    };
  };
  var variantUnstyled = {};
  var variants$2 = {
    line: variantLine,
    enclosed: variantEnclosed,
    "enclosed-colored": variantEnclosedColored,
    "soft-rounded": variantSoftRounded,
    "solid-rounded": variantSolidRounded,
    unstyled: variantUnstyled
  };
  var defaultProps$2 = {
    size: "md",
    variant: "line",
    colorScheme: "blue"
  };
  var tabs = {
    parts: tabsAnatomy.keys,
    baseStyle: baseStyle$3,
    sizes: sizes$2,
    variants: variants$2,
    defaultProps: defaultProps$2
  };
  var baseStyleContainer3 = {
    fontWeight: "medium",
    lineHeight: 1.2,
    outline: 0,
    _focus: {
      boxShadow: "outline"
    }
  };
  var baseStyleLabel = {
    lineHeight: 1.2,
    overflow: "visible"
  };
  var baseStyleCloseButton = {
    fontSize: "18px",
    w: "1.25rem",
    h: "1.25rem",
    transitionProperty: "common",
    transitionDuration: "normal",
    borderRadius: "full",
    marginStart: "0.375rem",
    marginEnd: "-1",
    opacity: 0.5,
    _disabled: {
      opacity: 0.4
    },
    _focus: {
      boxShadow: "outline",
      bg: "rgba(0, 0, 0, 0.14)"
    },
    _hover: {
      opacity: 0.8
    },
    _active: {
      opacity: 1
    }
  };
  var baseStyle$2 = {
    container: baseStyleContainer3,
    label: baseStyleLabel,
    closeButton: baseStyleCloseButton
  };
  var sizes$1 = {
    sm: {
      container: {
        minH: "1.25rem",
        minW: "1.25rem",
        fontSize: "xs",
        px: 2,
        borderRadius: "md"
      },
      closeButton: {
        marginEnd: "-2px",
        marginStart: "0.35rem"
      }
    },
    md: {
      container: {
        minH: "1.5rem",
        minW: "1.5rem",
        fontSize: "sm",
        borderRadius: "md",
        px: 2
      }
    },
    lg: {
      container: {
        minH: 8,
        minW: 8,
        fontSize: "md",
        borderRadius: "md",
        px: 3
      }
    }
  };
  var variants$1 = {
    subtle: function subtle(props) {
      return {
        container: Badge.variants.subtle(props)
      };
    },
    solid: function solid(props) {
      return {
        container: Badge.variants.solid(props)
      };
    },
    outline: function outline3(props) {
      return {
        container: Badge.variants.outline(props)
      };
    }
  };
  var defaultProps$1 = {
    size: "md",
    variant: "subtle",
    colorScheme: "gray"
  };
  var tag = {
    parts: tagAnatomy.keys,
    variants: variants$1,
    baseStyle: baseStyle$2,
    sizes: sizes$1,
    defaultProps: defaultProps$1
  };
  var _Input$variants$unsty;
  var _Input$sizes$xs$field;
  var _Input$sizes$sm$field;
  var _Input$sizes$md$field;
  var _Input$sizes$lg$field;
  var baseStyle$1 = _extends7({}, Input.baseStyle.field, {
    paddingY: "8px",
    minHeight: "80px",
    lineHeight: "short",
    verticalAlign: "top"
  });
  var variants = {
    outline: function outline4(props) {
      var _Input$variants$outli;
      return (_Input$variants$outli = Input.variants.outline(props).field) != null ? _Input$variants$outli : {};
    },
    flushed: function flushed2(props) {
      var _Input$variants$flush;
      return (_Input$variants$flush = Input.variants.flushed(props).field) != null ? _Input$variants$flush : {};
    },
    filled: function filled2(props) {
      var _Input$variants$fille;
      return (_Input$variants$fille = Input.variants.filled(props).field) != null ? _Input$variants$fille : {};
    },
    unstyled: (_Input$variants$unsty = Input.variants.unstyled.field) != null ? _Input$variants$unsty : {}
  };
  var sizes2 = {
    xs: (_Input$sizes$xs$field = Input.sizes.xs.field) != null ? _Input$sizes$xs$field : {},
    sm: (_Input$sizes$sm$field = Input.sizes.sm.field) != null ? _Input$sizes$sm$field : {},
    md: (_Input$sizes$md$field = Input.sizes.md.field) != null ? _Input$sizes$md$field : {},
    lg: (_Input$sizes$lg$field = Input.sizes.lg.field) != null ? _Input$sizes$lg$field : {}
  };
  var defaultProps = {
    size: "md",
    variant: "outline"
  };
  var textarea = {
    baseStyle: baseStyle$1,
    sizes: sizes2,
    variants,
    defaultProps
  };
  var $bg = cssVar2("tooltip-bg");
  var $arrowBg = cssVar2("popper-arrow-bg");
  var baseStyle20 = function baseStyle21(props) {
    var _ref2;
    var bg = mode("gray.700", "gray.300")(props);
    return _ref2 = {}, _ref2[$bg.variable] = "colors." + bg, _ref2.px = "8px", _ref2.py = "2px", _ref2.bg = [$bg.reference], _ref2[$arrowBg.variable] = [$bg.reference], _ref2.color = mode("whiteAlpha.900", "gray.900")(props), _ref2.borderRadius = "sm", _ref2.fontWeight = "medium", _ref2.fontSize = "sm", _ref2.boxShadow = "md", _ref2.maxW = "320px", _ref2.zIndex = "tooltip", _ref2;
  };
  var tooltip = {
    baseStyle: baseStyle20
  };
  var components = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    Accordion: accordion,
    Alert: alert,
    Avatar: avatar,
    Badge,
    Breadcrumb: breadcrumb,
    Button: button,
    Checkbox,
    CloseButton: closeButton,
    Code: code,
    Container: container2,
    Divider: divider,
    Drawer: drawer,
    Editable: editable,
    Form: form,
    FormError: formError,
    FormLabel: formLabel,
    Heading: heading,
    Input,
    Kbd: kbd,
    Link: link,
    List: list2,
    Menu: menu,
    Modal: modal,
    NumberInput: numberInput,
    PinInput: pinInput,
    Popover: popover,
    Progress: progress,
    Radio: radio,
    Select: select,
    Skeleton: skeleton,
    SkipLink: skipLink,
    Slider: slider,
    Spinner: spinner,
    Stat: stat,
    Switch: _switch,
    Table: table,
    Tabs: tabs,
    Tag: tag,
    Textarea: textarea,
    Tooltip: tooltip
  });

  // node_modules/@chakra-ui/theme/foundations/borders/dist/chakra-ui-theme-foundations-borders.esm.js
  var borders = {
    none: 0,
    "1px": "1px solid",
    "2px": "2px solid",
    "4px": "4px solid",
    "8px": "8px solid"
  };

  // node_modules/@chakra-ui/theme/foundations/breakpoints/dist/chakra-ui-theme-foundations-breakpoints.esm.js
  var breakpoints2 = createBreakpoints({
    sm: "30em",
    md: "48em",
    lg: "62em",
    xl: "80em",
    "2xl": "96em"
  });

  // node_modules/@chakra-ui/theme/foundations/colors/dist/chakra-ui-theme-foundations-colors.esm.js
  var colors = {
    transparent: "transparent",
    current: "currentColor",
    black: "#000000",
    white: "#FFFFFF",
    whiteAlpha: {
      50: "rgba(255, 255, 255, 0.04)",
      100: "rgba(255, 255, 255, 0.06)",
      200: "rgba(255, 255, 255, 0.08)",
      300: "rgba(255, 255, 255, 0.16)",
      400: "rgba(255, 255, 255, 0.24)",
      500: "rgba(255, 255, 255, 0.36)",
      600: "rgba(255, 255, 255, 0.48)",
      700: "rgba(255, 255, 255, 0.64)",
      800: "rgba(255, 255, 255, 0.80)",
      900: "rgba(255, 255, 255, 0.92)"
    },
    blackAlpha: {
      50: "rgba(0, 0, 0, 0.04)",
      100: "rgba(0, 0, 0, 0.06)",
      200: "rgba(0, 0, 0, 0.08)",
      300: "rgba(0, 0, 0, 0.16)",
      400: "rgba(0, 0, 0, 0.24)",
      500: "rgba(0, 0, 0, 0.36)",
      600: "rgba(0, 0, 0, 0.48)",
      700: "rgba(0, 0, 0, 0.64)",
      800: "rgba(0, 0, 0, 0.80)",
      900: "rgba(0, 0, 0, 0.92)"
    },
    gray: {
      50: "#F7FAFC",
      100: "#EDF2F7",
      200: "#E2E8F0",
      300: "#CBD5E0",
      400: "#A0AEC0",
      500: "#718096",
      600: "#4A5568",
      700: "#2D3748",
      800: "#1A202C",
      900: "#171923"
    },
    red: {
      50: "#FFF5F5",
      100: "#FED7D7",
      200: "#FEB2B2",
      300: "#FC8181",
      400: "#F56565",
      500: "#E53E3E",
      600: "#C53030",
      700: "#9B2C2C",
      800: "#822727",
      900: "#63171B"
    },
    orange: {
      50: "#FFFAF0",
      100: "#FEEBC8",
      200: "#FBD38D",
      300: "#F6AD55",
      400: "#ED8936",
      500: "#DD6B20",
      600: "#C05621",
      700: "#9C4221",
      800: "#7B341E",
      900: "#652B19"
    },
    yellow: {
      50: "#FFFFF0",
      100: "#FEFCBF",
      200: "#FAF089",
      300: "#F6E05E",
      400: "#ECC94B",
      500: "#D69E2E",
      600: "#B7791F",
      700: "#975A16",
      800: "#744210",
      900: "#5F370E"
    },
    green: {
      50: "#F0FFF4",
      100: "#C6F6D5",
      200: "#9AE6B4",
      300: "#68D391",
      400: "#48BB78",
      500: "#38A169",
      600: "#2F855A",
      700: "#276749",
      800: "#22543D",
      900: "#1C4532"
    },
    teal: {
      50: "#E6FFFA",
      100: "#B2F5EA",
      200: "#81E6D9",
      300: "#4FD1C5",
      400: "#38B2AC",
      500: "#319795",
      600: "#2C7A7B",
      700: "#285E61",
      800: "#234E52",
      900: "#1D4044"
    },
    blue: {
      50: "#ebf8ff",
      100: "#bee3f8",
      200: "#90cdf4",
      300: "#63b3ed",
      400: "#4299e1",
      500: "#3182ce",
      600: "#2b6cb0",
      700: "#2c5282",
      800: "#2a4365",
      900: "#1A365D"
    },
    cyan: {
      50: "#EDFDFD",
      100: "#C4F1F9",
      200: "#9DECF9",
      300: "#76E4F7",
      400: "#0BC5EA",
      500: "#00B5D8",
      600: "#00A3C4",
      700: "#0987A0",
      800: "#086F83",
      900: "#065666"
    },
    purple: {
      50: "#FAF5FF",
      100: "#E9D8FD",
      200: "#D6BCFA",
      300: "#B794F4",
      400: "#9F7AEA",
      500: "#805AD5",
      600: "#6B46C1",
      700: "#553C9A",
      800: "#44337A",
      900: "#322659"
    },
    pink: {
      50: "#FFF5F7",
      100: "#FED7E2",
      200: "#FBB6CE",
      300: "#F687B3",
      400: "#ED64A6",
      500: "#D53F8C",
      600: "#B83280",
      700: "#97266D",
      800: "#702459",
      900: "#521B41"
    },
    linkedin: {
      50: "#E8F4F9",
      100: "#CFEDFB",
      200: "#9BDAF3",
      300: "#68C7EC",
      400: "#34B3E4",
      500: "#00A0DC",
      600: "#008CC9",
      700: "#0077B5",
      800: "#005E93",
      900: "#004471"
    },
    facebook: {
      50: "#E8F4F9",
      100: "#D9DEE9",
      200: "#B7C2DA",
      300: "#6482C0",
      400: "#4267B2",
      500: "#385898",
      600: "#314E89",
      700: "#29487D",
      800: "#223B67",
      900: "#1E355B"
    },
    messenger: {
      50: "#D0E6FF",
      100: "#B9DAFF",
      200: "#A2CDFF",
      300: "#7AB8FF",
      400: "#2E90FF",
      500: "#0078FF",
      600: "#0063D1",
      700: "#0052AC",
      800: "#003C7E",
      900: "#002C5C"
    },
    whatsapp: {
      50: "#dffeec",
      100: "#b9f5d0",
      200: "#90edb3",
      300: "#65e495",
      400: "#3cdd78",
      500: "#22c35e",
      600: "#179848",
      700: "#0c6c33",
      800: "#01421c",
      900: "#001803"
    },
    twitter: {
      50: "#E5F4FD",
      100: "#C8E9FB",
      200: "#A8DCFA",
      300: "#83CDF7",
      400: "#57BBF5",
      500: "#1DA1F2",
      600: "#1A94DA",
      700: "#1681BF",
      800: "#136B9E",
      900: "#0D4D71"
    },
    telegram: {
      50: "#E3F2F9",
      100: "#C5E4F3",
      200: "#A2D4EC",
      300: "#7AC1E4",
      400: "#47A9DA",
      500: "#0088CC",
      600: "#007AB8",
      700: "#006BA1",
      800: "#005885",
      900: "#003F5E"
    }
  };

  // node_modules/@chakra-ui/theme/foundations/radius/dist/chakra-ui-theme-foundations-radius.esm.js
  var radii = {
    none: "0",
    sm: "0.125rem",
    base: "0.25rem",
    md: "0.375rem",
    lg: "0.5rem",
    xl: "0.75rem",
    "2xl": "1rem",
    "3xl": "1.5rem",
    full: "9999px"
  };

  // node_modules/@chakra-ui/theme/foundations/shadows/dist/chakra-ui-theme-foundations-shadows.esm.js
  var shadows = {
    xs: "0 0 0 1px rgba(0, 0, 0, 0.05)",
    sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
    base: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
    md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
    lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
    xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
    "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)",
    outline: "0 0 0 3px rgba(66, 153, 225, 0.6)",
    inner: "inset 0 2px 4px 0 rgba(0,0,0,0.06)",
    none: "none",
    "dark-lg": "rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px"
  };

  // node_modules/@chakra-ui/theme/foundations/transition/dist/chakra-ui-theme-foundations-transition.esm.js
  var transitionProperty = {
    common: "background-color, border-color, color, fill, stroke, opacity, box-shadow, transform",
    colors: "background-color, border-color, color, fill, stroke",
    dimensions: "width, height",
    position: "left, right, top, bottom",
    background: "background-color, background-image, background-position"
  };
  var transitionTimingFunction = {
    "ease-in": "cubic-bezier(0.4, 0, 1, 1)",
    "ease-out": "cubic-bezier(0, 0, 0.2, 1)",
    "ease-in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
  };
  var transitionDuration = {
    "ultra-fast": "50ms",
    faster: "100ms",
    fast: "150ms",
    normal: "200ms",
    slow: "300ms",
    slower: "400ms",
    "ultra-slow": "500ms"
  };
  var transition2 = {
    property: transitionProperty,
    easing: transitionTimingFunction,
    duration: transitionDuration
  };

  // node_modules/@chakra-ui/theme/foundations/z-index/dist/chakra-ui-theme-foundations-z-index.esm.js
  var zIndices = {
    hide: -1,
    auto: "auto",
    base: 0,
    docked: 10,
    dropdown: 1e3,
    sticky: 1100,
    banner: 1200,
    overlay: 1300,
    modal: 1400,
    popover: 1500,
    skipLink: 1600,
    toast: 1700,
    tooltip: 1800
  };

  // node_modules/@chakra-ui/theme/foundations/blur/dist/chakra-ui-theme-foundations-blur.esm.js
  var blur2 = {
    none: 0,
    sm: "4px",
    base: "8px",
    md: "12px",
    lg: "16px",
    xl: "24px",
    "2xl": "40px",
    "3xl": "64px"
  };

  // node_modules/@chakra-ui/theme/foundations/dist/chakra-ui-theme-foundations.esm.js
  var foundations = _extends7({
    breakpoints: breakpoints2,
    zIndices,
    radii,
    blur: blur2,
    colors
  }, typography2, {
    sizes,
    shadows,
    space: spacing,
    borders,
    transition: transition2
  });

  // node_modules/@chakra-ui/theme/dist/chakra-ui-theme.esm.js
  var styles = {
    global: function global2(props) {
      return {
        body: {
          fontFamily: "body",
          color: mode("gray.800", "whiteAlpha.900")(props),
          bg: mode("white", "gray.800")(props),
          transitionProperty: "background-color",
          transitionDuration: "normal",
          lineHeight: "base"
        },
        "*::placeholder": {
          color: mode("gray.400", "whiteAlpha.400")(props)
        },
        "*, *::before, &::after": {
          borderColor: mode("gray.200", "whiteAlpha.300")(props),
          wordWrap: "break-word"
        }
      };
    }
  };
  var styles$1 = styles;
  var requiredChakraThemeKeys = ["borders", "breakpoints", "colors", "components", "config", "direction", "fonts", "fontSizes", "fontWeights", "letterSpacings", "lineHeights", "radii", "shadows", "sizes", "space", "styles", "transition", "zIndices"];
  function isChakraTheme(unit) {
    if (!isObject(unit)) {
      return false;
    }
    return requiredChakraThemeKeys.every(function(propertyName) {
      return Object.prototype.hasOwnProperty.call(unit, propertyName);
    });
  }
  var direction = "ltr";
  var config = {
    useSystemColorMode: false,
    initialColorMode: "light",
    cssVarPrefix: "chakra"
  };
  var theme = _extends7({
    direction
  }, foundations, {
    components,
    styles: styles$1,
    config
  });

  // node_modules/@chakra-ui/icon/dist/chakra-ui-icon.esm.js
  var React13 = __toESM(require_react());
  function _extends9() {
    _extends9 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends9.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose4(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var _excluded4 = ["as", "viewBox", "color", "focusable", "children", "className", "__css"];
  var fallbackIcon = {
    path: /* @__PURE__ */ React13.createElement("g", {
      stroke: "currentColor",
      strokeWidth: "1.5"
    }, /* @__PURE__ */ React13.createElement("path", {
      strokeLinecap: "round",
      fill: "none",
      d: "M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25"
    }), /* @__PURE__ */ React13.createElement("path", {
      fill: "currentColor",
      strokeLinecap: "round",
      d: "M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0"
    }), /* @__PURE__ */ React13.createElement("circle", {
      fill: "none",
      strokeMiterlimit: "10",
      cx: "12",
      cy: "12",
      r: "11.25"
    })),
    viewBox: "0 0 24 24"
  };
  var Icon = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var element = props.as, viewBox = props.viewBox, _props$color = props.color, color3 = _props$color === void 0 ? "currentColor" : _props$color, _props$focusable = props.focusable, focusable = _props$focusable === void 0 ? false : _props$focusable, children = props.children, className = props.className, __css = props.__css, rest = _objectWithoutPropertiesLoose4(props, _excluded4);
    var _className = cx("chakra-icon", className);
    var styles2 = _extends9({
      w: "1em",
      h: "1em",
      display: "inline-block",
      lineHeight: "1em",
      flexShrink: 0,
      color: color3
    }, __css);
    var shared = {
      ref,
      focusable,
      className: _className,
      __css: styles2
    };
    var _viewBox = viewBox != null ? viewBox : fallbackIcon.viewBox;
    if (element && typeof element !== "string") {
      return /* @__PURE__ */ React13.createElement(chakra.svg, _extends9({
        as: element
      }, shared, rest));
    }
    var _path = children != null ? children : fallbackIcon.path;
    return /* @__PURE__ */ React13.createElement(chakra.svg, _extends9({
      verticalAlign: "middle",
      viewBox: _viewBox
    }, shared, rest), _path);
  });
  if (__DEV__) {
    Icon.displayName = "Icon";
  }

  // node_modules/tslib/modules/index.js
  var import_tslib = __toESM(require_tslib(), 1);
  var {
    __extends,
    __assign,
    __rest,
    __decorate,
    __param,
    __metadata,
    __awaiter,
    __generator,
    __exportStar,
    __createBinding,
    __values,
    __read,
    __spread,
    __spreadArrays,
    __spreadArray,
    __await,
    __asyncGenerator,
    __asyncDelegator,
    __asyncValues,
    __makeTemplateObject,
    __importStar,
    __importDefault,
    __classPrivateFieldGet,
    __classPrivateFieldSet
  } = import_tslib.default;

  // node_modules/framer-motion/dist/es/motion/index.mjs
  var React15 = __toESM(require_react(), 1);
  var import_react28 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/motion/features/use-features.mjs
  var React14 = __toESM(require_react(), 1);
  var import_react14 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/motion/features/definitions.mjs
  var createDefinition = function(propNames2) {
    return {
      isEnabled: function(props) {
        return propNames2.some(function(name) {
          return !!props[name];
        });
      }
    };
  };
  var featureDefinitions = {
    measureLayout: createDefinition(["layout", "layoutId", "drag"]),
    animation: createDefinition([
      "animate",
      "exit",
      "variants",
      "whileHover",
      "whileTap",
      "whileFocus",
      "whileDrag",
      "whileInView"
    ]),
    exit: createDefinition(["exit"]),
    drag: createDefinition(["drag", "dragControls"]),
    focus: createDefinition(["whileFocus"]),
    hover: createDefinition(["whileHover", "onHoverStart", "onHoverEnd"]),
    tap: createDefinition(["whileTap", "onTap", "onTapStart", "onTapCancel"]),
    pan: createDefinition([
      "onPan",
      "onPanStart",
      "onPanSessionStart",
      "onPanEnd"
    ]),
    inView: createDefinition([
      "whileInView",
      "onViewportEnter",
      "onViewportLeave"
    ])
  };
  function loadFeatures(features) {
    for (var key in features) {
      if (features[key] === null)
        continue;
      if (key === "projectionNodeConstructor") {
        featureDefinitions.projectionNodeConstructor = features[key];
      } else {
        featureDefinitions[key].Component = features[key];
      }
    }
  }

  // node_modules/hey-listen/dist/hey-listen.es.js
  var warning = function() {
  };
  var invariant = function() {
  };
  if (true) {
    warning = function(check, message) {
      if (!check && typeof console !== "undefined") {
        console.warn(message);
      }
    };
    invariant = function(check, message) {
      if (!check) {
        throw new Error(message);
      }
    };
  }

  // node_modules/framer-motion/dist/es/context/LazyContext.mjs
  var import_react13 = __toESM(require_react(), 1);
  var LazyContext = (0, import_react13.createContext)({ strict: false });

  // node_modules/framer-motion/dist/es/motion/features/use-features.mjs
  var featureNames = Object.keys(featureDefinitions);
  var numFeatures = featureNames.length;
  function useFeatures(props, visualElement2, preloadedFeatures) {
    var features = [];
    var lazyContext = (0, import_react14.useContext)(LazyContext);
    if (!visualElement2)
      return null;
    if (preloadedFeatures && lazyContext.strict) {
      invariant(false, "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.");
    }
    for (var i = 0; i < numFeatures; i++) {
      var name_1 = featureNames[i];
      var _a = featureDefinitions[name_1], isEnabled = _a.isEnabled, Component2 = _a.Component;
      if (isEnabled(props) && Component2) {
        features.push(React14.createElement(Component2, __assign({ key: name_1 }, props, { visualElement: visualElement2 })));
      }
    }
    return features;
  }

  // node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs
  var import_react15 = __toESM(require_react(), 1);
  var MotionConfigContext = (0, import_react15.createContext)({
    transformPagePoint: function(p) {
      return p;
    },
    isStatic: false,
    reducedMotion: "never"
  });

  // node_modules/framer-motion/dist/es/context/MotionContext/index.mjs
  var import_react16 = __toESM(require_react(), 1);
  var MotionContext = (0, import_react16.createContext)({});
  function useVisualElementContext() {
    return (0, import_react16.useContext)(MotionContext).visualElement;
  }

  // node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
  var import_react20 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/context/PresenceContext.mjs
  var import_react17 = __toESM(require_react(), 1);
  var PresenceContext = (0, import_react17.createContext)(null);

  // node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
  var import_react18 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/utils/is-browser.mjs
  var isBrowser3 = typeof window !== "undefined";

  // node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
  var useIsomorphicLayoutEffect = isBrowser3 ? import_react18.useLayoutEffect : import_react18.useEffect;

  // node_modules/framer-motion/dist/es/utils/use-reduced-motion.mjs
  var import_react19 = __toESM(require_react(), 1);
  var prefersReducedMotion = { current: null };
  var hasDetected = false;
  function initPrefersReducedMotion() {
    hasDetected = true;
    if (typeof window === "undefined")
      return;
    if (window.matchMedia) {
      var motionMediaQuery_1 = window.matchMedia("(prefers-reduced-motion)");
      var setReducedMotionPreferences = function() {
        return prefersReducedMotion.current = motionMediaQuery_1.matches;
      };
      motionMediaQuery_1.addListener(setReducedMotionPreferences);
      setReducedMotionPreferences();
    } else {
      prefersReducedMotion.current = false;
    }
  }
  function useReducedMotion() {
    !hasDetected && initPrefersReducedMotion();
    var _a = __read((0, import_react19.useState)(prefersReducedMotion.current), 1), shouldReduceMotion = _a[0];
    return shouldReduceMotion;
  }
  function useReducedMotionConfig() {
    var reducedMotionPreference = useReducedMotion();
    var reducedMotion = (0, import_react19.useContext)(MotionConfigContext).reducedMotion;
    if (reducedMotion === "never") {
      return false;
    } else if (reducedMotion === "always") {
      return true;
    } else {
      return reducedMotionPreference;
    }
  }

  // node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
  function useVisualElement(Component2, visualState, props, createVisualElement) {
    var lazyContext = (0, import_react20.useContext)(LazyContext);
    var parent = useVisualElementContext();
    var presenceContext = (0, import_react20.useContext)(PresenceContext);
    var shouldReduceMotion = useReducedMotionConfig();
    var visualElementRef = (0, import_react20.useRef)(void 0);
    if (!createVisualElement)
      createVisualElement = lazyContext.renderer;
    if (!visualElementRef.current && createVisualElement) {
      visualElementRef.current = createVisualElement(Component2, {
        visualState,
        parent,
        props,
        presenceId: presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id,
        blockInitialAnimation: (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false,
        shouldReduceMotion
      });
    }
    var visualElement2 = visualElementRef.current;
    useIsomorphicLayoutEffect(function() {
      visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.syncRender();
    });
    (0, import_react20.useEffect)(function() {
      var _a;
      (_a = visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.animationState) === null || _a === void 0 ? void 0 : _a.animateChanges();
    });
    useIsomorphicLayoutEffect(function() {
      return function() {
        return visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.notifyUnmount();
      };
    }, []);
    return visualElement2;
  }

  // node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
  var import_react21 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/utils/is-ref-object.mjs
  function isRefObject2(ref) {
    return typeof ref === "object" && Object.prototype.hasOwnProperty.call(ref, "current");
  }

  // node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
  function useMotionRef(visualState, visualElement2, externalRef) {
    return (0, import_react21.useCallback)(function(instance) {
      var _a;
      instance && ((_a = visualState.mount) === null || _a === void 0 ? void 0 : _a.call(visualState, instance));
      if (visualElement2) {
        instance ? visualElement2.mount(instance) : visualElement2.unmount();
      }
      if (externalRef) {
        if (typeof externalRef === "function") {
          externalRef(instance);
        } else if (isRefObject2(externalRef)) {
          externalRef.current = instance;
        }
      }
    }, [visualElement2]);
  }

  // node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
  var import_react22 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/render/utils/variants.mjs
  function isVariantLabels(v) {
    return Array.isArray(v);
  }
  function isVariantLabel(v) {
    return typeof v === "string" || isVariantLabels(v);
  }
  function getCurrent(visualElement2) {
    var current = {};
    visualElement2.forEachValue(function(value, key) {
      return current[key] = value.get();
    });
    return current;
  }
  function getVelocity(visualElement2) {
    var velocity = {};
    visualElement2.forEachValue(function(value, key) {
      return velocity[key] = value.getVelocity();
    });
    return velocity;
  }
  function resolveVariantFromProps(props, definition, custom, currentValues, currentVelocity) {
    var _a;
    if (currentValues === void 0) {
      currentValues = {};
    }
    if (currentVelocity === void 0) {
      currentVelocity = {};
    }
    if (typeof definition === "function") {
      definition = definition(custom !== null && custom !== void 0 ? custom : props.custom, currentValues, currentVelocity);
    }
    if (typeof definition === "string") {
      definition = (_a = props.variants) === null || _a === void 0 ? void 0 : _a[definition];
    }
    if (typeof definition === "function") {
      definition = definition(custom !== null && custom !== void 0 ? custom : props.custom, currentValues, currentVelocity);
    }
    return definition;
  }
  function resolveVariant(visualElement2, definition, custom) {
    var props = visualElement2.getProps();
    return resolveVariantFromProps(props, definition, custom !== null && custom !== void 0 ? custom : props.custom, getCurrent(visualElement2), getVelocity(visualElement2));
  }
  function checkIfControllingVariants(props) {
    var _a;
    return typeof ((_a = props.animate) === null || _a === void 0 ? void 0 : _a.start) === "function" || isVariantLabel(props.initial) || isVariantLabel(props.animate) || isVariantLabel(props.whileHover) || isVariantLabel(props.whileDrag) || isVariantLabel(props.whileTap) || isVariantLabel(props.whileFocus) || isVariantLabel(props.exit);
  }
  function checkIfVariantNode(props) {
    return Boolean(checkIfControllingVariants(props) || props.variants);
  }

  // node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs
  function getCurrentTreeVariants(props, context) {
    if (checkIfControllingVariants(props)) {
      var initial3 = props.initial, animate3 = props.animate;
      return {
        initial: initial3 === false || isVariantLabel(initial3) ? initial3 : void 0,
        animate: isVariantLabel(animate3) ? animate3 : void 0
      };
    }
    return props.inherit !== false ? context : {};
  }

  // node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
  function useCreateMotionContext(props) {
    var _a = getCurrentTreeVariants(props, (0, import_react22.useContext)(MotionContext)), initial3 = _a.initial, animate3 = _a.animate;
    return (0, import_react22.useMemo)(function() {
      return { initial: initial3, animate: animate3 };
    }, [variantLabelsAsDependency(initial3), variantLabelsAsDependency(animate3)]);
  }
  function variantLabelsAsDependency(prop2) {
    return Array.isArray(prop2) ? prop2.join(" ") : prop2;
  }

  // node_modules/framer-motion/dist/es/utils/use-constant.mjs
  var import_react23 = __toESM(require_react(), 1);
  function useConstant(init) {
    var ref = (0, import_react23.useRef)(null);
    if (ref.current === null) {
      ref.current = init();
    }
    return ref.current;
  }

  // node_modules/framer-motion/node_modules/framesync/dist/es/on-next-frame.mjs
  var defaultTimestep2 = 1 / 60 * 1e3;
  var getCurrentTime = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
  var onNextFrame2 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime()), defaultTimestep2);

  // node_modules/framer-motion/node_modules/framesync/dist/es/create-render-step.mjs
  function createRenderStep2(runNextFrame3) {
    let toRun = [];
    let toRunNextFrame = [];
    let numToRun = 0;
    let isProcessing3 = false;
    let flushNextFrame = false;
    const toKeepAlive = /* @__PURE__ */ new WeakSet();
    const step = {
      schedule: (callback, keepAlive = false, immediate = false) => {
        const addToCurrentFrame = immediate && isProcessing3;
        const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
        if (keepAlive)
          toKeepAlive.add(callback);
        if (buffer.indexOf(callback) === -1) {
          buffer.push(callback);
          if (addToCurrentFrame && isProcessing3)
            numToRun = toRun.length;
        }
        return callback;
      },
      cancel: (callback) => {
        const index = toRunNextFrame.indexOf(callback);
        if (index !== -1)
          toRunNextFrame.splice(index, 1);
        toKeepAlive.delete(callback);
      },
      process: (frameData) => {
        if (isProcessing3) {
          flushNextFrame = true;
          return;
        }
        isProcessing3 = true;
        [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
        toRunNextFrame.length = 0;
        numToRun = toRun.length;
        if (numToRun) {
          for (let i = 0; i < numToRun; i++) {
            const callback = toRun[i];
            callback(frameData);
            if (toKeepAlive.has(callback)) {
              step.schedule(callback);
              runNextFrame3();
            }
          }
        }
        isProcessing3 = false;
        if (flushNextFrame) {
          flushNextFrame = false;
          step.process(frameData);
        }
      }
    };
    return step;
  }

  // node_modules/framer-motion/node_modules/framesync/dist/es/index.mjs
  var maxElapsed = 40;
  var useDefaultElapsed = true;
  var runNextFrame = false;
  var isProcessing = false;
  var frame = {
    delta: 0,
    timestamp: 0
  };
  var stepsOrder = [
    "read",
    "update",
    "preRender",
    "render",
    "postRender"
  ];
  var steps = stepsOrder.reduce((acc, key) => {
    acc[key] = createRenderStep2(() => runNextFrame = true);
    return acc;
  }, {});
  var sync = stepsOrder.reduce((acc, key) => {
    const step = steps[key];
    acc[key] = (process2, keepAlive = false, immediate = false) => {
      if (!runNextFrame)
        startLoop();
      return step.schedule(process2, keepAlive, immediate);
    };
    return acc;
  }, {});
  var cancelSync2 = stepsOrder.reduce((acc, key) => {
    acc[key] = steps[key].cancel;
    return acc;
  }, {});
  var flushSync = stepsOrder.reduce((acc, key) => {
    acc[key] = () => steps[key].process(frame);
    return acc;
  }, {});
  var processStep = (stepId) => steps[stepId].process(frame);
  var processFrame = (timestamp) => {
    runNextFrame = false;
    frame.delta = useDefaultElapsed ? defaultTimestep2 : Math.max(Math.min(timestamp - frame.timestamp, maxElapsed), 1);
    frame.timestamp = timestamp;
    isProcessing = true;
    stepsOrder.forEach(processStep);
    isProcessing = false;
    if (runNextFrame) {
      useDefaultElapsed = false;
      onNextFrame2(processFrame);
    }
  };
  var startLoop = () => {
    runNextFrame = true;
    useDefaultElapsed = true;
    if (!isProcessing)
      onNextFrame2(processFrame);
  };
  var getFrameData2 = () => frame;
  var es_default2 = sync;

  // node_modules/popmotion/dist/es/utils/clamp.mjs
  var clamp = (min, max, v) => Math.min(Math.max(v, min), max);

  // node_modules/popmotion/dist/es/animations/utils/find-spring.mjs
  var safeMin = 1e-3;
  var minDuration = 0.01;
  var maxDuration = 10;
  var minDamping = 0.05;
  var maxDamping = 1;
  function findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1 }) {
    let envelope;
    let derivative;
    warning(duration <= maxDuration * 1e3, "Spring duration must be 10 seconds or less");
    let dampingRatio = 1 - bounce;
    dampingRatio = clamp(minDamping, maxDamping, dampingRatio);
    duration = clamp(minDuration, maxDuration, duration / 1e3);
    if (dampingRatio < 1) {
      envelope = (undampedFreq2) => {
        const exponentialDecay = undampedFreq2 * dampingRatio;
        const delta = exponentialDecay * duration;
        const a2 = exponentialDecay - velocity;
        const b2 = calcAngularFreq(undampedFreq2, dampingRatio);
        const c2 = Math.exp(-delta);
        return safeMin - a2 / b2 * c2;
      };
      derivative = (undampedFreq2) => {
        const exponentialDecay = undampedFreq2 * dampingRatio;
        const delta = exponentialDecay * duration;
        const d = delta * velocity + velocity;
        const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq2, 2) * duration;
        const f = Math.exp(-delta);
        const g = calcAngularFreq(Math.pow(undampedFreq2, 2), dampingRatio);
        const factor = -envelope(undampedFreq2) + safeMin > 0 ? -1 : 1;
        return factor * ((d - e) * f) / g;
      };
    } else {
      envelope = (undampedFreq2) => {
        const a2 = Math.exp(-undampedFreq2 * duration);
        const b2 = (undampedFreq2 - velocity) * duration + 1;
        return -safeMin + a2 * b2;
      };
      derivative = (undampedFreq2) => {
        const a2 = Math.exp(-undampedFreq2 * duration);
        const b2 = (velocity - undampedFreq2) * (duration * duration);
        return a2 * b2;
      };
    }
    const initialGuess = 5 / duration;
    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);
    duration = duration * 1e3;
    if (isNaN(undampedFreq)) {
      return {
        stiffness: 100,
        damping: 10,
        duration
      };
    } else {
      const stiffness = Math.pow(undampedFreq, 2) * mass;
      return {
        stiffness,
        damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
        duration
      };
    }
  }
  var rootIterations = 12;
  function approximateRoot(envelope, derivative, initialGuess) {
    let result = initialGuess;
    for (let i = 1; i < rootIterations; i++) {
      result = result - envelope(result) / derivative(result);
    }
    return result;
  }
  function calcAngularFreq(undampedFreq, dampingRatio) {
    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
  }

  // node_modules/popmotion/dist/es/animations/generators/spring.mjs
  var durationKeys = ["duration", "bounce"];
  var physicsKeys = ["stiffness", "damping", "mass"];
  function isSpringType(options, keys3) {
    return keys3.some((key) => options[key] !== void 0);
  }
  function getSpringOptions(options) {
    let springOptions = Object.assign({ velocity: 0, stiffness: 100, damping: 10, mass: 1, isResolvedFromDuration: false }, options);
    if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {
      const derived = findSpring(options);
      springOptions = Object.assign(Object.assign(Object.assign({}, springOptions), derived), { velocity: 0, mass: 1 });
      springOptions.isResolvedFromDuration = true;
    }
    return springOptions;
  }
  function spring(_a) {
    var { from: from2 = 0, to = 1, restSpeed = 2, restDelta } = _a, options = __rest(_a, ["from", "to", "restSpeed", "restDelta"]);
    const state2 = { done: false, value: from2 };
    let { stiffness, damping, mass, velocity, duration, isResolvedFromDuration } = getSpringOptions(options);
    let resolveSpring = zero;
    let resolveVelocity = zero;
    function createSpring() {
      const initialVelocity = velocity ? -(velocity / 1e3) : 0;
      const initialDelta = to - from2;
      const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
      const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1e3;
      if (restDelta === void 0) {
        restDelta = Math.min(Math.abs(to - from2) / 100, 0.4);
      }
      if (dampingRatio < 1) {
        const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);
        resolveSpring = (t2) => {
          const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t2);
          return to - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t2) + initialDelta * Math.cos(angularFreq * t2));
        };
        resolveVelocity = (t2) => {
          const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t2);
          return dampingRatio * undampedAngularFreq * envelope * (Math.sin(angularFreq * t2) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq + initialDelta * Math.cos(angularFreq * t2)) - envelope * (Math.cos(angularFreq * t2) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) - angularFreq * initialDelta * Math.sin(angularFreq * t2));
        };
      } else if (dampingRatio === 1) {
        resolveSpring = (t2) => to - Math.exp(-undampedAngularFreq * t2) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t2);
      } else {
        const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
        resolveSpring = (t2) => {
          const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t2);
          const freqForT = Math.min(dampedAngularFreq * t2, 300);
          return to - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;
        };
      }
    }
    createSpring();
    return {
      next: (t2) => {
        const current = resolveSpring(t2);
        if (!isResolvedFromDuration) {
          const currentVelocity = resolveVelocity(t2) * 1e3;
          const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
          const isBelowDisplacementThreshold = Math.abs(to - current) <= restDelta;
          state2.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
        } else {
          state2.done = t2 >= duration;
        }
        state2.value = state2.done ? to : current;
        return state2;
      },
      flipTarget: () => {
        velocity = -velocity;
        [from2, to] = [to, from2];
        createSpring();
      }
    };
  }
  spring.needsInterpolation = (a2, b2) => typeof a2 === "string" || typeof b2 === "string";
  var zero = (_t) => 0;

  // node_modules/popmotion/dist/es/utils/progress.mjs
  var progress2 = (from2, to, value) => {
    const toFromDifference = to - from2;
    return toFromDifference === 0 ? 1 : (value - from2) / toFromDifference;
  };

  // node_modules/popmotion/dist/es/utils/mix.mjs
  var mix = (from2, to, progress3) => -progress3 * from2 + progress3 * to + from2;

  // node_modules/style-value-types/dist/es/utils.mjs
  var clamp2 = (min, max) => (v) => Math.max(Math.min(v, max), min);
  var sanitize = (v) => v % 1 ? Number(v.toFixed(5)) : v;
  var floatRegex = /(-)?([\d]*\.?[\d])+/g;
  var colorRegex = /(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))/gi;
  var singleColorRegex = /^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))$/i;
  function isString2(v) {
    return typeof v === "string";
  }

  // node_modules/style-value-types/dist/es/numbers/index.mjs
  var number = {
    test: (v) => typeof v === "number",
    parse: parseFloat,
    transform: (v) => v
  };
  var alpha = Object.assign(Object.assign({}, number), { transform: clamp2(0, 1) });
  var scale = Object.assign(Object.assign({}, number), { default: 1 });

  // node_modules/style-value-types/dist/es/numbers/units.mjs
  var createUnitType = (unit) => ({
    test: (v) => isString2(v) && v.endsWith(unit) && v.split(" ").length === 1,
    parse: parseFloat,
    transform: (v) => `${v}${unit}`
  });
  var degrees = createUnitType("deg");
  var percent = createUnitType("%");
  var px3 = createUnitType("px");
  var vh = createUnitType("vh");
  var vw = createUnitType("vw");
  var progressPercentage = Object.assign(Object.assign({}, percent), { parse: (v) => percent.parse(v) / 100, transform: (v) => percent.transform(v * 100) });

  // node_modules/style-value-types/dist/es/color/utils.mjs
  var isColorString = (type, testProp) => (v) => {
    return Boolean(isString2(v) && singleColorRegex.test(v) && v.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v, testProp));
  };
  var splitColor = (aName, bName, cName) => (v) => {
    if (!isString2(v))
      return v;
    const [a2, b2, c2, alpha2] = v.match(floatRegex);
    return {
      [aName]: parseFloat(a2),
      [bName]: parseFloat(b2),
      [cName]: parseFloat(c2),
      alpha: alpha2 !== void 0 ? parseFloat(alpha2) : 1
    };
  };

  // node_modules/style-value-types/dist/es/color/hsla.mjs
  var hsla = {
    test: isColorString("hsl", "hue"),
    parse: splitColor("hue", "saturation", "lightness"),
    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {
      return "hsla(" + Math.round(hue) + ", " + percent.transform(sanitize(saturation)) + ", " + percent.transform(sanitize(lightness)) + ", " + sanitize(alpha.transform(alpha$1)) + ")";
    }
  };

  // node_modules/style-value-types/dist/es/color/rgba.mjs
  var clampRgbUnit = clamp2(0, 255);
  var rgbUnit = Object.assign(Object.assign({}, number), { transform: (v) => Math.round(clampRgbUnit(v)) });
  var rgba = {
    test: isColorString("rgb", "red"),
    parse: splitColor("red", "green", "blue"),
    transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => "rgba(" + rgbUnit.transform(red) + ", " + rgbUnit.transform(green) + ", " + rgbUnit.transform(blue) + ", " + sanitize(alpha.transform(alpha$1)) + ")"
  };

  // node_modules/style-value-types/dist/es/color/hex.mjs
  function parseHex(v) {
    let r = "";
    let g = "";
    let b2 = "";
    let a2 = "";
    if (v.length > 5) {
      r = v.substr(1, 2);
      g = v.substr(3, 2);
      b2 = v.substr(5, 2);
      a2 = v.substr(7, 2);
    } else {
      r = v.substr(1, 1);
      g = v.substr(2, 1);
      b2 = v.substr(3, 1);
      a2 = v.substr(4, 1);
      r += r;
      g += g;
      b2 += b2;
      a2 += a2;
    }
    return {
      red: parseInt(r, 16),
      green: parseInt(g, 16),
      blue: parseInt(b2, 16),
      alpha: a2 ? parseInt(a2, 16) / 255 : 1
    };
  }
  var hex = {
    test: isColorString("#"),
    parse: parseHex,
    transform: rgba.transform
  };

  // node_modules/style-value-types/dist/es/color/index.mjs
  var color2 = {
    test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),
    parse: (v) => {
      if (rgba.test(v)) {
        return rgba.parse(v);
      } else if (hsla.test(v)) {
        return hsla.parse(v);
      } else {
        return hex.parse(v);
      }
    },
    transform: (v) => {
      return isString2(v) ? v : v.hasOwnProperty("red") ? rgba.transform(v) : hsla.transform(v);
    }
  };

  // node_modules/style-value-types/dist/es/complex/index.mjs
  var colorToken = "${c}";
  var numberToken = "${n}";
  function test(v) {
    var _a, _b, _c, _d;
    return isNaN(v) && isString2(v) && ((_b = (_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) + ((_d = (_c = v.match(colorRegex)) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 0;
  }
  function analyse(v) {
    if (typeof v === "number")
      v = `${v}`;
    const values = [];
    let numColors = 0;
    const colors2 = v.match(colorRegex);
    if (colors2) {
      numColors = colors2.length;
      v = v.replace(colorRegex, colorToken);
      values.push(...colors2.map(color2.parse));
    }
    const numbers = v.match(floatRegex);
    if (numbers) {
      v = v.replace(floatRegex, numberToken);
      values.push(...numbers.map(number.parse));
    }
    return { values, numColors, tokenised: v };
  }
  function parse2(v) {
    return analyse(v).values;
  }
  function createTransformer(v) {
    const { values, numColors, tokenised } = analyse(v);
    const numValues = values.length;
    return (v2) => {
      let output = tokenised;
      for (let i = 0; i < numValues; i++) {
        output = output.replace(i < numColors ? colorToken : numberToken, i < numColors ? color2.transform(v2[i]) : sanitize(v2[i]));
      }
      return output;
    };
  }
  var convertNumbersToZero = (v) => typeof v === "number" ? 0 : v;
  function getAnimatableNone(v) {
    const parsed = parse2(v);
    const transformer = createTransformer(v);
    return transformer(parsed.map(convertNumbersToZero));
  }
  var complex = { test, parse: parse2, createTransformer, getAnimatableNone };

  // node_modules/style-value-types/dist/es/complex/filter.mjs
  var maxDefaults = /* @__PURE__ */ new Set(["brightness", "contrast", "saturate", "opacity"]);
  function applyDefaultFilter(v) {
    let [name, value] = v.slice(0, -1).split("(");
    if (name === "drop-shadow")
      return v;
    const [number2] = value.match(floatRegex) || [];
    if (!number2)
      return v;
    const unit = value.replace(number2, "");
    let defaultValue = maxDefaults.has(name) ? 1 : 0;
    if (number2 !== value)
      defaultValue *= 100;
    return name + "(" + defaultValue + unit + ")";
  }
  var functionRegex = /([a-z-]*)\(.*?\)/g;
  var filter3 = Object.assign(Object.assign({}, complex), { getAnimatableNone: (v) => {
    const functions = v.match(functionRegex);
    return functions ? functions.map(applyDefaultFilter).join(" ") : v;
  } });

  // node_modules/popmotion/dist/es/utils/hsla-to-rgba.mjs
  function hueToRgb(p, q, t2) {
    if (t2 < 0)
      t2 += 1;
    if (t2 > 1)
      t2 -= 1;
    if (t2 < 1 / 6)
      return p + (q - p) * 6 * t2;
    if (t2 < 1 / 2)
      return q;
    if (t2 < 2 / 3)
      return p + (q - p) * (2 / 3 - t2) * 6;
    return p;
  }
  function hslaToRgba({ hue, saturation, lightness, alpha: alpha2 }) {
    hue /= 360;
    saturation /= 100;
    lightness /= 100;
    let red = 0;
    let green = 0;
    let blue = 0;
    if (!saturation) {
      red = green = blue = lightness;
    } else {
      const q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;
      const p = 2 * lightness - q;
      red = hueToRgb(p, q, hue + 1 / 3);
      green = hueToRgb(p, q, hue);
      blue = hueToRgb(p, q, hue - 1 / 3);
    }
    return {
      red: Math.round(red * 255),
      green: Math.round(green * 255),
      blue: Math.round(blue * 255),
      alpha: alpha2
    };
  }

  // node_modules/popmotion/dist/es/utils/mix-color.mjs
  var mixLinearColor = (from2, to, v) => {
    const fromExpo = from2 * from2;
    const toExpo = to * to;
    return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));
  };
  var colorTypes = [hex, rgba, hsla];
  var getColorType = (v) => colorTypes.find((type) => type.test(v));
  var notAnimatable = (color3) => `'${color3}' is not an animatable color. Use the equivalent color code instead.`;
  var mixColor = (from2, to) => {
    let fromColorType = getColorType(from2);
    let toColorType = getColorType(to);
    invariant(!!fromColorType, notAnimatable(from2));
    invariant(!!toColorType, notAnimatable(to));
    let fromColor = fromColorType.parse(from2);
    let toColor = toColorType.parse(to);
    if (fromColorType === hsla) {
      fromColor = hslaToRgba(fromColor);
      fromColorType = rgba;
    }
    if (toColorType === hsla) {
      toColor = hslaToRgba(toColor);
      toColorType = rgba;
    }
    const blended = Object.assign({}, fromColor);
    return (v) => {
      for (const key in blended) {
        if (key !== "alpha") {
          blended[key] = mixLinearColor(fromColor[key], toColor[key], v);
        }
      }
      blended.alpha = mix(fromColor.alpha, toColor.alpha, v);
      return fromColorType.transform(blended);
    };
  };

  // node_modules/popmotion/dist/es/utils/inc.mjs
  var isNum = (v) => typeof v === "number";

  // node_modules/popmotion/dist/es/utils/pipe.mjs
  var combineFunctions = (a2, b2) => (v) => b2(a2(v));
  var pipe3 = (...transformers) => transformers.reduce(combineFunctions);

  // node_modules/popmotion/dist/es/utils/mix-complex.mjs
  function getMixer(origin, target) {
    if (isNum(origin)) {
      return (v) => mix(origin, target, v);
    } else if (color2.test(origin)) {
      return mixColor(origin, target);
    } else {
      return mixComplex(origin, target);
    }
  }
  var mixArray = (from2, to) => {
    const output = [...from2];
    const numValues = output.length;
    const blendValue = from2.map((fromThis, i) => getMixer(fromThis, to[i]));
    return (v) => {
      for (let i = 0; i < numValues; i++) {
        output[i] = blendValue[i](v);
      }
      return output;
    };
  };
  var mixObject = (origin, target) => {
    const output = Object.assign(Object.assign({}, origin), target);
    const blendValue = {};
    for (const key in output) {
      if (origin[key] !== void 0 && target[key] !== void 0) {
        blendValue[key] = getMixer(origin[key], target[key]);
      }
    }
    return (v) => {
      for (const key in blendValue) {
        output[key] = blendValue[key](v);
      }
      return output;
    };
  };
  function analyse2(value) {
    const parsed = complex.parse(value);
    const numValues = parsed.length;
    let numNumbers = 0;
    let numRGB = 0;
    let numHSL = 0;
    for (let i = 0; i < numValues; i++) {
      if (numNumbers || typeof parsed[i] === "number") {
        numNumbers++;
      } else {
        if (parsed[i].hue !== void 0) {
          numHSL++;
        } else {
          numRGB++;
        }
      }
    }
    return { parsed, numNumbers, numRGB, numHSL };
  }
  var mixComplex = (origin, target) => {
    const template = complex.createTransformer(target);
    const originStats = analyse2(origin);
    const targetStats = analyse2(target);
    const canInterpolate = originStats.numHSL === targetStats.numHSL && originStats.numRGB === targetStats.numRGB && originStats.numNumbers >= targetStats.numNumbers;
    if (canInterpolate) {
      return pipe3(mixArray(originStats.parsed, targetStats.parsed), template);
    } else {
      warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);
      return (p) => `${p > 0 ? target : origin}`;
    }
  };

  // node_modules/popmotion/dist/es/utils/interpolate.mjs
  var mixNumber = (from2, to) => (p) => mix(from2, to, p);
  function detectMixerFactory(v) {
    if (typeof v === "number") {
      return mixNumber;
    } else if (typeof v === "string") {
      if (color2.test(v)) {
        return mixColor;
      } else {
        return mixComplex;
      }
    } else if (Array.isArray(v)) {
      return mixArray;
    } else if (typeof v === "object") {
      return mixObject;
    }
  }
  function createMixers(output, ease, customMixer) {
    const mixers = [];
    const mixerFactory = customMixer || detectMixerFactory(output[0]);
    const numMixers = output.length - 1;
    for (let i = 0; i < numMixers; i++) {
      let mixer = mixerFactory(output[i], output[i + 1]);
      if (ease) {
        const easingFunction = Array.isArray(ease) ? ease[i] : ease;
        mixer = pipe3(easingFunction, mixer);
      }
      mixers.push(mixer);
    }
    return mixers;
  }
  function fastInterpolate([from2, to], [mixer]) {
    return (v) => mixer(progress2(from2, to, v));
  }
  function slowInterpolate(input, mixers) {
    const inputLength = input.length;
    const lastInputIndex = inputLength - 1;
    return (v) => {
      let mixerIndex = 0;
      let foundMixerIndex = false;
      if (v <= input[0]) {
        foundMixerIndex = true;
      } else if (v >= input[lastInputIndex]) {
        mixerIndex = lastInputIndex - 1;
        foundMixerIndex = true;
      }
      if (!foundMixerIndex) {
        let i = 1;
        for (; i < inputLength; i++) {
          if (input[i] > v || i === lastInputIndex) {
            break;
          }
        }
        mixerIndex = i - 1;
      }
      const progressInRange = progress2(input[mixerIndex], input[mixerIndex + 1], v);
      return mixers[mixerIndex](progressInRange);
    };
  }
  function interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {
    const inputLength = input.length;
    invariant(inputLength === output.length, "Both input and output ranges must be the same length");
    invariant(!ease || !Array.isArray(ease) || ease.length === inputLength - 1, "Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.");
    if (input[0] > input[inputLength - 1]) {
      input = [].concat(input);
      output = [].concat(output);
      input.reverse();
      output.reverse();
    }
    const mixers = createMixers(output, ease, mixer);
    const interpolator = inputLength === 2 ? fastInterpolate(input, mixers) : slowInterpolate(input, mixers);
    return isClamp ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v)) : interpolator;
  }

  // node_modules/popmotion/dist/es/easing/utils.mjs
  var reverseEasing = (easing) => (p) => 1 - easing(1 - p);
  var mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;
  var createExpoIn = (power) => (p) => Math.pow(p, power);
  var createBackIn = (power) => (p) => p * p * ((power + 1) * p - power);
  var createAnticipate = (power) => {
    const backEasing = createBackIn(power);
    return (p) => (p *= 2) < 1 ? 0.5 * backEasing(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));
  };

  // node_modules/popmotion/dist/es/easing/index.mjs
  var DEFAULT_OVERSHOOT_STRENGTH = 1.525;
  var BOUNCE_FIRST_THRESHOLD = 4 / 11;
  var BOUNCE_SECOND_THRESHOLD = 8 / 11;
  var BOUNCE_THIRD_THRESHOLD = 9 / 10;
  var linear = (p) => p;
  var easeIn = createExpoIn(2);
  var easeOut = reverseEasing(easeIn);
  var easeInOut = mirrorEasing(easeIn);
  var circIn = (p) => 1 - Math.sin(Math.acos(p));
  var circOut = reverseEasing(circIn);
  var circInOut = mirrorEasing(circOut);
  var backIn = createBackIn(DEFAULT_OVERSHOOT_STRENGTH);
  var backOut = reverseEasing(backIn);
  var backInOut = mirrorEasing(backIn);
  var anticipate = createAnticipate(DEFAULT_OVERSHOOT_STRENGTH);
  var ca = 4356 / 361;
  var cb = 35442 / 1805;
  var cc = 16061 / 1805;
  var bounceOut = (p) => {
    if (p === 1 || p === 0)
      return p;
    const p2 = p * p;
    return p < BOUNCE_FIRST_THRESHOLD ? 7.5625 * p2 : p < BOUNCE_SECOND_THRESHOLD ? 9.075 * p2 - 9.9 * p + 3.4 : p < BOUNCE_THIRD_THRESHOLD ? ca * p2 - cb * p + cc : 10.8 * p * p - 20.52 * p + 10.72;
  };
  var bounceIn = reverseEasing(bounceOut);
  var bounceInOut = (p) => p < 0.5 ? 0.5 * (1 - bounceOut(1 - p * 2)) : 0.5 * bounceOut(p * 2 - 1) + 0.5;

  // node_modules/popmotion/dist/es/animations/generators/keyframes.mjs
  function defaultEasing(values, easing) {
    return values.map(() => easing || easeInOut).splice(0, values.length - 1);
  }
  function defaultOffset(values) {
    const numValues = values.length;
    return values.map((_value, i) => i !== 0 ? i / (numValues - 1) : 0);
  }
  function convertOffsetToTimes(offset, duration) {
    return offset.map((o) => o * duration);
  }
  function keyframes3({ from: from2 = 0, to = 1, ease, offset, duration = 300 }) {
    const state2 = { done: false, value: from2 };
    const values = Array.isArray(to) ? to : [from2, to];
    const times = convertOffsetToTimes(offset && offset.length === values.length ? offset : defaultOffset(values), duration);
    function createInterpolator() {
      return interpolate(times, values, {
        ease: Array.isArray(ease) ? ease : defaultEasing(values, ease)
      });
    }
    let interpolator = createInterpolator();
    return {
      next: (t2) => {
        state2.value = interpolator(t2);
        state2.done = t2 >= duration;
        return state2;
      },
      flipTarget: () => {
        values.reverse();
        interpolator = createInterpolator();
      }
    };
  }

  // node_modules/popmotion/dist/es/animations/generators/decay.mjs
  function decay({ velocity = 0, from: from2 = 0, power = 0.8, timeConstant = 350, restDelta = 0.5, modifyTarget }) {
    const state2 = { done: false, value: from2 };
    let amplitude = power * velocity;
    const ideal = from2 + amplitude;
    const target = modifyTarget === void 0 ? ideal : modifyTarget(ideal);
    if (target !== ideal)
      amplitude = target - from2;
    return {
      next: (t2) => {
        const delta = -amplitude * Math.exp(-t2 / timeConstant);
        state2.done = !(delta > restDelta || delta < -restDelta);
        state2.value = state2.done ? target : target + delta;
        return state2;
      },
      flipTarget: () => {
      }
    };
  }

  // node_modules/popmotion/dist/es/animations/utils/detect-animation-from-options.mjs
  var types = { keyframes: keyframes3, spring, decay };
  function detectAnimationFromOptions(config2) {
    if (Array.isArray(config2.to)) {
      return keyframes3;
    } else if (types[config2.type]) {
      return types[config2.type];
    }
    const keys3 = new Set(Object.keys(config2));
    if (keys3.has("ease") || keys3.has("duration") && !keys3.has("dampingRatio")) {
      return keyframes3;
    } else if (keys3.has("dampingRatio") || keys3.has("stiffness") || keys3.has("mass") || keys3.has("damping") || keys3.has("restSpeed") || keys3.has("restDelta")) {
      return spring;
    }
    return keyframes3;
  }

  // node_modules/popmotion/node_modules/framesync/dist/es/on-next-frame.mjs
  var defaultTimestep3 = 1 / 60 * 1e3;
  var getCurrentTime2 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
  var onNextFrame3 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime2()), defaultTimestep3);

  // node_modules/popmotion/node_modules/framesync/dist/es/create-render-step.mjs
  function createRenderStep3(runNextFrame3) {
    let toRun = [];
    let toRunNextFrame = [];
    let numToRun = 0;
    let isProcessing3 = false;
    let flushNextFrame = false;
    const toKeepAlive = /* @__PURE__ */ new WeakSet();
    const step = {
      schedule: (callback, keepAlive = false, immediate = false) => {
        const addToCurrentFrame = immediate && isProcessing3;
        const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
        if (keepAlive)
          toKeepAlive.add(callback);
        if (buffer.indexOf(callback) === -1) {
          buffer.push(callback);
          if (addToCurrentFrame && isProcessing3)
            numToRun = toRun.length;
        }
        return callback;
      },
      cancel: (callback) => {
        const index = toRunNextFrame.indexOf(callback);
        if (index !== -1)
          toRunNextFrame.splice(index, 1);
        toKeepAlive.delete(callback);
      },
      process: (frameData) => {
        if (isProcessing3) {
          flushNextFrame = true;
          return;
        }
        isProcessing3 = true;
        [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
        toRunNextFrame.length = 0;
        numToRun = toRun.length;
        if (numToRun) {
          for (let i = 0; i < numToRun; i++) {
            const callback = toRun[i];
            callback(frameData);
            if (toKeepAlive.has(callback)) {
              step.schedule(callback);
              runNextFrame3();
            }
          }
        }
        isProcessing3 = false;
        if (flushNextFrame) {
          flushNextFrame = false;
          step.process(frameData);
        }
      }
    };
    return step;
  }

  // node_modules/popmotion/node_modules/framesync/dist/es/index.mjs
  var maxElapsed2 = 40;
  var useDefaultElapsed2 = true;
  var runNextFrame2 = false;
  var isProcessing2 = false;
  var frame2 = {
    delta: 0,
    timestamp: 0
  };
  var stepsOrder2 = [
    "read",
    "update",
    "preRender",
    "render",
    "postRender"
  ];
  var steps2 = stepsOrder2.reduce((acc, key) => {
    acc[key] = createRenderStep3(() => runNextFrame2 = true);
    return acc;
  }, {});
  var sync2 = stepsOrder2.reduce((acc, key) => {
    const step = steps2[key];
    acc[key] = (process2, keepAlive = false, immediate = false) => {
      if (!runNextFrame2)
        startLoop2();
      return step.schedule(process2, keepAlive, immediate);
    };
    return acc;
  }, {});
  var cancelSync3 = stepsOrder2.reduce((acc, key) => {
    acc[key] = steps2[key].cancel;
    return acc;
  }, {});
  var flushSync2 = stepsOrder2.reduce((acc, key) => {
    acc[key] = () => steps2[key].process(frame2);
    return acc;
  }, {});
  var processStep2 = (stepId) => steps2[stepId].process(frame2);
  var processFrame2 = (timestamp) => {
    runNextFrame2 = false;
    frame2.delta = useDefaultElapsed2 ? defaultTimestep3 : Math.max(Math.min(timestamp - frame2.timestamp, maxElapsed2), 1);
    frame2.timestamp = timestamp;
    isProcessing2 = true;
    stepsOrder2.forEach(processStep2);
    isProcessing2 = false;
    if (runNextFrame2) {
      useDefaultElapsed2 = false;
      onNextFrame3(processFrame2);
    }
  };
  var startLoop2 = () => {
    runNextFrame2 = true;
    useDefaultElapsed2 = true;
    if (!isProcessing2)
      onNextFrame3(processFrame2);
  };
  var getFrameData3 = () => frame2;
  var es_default3 = sync2;

  // node_modules/popmotion/dist/es/animations/utils/elapsed.mjs
  function loopElapsed(elapsed, duration, delay = 0) {
    return elapsed - duration - delay;
  }
  function reverseElapsed(elapsed, duration, delay = 0, isForwardPlayback = true) {
    return isForwardPlayback ? loopElapsed(duration + -elapsed, duration, delay) : duration - (elapsed - duration) + delay;
  }
  function hasRepeatDelayElapsed(elapsed, duration, delay, isForwardPlayback) {
    return isForwardPlayback ? elapsed >= duration + delay : elapsed <= -delay;
  }

  // node_modules/popmotion/dist/es/animations/index.mjs
  var framesync = (update) => {
    const passTimestamp = ({ delta }) => update(delta);
    return {
      start: () => es_default3.update(passTimestamp, true),
      stop: () => cancelSync3.update(passTimestamp)
    };
  };
  function animate(_a) {
    var _b, _c;
    var { from: from2, autoplay = true, driver = framesync, elapsed = 0, repeat: repeatMax = 0, repeatType = "loop", repeatDelay = 0, onPlay, onStop, onComplete, onRepeat, onUpdate } = _a, options = __rest(_a, ["from", "autoplay", "driver", "elapsed", "repeat", "repeatType", "repeatDelay", "onPlay", "onStop", "onComplete", "onRepeat", "onUpdate"]);
    let { to } = options;
    let driverControls;
    let repeatCount = 0;
    let computedDuration = options.duration;
    let latest;
    let isComplete = false;
    let isForwardPlayback = true;
    let interpolateFromNumber;
    const animator = detectAnimationFromOptions(options);
    if ((_c = (_b = animator).needsInterpolation) === null || _c === void 0 ? void 0 : _c.call(_b, from2, to)) {
      interpolateFromNumber = interpolate([0, 100], [from2, to], {
        clamp: false
      });
      from2 = 0;
      to = 100;
    }
    const animation = animator(Object.assign(Object.assign({}, options), { from: from2, to }));
    function repeat() {
      repeatCount++;
      if (repeatType === "reverse") {
        isForwardPlayback = repeatCount % 2 === 0;
        elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);
      } else {
        elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);
        if (repeatType === "mirror")
          animation.flipTarget();
      }
      isComplete = false;
      onRepeat && onRepeat();
    }
    function complete() {
      driverControls.stop();
      onComplete && onComplete();
    }
    function update(delta) {
      if (!isForwardPlayback)
        delta = -delta;
      elapsed += delta;
      if (!isComplete) {
        const state2 = animation.next(Math.max(0, elapsed));
        latest = state2.value;
        if (interpolateFromNumber)
          latest = interpolateFromNumber(latest);
        isComplete = isForwardPlayback ? state2.done : elapsed <= 0;
      }
      onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(latest);
      if (isComplete) {
        if (repeatCount === 0)
          computedDuration !== null && computedDuration !== void 0 ? computedDuration : computedDuration = elapsed;
        if (repeatCount < repeatMax) {
          hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();
        } else {
          complete();
        }
      }
    }
    function play() {
      onPlay === null || onPlay === void 0 ? void 0 : onPlay();
      driverControls = driver(update);
      driverControls.start();
    }
    autoplay && play();
    return {
      stop: () => {
        onStop === null || onStop === void 0 ? void 0 : onStop();
        driverControls.stop();
      }
    };
  }

  // node_modules/popmotion/dist/es/utils/velocity-per-second.mjs
  function velocityPerSecond(velocity, frameDuration) {
    return frameDuration ? velocity * (1e3 / frameDuration) : 0;
  }

  // node_modules/popmotion/dist/es/animations/inertia.mjs
  function inertia({ from: from2 = 0, velocity = 0, min, max, power = 0.8, timeConstant = 750, bounceStiffness = 500, bounceDamping = 10, restDelta = 1, modifyTarget, driver, onUpdate, onComplete, onStop }) {
    let currentAnimation;
    function isOutOfBounds(v) {
      return min !== void 0 && v < min || max !== void 0 && v > max;
    }
    function boundaryNearest(v) {
      if (min === void 0)
        return max;
      if (max === void 0)
        return min;
      return Math.abs(min - v) < Math.abs(max - v) ? min : max;
    }
    function startAnimation2(options) {
      currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();
      currentAnimation = animate(Object.assign(Object.assign({}, options), {
        driver,
        onUpdate: (v) => {
          var _a;
          onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(v);
          (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, v);
        },
        onComplete,
        onStop
      }));
    }
    function startSpring(options) {
      startAnimation2(Object.assign({ type: "spring", stiffness: bounceStiffness, damping: bounceDamping, restDelta }, options));
    }
    if (isOutOfBounds(from2)) {
      startSpring({ from: from2, velocity, to: boundaryNearest(from2) });
    } else {
      let target = power * velocity + from2;
      if (typeof modifyTarget !== "undefined")
        target = modifyTarget(target);
      const boundary = boundaryNearest(target);
      const heading2 = boundary === min ? -1 : 1;
      let prev2;
      let current;
      const checkBoundary = (v) => {
        prev2 = current;
        current = v;
        velocity = velocityPerSecond(v - prev2, getFrameData3().delta);
        if (heading2 === 1 && v > boundary || heading2 === -1 && v < boundary) {
          startSpring({ from: v, to: boundary, velocity });
        }
      };
      startAnimation2({
        type: "decay",
        from: from2,
        velocity,
        timeConstant,
        power,
        restDelta,
        modifyTarget,
        onUpdate: isOutOfBounds(target) ? checkBoundary : void 0
      });
    }
    return {
      stop: () => currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop()
    };
  }

  // node_modules/popmotion/dist/es/utils/is-point.mjs
  var isPoint = (point) => point.hasOwnProperty("x") && point.hasOwnProperty("y");

  // node_modules/popmotion/dist/es/utils/is-point-3d.mjs
  var isPoint3D = (point) => isPoint(point) && point.hasOwnProperty("z");

  // node_modules/popmotion/dist/es/utils/distance.mjs
  var distance1D = (a2, b2) => Math.abs(a2 - b2);
  function distance(a2, b2) {
    if (isNum(a2) && isNum(b2)) {
      return distance1D(a2, b2);
    } else if (isPoint(a2) && isPoint(b2)) {
      const xDelta = distance1D(a2.x, b2.x);
      const yDelta = distance1D(a2.y, b2.y);
      const zDelta = isPoint3D(a2) && isPoint3D(b2) ? distance1D(a2.z, b2.z) : 0;
      return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2) + Math.pow(zDelta, 2));
    }
  }

  // node_modules/popmotion/dist/es/easing/cubic-bezier.mjs
  var a = (a1, a2) => 1 - 3 * a2 + 3 * a1;
  var b = (a1, a2) => 3 * a2 - 6 * a1;
  var c = (a1) => 3 * a1;
  var calcBezier = (t2, a1, a2) => ((a(a1, a2) * t2 + b(a1, a2)) * t2 + c(a1)) * t2;
  var getSlope = (t2, a1, a2) => 3 * a(a1, a2) * t2 * t2 + 2 * b(a1, a2) * t2 + c(a1);
  var subdivisionPrecision = 1e-7;
  var subdivisionMaxIterations = 10;
  function binarySubdivide(aX, aA, aB, mX1, mX2) {
    let currentX;
    let currentT;
    let i = 0;
    do {
      currentT = aA + (aB - aA) / 2;
      currentX = calcBezier(currentT, mX1, mX2) - aX;
      if (currentX > 0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > subdivisionPrecision && ++i < subdivisionMaxIterations);
    return currentT;
  }
  var newtonIterations = 8;
  var newtonMinSlope = 1e-3;
  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
    for (let i = 0; i < newtonIterations; ++i) {
      const currentSlope = getSlope(aGuessT, mX1, mX2);
      if (currentSlope === 0) {
        return aGuessT;
      }
      const currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }
    return aGuessT;
  }
  var kSplineTableSize = 11;
  var kSampleStepSize = 1 / (kSplineTableSize - 1);
  function cubicBezier(mX1, mY1, mX2, mY2) {
    if (mX1 === mY1 && mX2 === mY2)
      return linear;
    const sampleValues = new Float32Array(kSplineTableSize);
    for (let i = 0; i < kSplineTableSize; ++i) {
      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
    }
    function getTForX(aX) {
      let intervalStart = 0;
      let currentSample = 1;
      const lastSample = kSplineTableSize - 1;
      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }
      --currentSample;
      const dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      const guessForT = intervalStart + dist * kSampleStepSize;
      const initialSlope = getSlope(guessForT, mX1, mX2);
      if (initialSlope >= newtonMinSlope) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } else if (initialSlope === 0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
      }
    }
    return (t2) => t2 === 0 || t2 === 1 ? t2 : calcBezier(getTForX(t2), mY1, mY2);
  }

  // node_modules/framer-motion/dist/es/utils/array.mjs
  function addUniqueItem(arr, item) {
    arr.indexOf(item) === -1 && arr.push(item);
  }
  function removeItem(arr, item) {
    var index = arr.indexOf(item);
    index > -1 && arr.splice(index, 1);
  }

  // node_modules/framer-motion/dist/es/utils/subscription-manager.mjs
  var SubscriptionManager = function() {
    function SubscriptionManager2() {
      this.subscriptions = [];
    }
    SubscriptionManager2.prototype.add = function(handler) {
      var _this = this;
      addUniqueItem(this.subscriptions, handler);
      return function() {
        return removeItem(_this.subscriptions, handler);
      };
    };
    SubscriptionManager2.prototype.notify = function(a2, b2, c2) {
      var numSubscriptions = this.subscriptions.length;
      if (!numSubscriptions)
        return;
      if (numSubscriptions === 1) {
        this.subscriptions[0](a2, b2, c2);
      } else {
        for (var i = 0; i < numSubscriptions; i++) {
          var handler = this.subscriptions[i];
          handler && handler(a2, b2, c2);
        }
      }
    };
    SubscriptionManager2.prototype.getSize = function() {
      return this.subscriptions.length;
    };
    SubscriptionManager2.prototype.clear = function() {
      this.subscriptions.length = 0;
    };
    return SubscriptionManager2;
  }();

  // node_modules/framer-motion/dist/es/value/index.mjs
  var isFloat = function(value) {
    return !isNaN(parseFloat(value));
  };
  var MotionValue = function() {
    function MotionValue2(init) {
      var _this = this;
      this.timeDelta = 0;
      this.lastUpdated = 0;
      this.updateSubscribers = new SubscriptionManager();
      this.velocityUpdateSubscribers = new SubscriptionManager();
      this.renderSubscribers = new SubscriptionManager();
      this.canTrackVelocity = false;
      this.updateAndNotify = function(v, render3) {
        if (render3 === void 0) {
          render3 = true;
        }
        _this.prev = _this.current;
        _this.current = v;
        var _a = getFrameData2(), delta = _a.delta, timestamp = _a.timestamp;
        if (_this.lastUpdated !== timestamp) {
          _this.timeDelta = delta;
          _this.lastUpdated = timestamp;
          es_default2.postRender(_this.scheduleVelocityCheck);
        }
        if (_this.prev !== _this.current) {
          _this.updateSubscribers.notify(_this.current);
        }
        if (_this.velocityUpdateSubscribers.getSize()) {
          _this.velocityUpdateSubscribers.notify(_this.getVelocity());
        }
        if (render3) {
          _this.renderSubscribers.notify(_this.current);
        }
      };
      this.scheduleVelocityCheck = function() {
        return es_default2.postRender(_this.velocityCheck);
      };
      this.velocityCheck = function(_a) {
        var timestamp = _a.timestamp;
        if (timestamp !== _this.lastUpdated) {
          _this.prev = _this.current;
          _this.velocityUpdateSubscribers.notify(_this.getVelocity());
        }
      };
      this.hasAnimated = false;
      this.prev = this.current = init;
      this.canTrackVelocity = isFloat(this.current);
    }
    MotionValue2.prototype.onChange = function(subscription) {
      return this.updateSubscribers.add(subscription);
    };
    MotionValue2.prototype.clearListeners = function() {
      this.updateSubscribers.clear();
    };
    MotionValue2.prototype.onRenderRequest = function(subscription) {
      subscription(this.get());
      return this.renderSubscribers.add(subscription);
    };
    MotionValue2.prototype.attach = function(passiveEffect) {
      this.passiveEffect = passiveEffect;
    };
    MotionValue2.prototype.set = function(v, render3) {
      if (render3 === void 0) {
        render3 = true;
      }
      if (!render3 || !this.passiveEffect) {
        this.updateAndNotify(v, render3);
      } else {
        this.passiveEffect(v, this.updateAndNotify);
      }
    };
    MotionValue2.prototype.get = function() {
      return this.current;
    };
    MotionValue2.prototype.getPrevious = function() {
      return this.prev;
    };
    MotionValue2.prototype.getVelocity = function() {
      return this.canTrackVelocity ? velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;
    };
    MotionValue2.prototype.start = function(animation) {
      var _this = this;
      this.stop();
      return new Promise(function(resolve) {
        _this.hasAnimated = true;
        _this.stopAnimation = animation(resolve);
      }).then(function() {
        return _this.clearAnimation();
      });
    };
    MotionValue2.prototype.stop = function() {
      if (this.stopAnimation)
        this.stopAnimation();
      this.clearAnimation();
    };
    MotionValue2.prototype.isAnimating = function() {
      return !!this.stopAnimation;
    };
    MotionValue2.prototype.clearAnimation = function() {
      this.stopAnimation = null;
    };
    MotionValue2.prototype.destroy = function() {
      this.updateSubscribers.clear();
      this.renderSubscribers.clear();
      this.stop();
    };
    return MotionValue2;
  }();
  function motionValue(init) {
    return new MotionValue(init);
  }

  // node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs
  var isMotionValue = function(value) {
    return Boolean(value !== null && typeof value === "object" && value.getVelocity);
  };

  // node_modules/framer-motion/dist/es/utils/time-conversion.mjs
  var secondsToMilliseconds = function(seconds) {
    return seconds * 1e3;
  };

  // node_modules/framer-motion/dist/es/animation/utils/easing.mjs
  var easingLookup = {
    linear,
    easeIn,
    easeInOut,
    easeOut,
    circIn,
    circInOut,
    circOut,
    backIn,
    backInOut,
    backOut,
    anticipate,
    bounceIn,
    bounceInOut,
    bounceOut
  };
  var easingDefinitionToFunction = function(definition) {
    if (Array.isArray(definition)) {
      invariant(definition.length === 4, "Cubic bezier arrays must contain four numerical values.");
      var _a = __read(definition, 4), x1 = _a[0], y1 = _a[1], x2 = _a[2], y2 = _a[3];
      return cubicBezier(x1, y1, x2, y2);
    } else if (typeof definition === "string") {
      invariant(easingLookup[definition] !== void 0, "Invalid easing type '".concat(definition, "'"));
      return easingLookup[definition];
    }
    return definition;
  };
  var isEasingArray = function(ease) {
    return Array.isArray(ease) && typeof ease[0] !== "number";
  };

  // node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs
  var isAnimatable = function(key, value) {
    if (key === "zIndex")
      return false;
    if (typeof value === "number" || Array.isArray(value))
      return true;
    if (typeof value === "string" && complex.test(value) && !value.startsWith("url(")) {
      return true;
    }
    return false;
  };

  // node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs
  var isKeyframesTarget = function(v) {
    return Array.isArray(v);
  };

  // node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs
  var underDampedSpring = function() {
    return {
      type: "spring",
      stiffness: 500,
      damping: 25,
      restSpeed: 10
    };
  };
  var criticallyDampedSpring = function(to) {
    return {
      type: "spring",
      stiffness: 550,
      damping: to === 0 ? 2 * Math.sqrt(550) : 30,
      restSpeed: 10
    };
  };
  var linearTween = function() {
    return {
      type: "keyframes",
      ease: "linear",
      duration: 0.3
    };
  };
  var keyframes4 = function(values) {
    return {
      type: "keyframes",
      duration: 0.8,
      values
    };
  };
  var defaultTransitions = {
    x: underDampedSpring,
    y: underDampedSpring,
    z: underDampedSpring,
    rotate: underDampedSpring,
    rotateX: underDampedSpring,
    rotateY: underDampedSpring,
    rotateZ: underDampedSpring,
    scaleX: criticallyDampedSpring,
    scaleY: criticallyDampedSpring,
    scale: criticallyDampedSpring,
    opacity: linearTween,
    backgroundColor: linearTween,
    color: linearTween,
    default: criticallyDampedSpring
  };
  var getDefaultTransition = function(valueKey, to) {
    var transitionFactory;
    if (isKeyframesTarget(to)) {
      transitionFactory = keyframes4;
    } else {
      transitionFactory = defaultTransitions[valueKey] || defaultTransitions.default;
    }
    return __assign({ to }, transitionFactory(to));
  };

  // node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs
  var int = __assign(__assign({}, number), { transform: Math.round });

  // node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs
  var numberValueTypes = {
    borderWidth: px3,
    borderTopWidth: px3,
    borderRightWidth: px3,
    borderBottomWidth: px3,
    borderLeftWidth: px3,
    borderRadius: px3,
    radius: px3,
    borderTopLeftRadius: px3,
    borderTopRightRadius: px3,
    borderBottomRightRadius: px3,
    borderBottomLeftRadius: px3,
    width: px3,
    maxWidth: px3,
    height: px3,
    maxHeight: px3,
    size: px3,
    top: px3,
    right: px3,
    bottom: px3,
    left: px3,
    padding: px3,
    paddingTop: px3,
    paddingRight: px3,
    paddingBottom: px3,
    paddingLeft: px3,
    margin: px3,
    marginTop: px3,
    marginRight: px3,
    marginBottom: px3,
    marginLeft: px3,
    rotate: degrees,
    rotateX: degrees,
    rotateY: degrees,
    rotateZ: degrees,
    scale,
    scaleX: scale,
    scaleY: scale,
    scaleZ: scale,
    skew: degrees,
    skewX: degrees,
    skewY: degrees,
    distance: px3,
    translateX: px3,
    translateY: px3,
    translateZ: px3,
    x: px3,
    y: px3,
    z: px3,
    perspective: px3,
    transformPerspective: px3,
    opacity: alpha,
    originX: progressPercentage,
    originY: progressPercentage,
    originZ: px3,
    zIndex: int,
    fillOpacity: alpha,
    strokeOpacity: alpha,
    numOctaves: int
  };

  // node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs
  var defaultValueTypes = __assign(__assign({}, numberValueTypes), {
    color: color2,
    backgroundColor: color2,
    outlineColor: color2,
    fill: color2,
    stroke: color2,
    borderColor: color2,
    borderTopColor: color2,
    borderRightColor: color2,
    borderBottomColor: color2,
    borderLeftColor: color2,
    filter: filter3,
    WebkitFilter: filter3
  });
  var getDefaultValueType = function(key) {
    return defaultValueTypes[key];
  };

  // node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs
  function getAnimatableNone2(key, value) {
    var _a;
    var defaultValueType = getDefaultValueType(key);
    if (defaultValueType !== filter3)
      defaultValueType = complex;
    return (_a = defaultValueType.getAnimatableNone) === null || _a === void 0 ? void 0 : _a.call(defaultValueType, value);
  }

  // node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs
  var instantAnimationState = {
    current: false
  };

  // node_modules/framer-motion/dist/es/utils/resolve-value.mjs
  var isCustomValue = function(v) {
    return Boolean(v && typeof v === "object" && v.mix && v.toValue);
  };
  var resolveFinalValueInKeyframes = function(v) {
    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;
  };

  // node_modules/framer-motion/dist/es/animation/utils/transitions.mjs
  function isTransitionDefined(_a) {
    _a.when;
    _a.delay;
    _a.delayChildren;
    _a.staggerChildren;
    _a.staggerDirection;
    _a.repeat;
    _a.repeatType;
    _a.repeatDelay;
    _a.from;
    var transition3 = __rest(_a, ["when", "delay", "delayChildren", "staggerChildren", "staggerDirection", "repeat", "repeatType", "repeatDelay", "from"]);
    return !!Object.keys(transition3).length;
  }
  var legacyRepeatWarning = false;
  function convertTransitionToAnimationOptions(_a) {
    var ease = _a.ease, times = _a.times, yoyo = _a.yoyo, flip = _a.flip, loop = _a.loop, transition3 = __rest(_a, ["ease", "times", "yoyo", "flip", "loop"]);
    var options = __assign({}, transition3);
    if (times)
      options["offset"] = times;
    if (transition3.duration)
      options["duration"] = secondsToMilliseconds(transition3.duration);
    if (transition3.repeatDelay)
      options.repeatDelay = secondsToMilliseconds(transition3.repeatDelay);
    if (ease) {
      options["ease"] = isEasingArray(ease) ? ease.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease);
    }
    if (transition3.type === "tween")
      options.type = "keyframes";
    if (yoyo || loop || flip) {
      warning(!legacyRepeatWarning, "yoyo, loop and flip have been removed from the API. Replace with repeat and repeatType options.");
      legacyRepeatWarning = true;
      if (yoyo) {
        options.repeatType = "reverse";
      } else if (loop) {
        options.repeatType = "loop";
      } else if (flip) {
        options.repeatType = "mirror";
      }
      options.repeat = loop || yoyo || flip || transition3.repeat;
    }
    if (transition3.type !== "spring")
      options.type = "keyframes";
    return options;
  }
  function getDelayFromTransition(transition3, key) {
    var _a, _b;
    var valueTransition = getValueTransition(transition3, key) || {};
    return (_b = (_a = valueTransition.delay) !== null && _a !== void 0 ? _a : transition3.delay) !== null && _b !== void 0 ? _b : 0;
  }
  function hydrateKeyframes(options) {
    if (Array.isArray(options.to) && options.to[0] === null) {
      options.to = __spreadArray([], __read(options.to), false);
      options.to[0] = options.from;
    }
    return options;
  }
  function getPopmotionAnimationOptions(transition3, options, key) {
    var _a;
    if (Array.isArray(options.to)) {
      (_a = transition3.duration) !== null && _a !== void 0 ? _a : transition3.duration = 0.8;
    }
    hydrateKeyframes(options);
    if (!isTransitionDefined(transition3)) {
      transition3 = __assign(__assign({}, transition3), getDefaultTransition(key, options.to));
    }
    return __assign(__assign({}, options), convertTransitionToAnimationOptions(transition3));
  }
  function getAnimation(key, value, target, transition3, onComplete) {
    var _a;
    var valueTransition = getValueTransition(transition3, key);
    var origin = (_a = valueTransition.from) !== null && _a !== void 0 ? _a : value.get();
    var isTargetAnimatable = isAnimatable(key, target);
    if (origin === "none" && isTargetAnimatable && typeof target === "string") {
      origin = getAnimatableNone2(key, target);
    } else if (isZero(origin) && typeof target === "string") {
      origin = getZeroUnit(target);
    } else if (!Array.isArray(target) && isZero(target) && typeof origin === "string") {
      target = getZeroUnit(origin);
    }
    var isOriginAnimatable = isAnimatable(key, origin);
    warning(isOriginAnimatable === isTargetAnimatable, "You are trying to animate ".concat(key, ' from "').concat(origin, '" to "').concat(target, '". ').concat(origin, " is not an animatable value - to enable this animation set ").concat(origin, " to a value animatable to ").concat(target, " via the `style` property."));
    function start() {
      var options = {
        from: origin,
        to: target,
        velocity: value.getVelocity(),
        onComplete,
        onUpdate: function(v) {
          return value.set(v);
        }
      };
      return valueTransition.type === "inertia" || valueTransition.type === "decay" ? inertia(__assign(__assign({}, options), valueTransition)) : animate(__assign(__assign({}, getPopmotionAnimationOptions(valueTransition, options, key)), { onUpdate: function(v) {
        var _a2;
        options.onUpdate(v);
        (_a2 = valueTransition.onUpdate) === null || _a2 === void 0 ? void 0 : _a2.call(valueTransition, v);
      }, onComplete: function() {
        var _a2;
        options.onComplete();
        (_a2 = valueTransition.onComplete) === null || _a2 === void 0 ? void 0 : _a2.call(valueTransition);
      } }));
    }
    function set3() {
      var _a2, _b;
      var finalTarget = resolveFinalValueInKeyframes(target);
      value.set(finalTarget);
      onComplete();
      (_a2 = valueTransition === null || valueTransition === void 0 ? void 0 : valueTransition.onUpdate) === null || _a2 === void 0 ? void 0 : _a2.call(valueTransition, finalTarget);
      (_b = valueTransition === null || valueTransition === void 0 ? void 0 : valueTransition.onComplete) === null || _b === void 0 ? void 0 : _b.call(valueTransition);
      return { stop: function() {
      } };
    }
    return !isOriginAnimatable || !isTargetAnimatable || valueTransition.type === false ? set3 : start;
  }
  function isZero(value) {
    return value === 0 || typeof value === "string" && parseFloat(value) === 0 && value.indexOf(" ") === -1;
  }
  function getZeroUnit(potentialUnitType) {
    return typeof potentialUnitType === "number" ? 0 : getAnimatableNone2("", potentialUnitType);
  }
  function getValueTransition(transition3, key) {
    return transition3[key] || transition3["default"] || transition3;
  }
  function startAnimation(key, value, target, transition3) {
    if (transition3 === void 0) {
      transition3 = {};
    }
    if (instantAnimationState.current) {
      transition3 = { type: false };
    }
    return value.start(function(onComplete) {
      var delayTimer;
      var controls;
      var animation = getAnimation(key, value, target, transition3, onComplete);
      var delay = getDelayFromTransition(transition3, key);
      var start = function() {
        return controls = animation();
      };
      if (delay) {
        delayTimer = window.setTimeout(start, secondsToMilliseconds(delay));
      } else {
        start();
      }
      return function() {
        clearTimeout(delayTimer);
        controls === null || controls === void 0 ? void 0 : controls.stop();
      };
    });
  }

  // node_modules/framer-motion/dist/es/animation/animate.mjs
  function animate2(from2, to, transition3) {
    if (transition3 === void 0) {
      transition3 = {};
    }
    var value = isMotionValue(from2) ? from2 : motionValue(from2);
    startAnimation("", value, to, transition3);
    return {
      stop: function() {
        return value.stop();
      },
      isAnimating: function() {
        return value.isAnimating();
      }
    };
  }

  // node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs
  var borders2 = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
  var numBorders = borders2.length;
  var asNumber = function(value) {
    return typeof value === "string" ? parseFloat(value) : value;
  };
  var isPx = function(value) {
    return typeof value === "number" || px3.test(value);
  };
  function mixValues(target, follow, lead, progress3, shouldCrossfadeOpacity, isOnlyMember) {
    var _a, _b, _c, _d;
    if (shouldCrossfadeOpacity) {
      target.opacity = mix(0, (_a = lead.opacity) !== null && _a !== void 0 ? _a : 1, easeCrossfadeIn(progress3));
      target.opacityExit = mix((_b = follow.opacity) !== null && _b !== void 0 ? _b : 1, 0, easeCrossfadeOut(progress3));
    } else if (isOnlyMember) {
      target.opacity = mix((_c = follow.opacity) !== null && _c !== void 0 ? _c : 1, (_d = lead.opacity) !== null && _d !== void 0 ? _d : 1, progress3);
    }
    for (var i = 0; i < numBorders; i++) {
      var borderLabel = "border".concat(borders2[i], "Radius");
      var followRadius = getRadius(follow, borderLabel);
      var leadRadius = getRadius(lead, borderLabel);
      if (followRadius === void 0 && leadRadius === void 0)
        continue;
      followRadius || (followRadius = 0);
      leadRadius || (leadRadius = 0);
      var canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius);
      if (canMix) {
        target[borderLabel] = Math.max(mix(asNumber(followRadius), asNumber(leadRadius), progress3), 0);
        if (percent.test(leadRadius) || percent.test(followRadius)) {
          target[borderLabel] += "%";
        }
      } else {
        target[borderLabel] = leadRadius;
      }
    }
    if (follow.rotate || lead.rotate) {
      target.rotate = mix(follow.rotate || 0, lead.rotate || 0, progress3);
    }
  }
  function getRadius(values, radiusName) {
    var _a;
    return (_a = values[radiusName]) !== null && _a !== void 0 ? _a : values.borderRadius;
  }
  var easeCrossfadeIn = compress(0, 0.5, circOut);
  var easeCrossfadeOut = compress(0.5, 0.95, linear);
  function compress(min, max, easing) {
    return function(p) {
      if (p < min)
        return 0;
      if (p > max)
        return 1;
      return easing(progress2(min, max, p));
    };
  }

  // node_modules/framer-motion/dist/es/projection/geometry/copy.mjs
  function copyAxisInto(axis, originAxis) {
    axis.min = originAxis.min;
    axis.max = originAxis.max;
  }
  function copyBoxInto(box, originBox) {
    copyAxisInto(box.x, originBox.x);
    copyAxisInto(box.y, originBox.y);
  }

  // node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs
  function isIdentityScale(scale2) {
    return scale2 === void 0 || scale2 === 1;
  }
  function hasScale(_a) {
    var scale2 = _a.scale, scaleX = _a.scaleX, scaleY = _a.scaleY;
    return !isIdentityScale(scale2) || !isIdentityScale(scaleX) || !isIdentityScale(scaleY);
  }
  function hasTransform(values) {
    return hasScale(values) || hasTranslate(values.x) || hasTranslate(values.y) || values.z || values.rotate || values.rotateX || values.rotateY;
  }
  function hasTranslate(value) {
    return value && value !== "0%";
  }

  // node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs
  function scalePoint(point, scale2, originPoint) {
    var distanceFromOrigin = point - originPoint;
    var scaled = scale2 * distanceFromOrigin;
    return originPoint + scaled;
  }
  function applyPointDelta(point, translate, scale2, originPoint, boxScale) {
    if (boxScale !== void 0) {
      point = scalePoint(point, boxScale, originPoint);
    }
    return scalePoint(point, scale2, originPoint) + translate;
  }
  function applyAxisDelta(axis, translate, scale2, originPoint, boxScale) {
    if (translate === void 0) {
      translate = 0;
    }
    if (scale2 === void 0) {
      scale2 = 1;
    }
    axis.min = applyPointDelta(axis.min, translate, scale2, originPoint, boxScale);
    axis.max = applyPointDelta(axis.max, translate, scale2, originPoint, boxScale);
  }
  function applyBoxDelta(box, _a) {
    var x = _a.x, y = _a.y;
    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);
    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);
  }
  function applyTreeDeltas(box, treeScale, treePath, isSharedTransition) {
    var _a, _b;
    if (isSharedTransition === void 0) {
      isSharedTransition = false;
    }
    var treeLength = treePath.length;
    if (!treeLength)
      return;
    treeScale.x = treeScale.y = 1;
    var node3;
    var delta;
    for (var i = 0; i < treeLength; i++) {
      node3 = treePath[i];
      delta = node3.projectionDelta;
      if (((_b = (_a = node3.instance) === null || _a === void 0 ? void 0 : _a.style) === null || _b === void 0 ? void 0 : _b.display) === "contents")
        continue;
      if (isSharedTransition && node3.options.layoutScroll && node3.scroll && node3 !== node3.root) {
        transformBox(box, { x: -node3.scroll.x, y: -node3.scroll.y });
      }
      if (delta) {
        treeScale.x *= delta.x.scale;
        treeScale.y *= delta.y.scale;
        applyBoxDelta(box, delta);
      }
      if (isSharedTransition && hasTransform(node3.latestValues)) {
        transformBox(box, node3.latestValues);
      }
    }
  }
  function translateAxis(axis, distance2) {
    axis.min = axis.min + distance2;
    axis.max = axis.max + distance2;
  }
  function transformAxis(axis, transforms, _a) {
    var _b = __read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];
    var axisOrigin = transforms[originKey] !== void 0 ? transforms[originKey] : 0.5;
    var originPoint = mix(axis.min, axis.max, axisOrigin);
    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);
  }
  var xKeys = ["x", "scaleX", "originX"];
  var yKeys = ["y", "scaleY", "originY"];
  function transformBox(box, transform10) {
    transformAxis(box.x, transform10, xKeys);
    transformAxis(box.y, transform10, yKeys);
  }

  // node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs
  function calcLength(axis) {
    return axis.max - axis.min;
  }
  function isNear(value, target, maxDistance) {
    if (target === void 0) {
      target = 0;
    }
    if (maxDistance === void 0) {
      maxDistance = 0.01;
    }
    return distance(value, target) < maxDistance;
  }
  function calcAxisDelta(delta, source, target, origin) {
    if (origin === void 0) {
      origin = 0.5;
    }
    delta.origin = origin;
    delta.originPoint = mix(source.min, source.max, delta.origin);
    delta.scale = calcLength(target) / calcLength(source);
    if (isNear(delta.scale, 1, 1e-4) || isNaN(delta.scale))
      delta.scale = 1;
    delta.translate = mix(target.min, target.max, delta.origin) - delta.originPoint;
    if (isNear(delta.translate) || isNaN(delta.translate))
      delta.translate = 0;
  }
  function calcBoxDelta(delta, source, target, origin) {
    calcAxisDelta(delta.x, source.x, target.x, origin === null || origin === void 0 ? void 0 : origin.originX);
    calcAxisDelta(delta.y, source.y, target.y, origin === null || origin === void 0 ? void 0 : origin.originY);
  }
  function calcRelativeAxis(target, relative, parent) {
    target.min = parent.min + relative.min;
    target.max = target.min + calcLength(relative);
  }
  function calcRelativeBox(target, relative, parent) {
    calcRelativeAxis(target.x, relative.x, parent.x);
    calcRelativeAxis(target.y, relative.y, parent.y);
  }
  function calcRelativeAxisPosition(target, layout2, parent) {
    target.min = layout2.min - parent.min;
    target.max = target.min + calcLength(layout2);
  }
  function calcRelativePosition(target, layout2, parent) {
    calcRelativeAxisPosition(target.x, layout2.x, parent.x);
    calcRelativeAxisPosition(target.y, layout2.y, parent.y);
  }

  // node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs
  function removePointDelta(point, translate, scale2, originPoint, boxScale) {
    point -= translate;
    point = scalePoint(point, 1 / scale2, originPoint);
    if (boxScale !== void 0) {
      point = scalePoint(point, 1 / boxScale, originPoint);
    }
    return point;
  }
  function removeAxisDelta(axis, translate, scale2, origin, boxScale, originAxis, sourceAxis) {
    if (translate === void 0) {
      translate = 0;
    }
    if (scale2 === void 0) {
      scale2 = 1;
    }
    if (origin === void 0) {
      origin = 0.5;
    }
    if (originAxis === void 0) {
      originAxis = axis;
    }
    if (sourceAxis === void 0) {
      sourceAxis = axis;
    }
    if (percent.test(translate)) {
      translate = parseFloat(translate);
      var relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);
      translate = relativeProgress - sourceAxis.min;
    }
    if (typeof translate !== "number")
      return;
    var originPoint = mix(originAxis.min, originAxis.max, origin);
    if (axis === originAxis)
      originPoint -= translate;
    axis.min = removePointDelta(axis.min, translate, scale2, originPoint, boxScale);
    axis.max = removePointDelta(axis.max, translate, scale2, originPoint, boxScale);
  }
  function removeAxisTransforms(axis, transforms, _a, origin, sourceAxis) {
    var _b = __read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];
    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);
  }
  var xKeys2 = ["x", "scaleX", "originX"];
  var yKeys2 = ["y", "scaleY", "originY"];
  function removeBoxTransforms(box, transforms, originBox, sourceBox) {
    removeAxisTransforms(box.x, transforms, xKeys2, originBox === null || originBox === void 0 ? void 0 : originBox.x, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.x);
    removeAxisTransforms(box.y, transforms, yKeys2, originBox === null || originBox === void 0 ? void 0 : originBox.y, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.y);
  }

  // node_modules/framer-motion/dist/es/projection/geometry/models.mjs
  var createAxisDelta = function() {
    return {
      translate: 0,
      scale: 1,
      origin: 0,
      originPoint: 0
    };
  };
  var createDelta = function() {
    return {
      x: createAxisDelta(),
      y: createAxisDelta()
    };
  };
  var createAxis = function() {
    return { min: 0, max: 0 };
  };
  var createBox = function() {
    return {
      x: createAxis(),
      y: createAxis()
    };
  };

  // node_modules/framer-motion/dist/es/projection/geometry/utils.mjs
  function isAxisDeltaZero(delta) {
    return delta.translate === 0 && delta.scale === 1;
  }
  function isDeltaZero(delta) {
    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);
  }
  function boxEquals(a2, b2) {
    return a2.x.min === b2.x.min && a2.x.max === b2.x.max && a2.y.min === b2.y.min && a2.y.max === b2.y.max;
  }

  // node_modules/framer-motion/dist/es/projection/shared/stack.mjs
  var NodeStack = function() {
    function NodeStack2() {
      this.members = [];
    }
    NodeStack2.prototype.add = function(node3) {
      addUniqueItem(this.members, node3);
      node3.scheduleRender();
    };
    NodeStack2.prototype.remove = function(node3) {
      removeItem(this.members, node3);
      if (node3 === this.prevLead) {
        this.prevLead = void 0;
      }
      if (node3 === this.lead) {
        var prevLead = this.members[this.members.length - 1];
        if (prevLead) {
          this.promote(prevLead);
        }
      }
    };
    NodeStack2.prototype.relegate = function(node3) {
      var indexOfNode = this.members.findIndex(function(member2) {
        return node3 === member2;
      });
      if (indexOfNode === 0)
        return false;
      var prevLead;
      for (var i = indexOfNode; i >= 0; i--) {
        var member = this.members[i];
        if (member.isPresent !== false) {
          prevLead = member;
          break;
        }
      }
      if (prevLead) {
        this.promote(prevLead);
        return true;
      } else {
        return false;
      }
    };
    NodeStack2.prototype.promote = function(node3, preserveFollowOpacity) {
      var _a;
      var prevLead = this.lead;
      if (node3 === prevLead)
        return;
      this.prevLead = prevLead;
      this.lead = node3;
      node3.show();
      if (prevLead) {
        prevLead.instance && prevLead.scheduleRender();
        node3.scheduleRender();
        node3.resumeFrom = prevLead;
        if (preserveFollowOpacity) {
          node3.resumeFrom.preserveOpacity = true;
        }
        if (prevLead.snapshot) {
          node3.snapshot = prevLead.snapshot;
          node3.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;
          node3.snapshot.isShared = true;
        }
        if ((_a = node3.root) === null || _a === void 0 ? void 0 : _a.isUpdating) {
          node3.isLayoutDirty = true;
        }
        var crossfade = node3.options.crossfade;
        if (crossfade === false) {
          prevLead.hide();
        }
      }
    };
    NodeStack2.prototype.exitAnimationComplete = function() {
      this.members.forEach(function(node3) {
        var _a, _b, _c, _d, _e;
        (_b = (_a = node3.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);
        (_e = (_c = node3.resumingFrom) === null || _c === void 0 ? void 0 : (_d = _c.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d);
      });
    };
    NodeStack2.prototype.scheduleRender = function() {
      this.members.forEach(function(node3) {
        node3.instance && node3.scheduleRender(false);
      });
    };
    NodeStack2.prototype.removeLeadSnapshot = function() {
      if (this.lead && this.lead.snapshot) {
        this.lead.snapshot = void 0;
      }
    };
    return NodeStack2;
  }();

  // node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs
  var scaleCorrectors = {};
  function addScaleCorrector(correctors) {
    Object.assign(scaleCorrectors, correctors);
  }

  // node_modules/framer-motion/dist/es/projection/styles/transform.mjs
  var identityProjection = "translate3d(0px, 0px, 0) scale(1, 1)";
  function buildProjectionTransform(delta, treeScale, latestTransform) {
    var xTranslate = delta.x.translate / treeScale.x;
    var yTranslate = delta.y.translate / treeScale.y;
    var transform10 = "translate3d(".concat(xTranslate, "px, ").concat(yTranslate, "px, 0) ");
    if (latestTransform) {
      var rotate = latestTransform.rotate, rotateX = latestTransform.rotateX, rotateY = latestTransform.rotateY;
      if (rotate)
        transform10 += "rotate(".concat(rotate, "deg) ");
      if (rotateX)
        transform10 += "rotateX(".concat(rotateX, "deg) ");
      if (rotateY)
        transform10 += "rotateY(".concat(rotateY, "deg) ");
    }
    transform10 += "scale(".concat(delta.x.scale, ", ").concat(delta.y.scale, ")");
    return transform10 === identityProjection ? "none" : transform10;
  }

  // node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs
  function eachAxis(callback) {
    return [callback("x"), callback("y")];
  }

  // node_modules/framer-motion/dist/es/render/html/utils/transform.mjs
  var transformAxes = ["", "X", "Y", "Z"];
  var order = ["translate", "scale", "rotate", "skew"];
  var transformProps = ["transformPerspective", "x", "y", "z"];
  order.forEach(function(operationKey) {
    return transformAxes.forEach(function(axesKey) {
      return transformProps.push(operationKey + axesKey);
    });
  });
  function sortTransformProps(a2, b2) {
    return transformProps.indexOf(a2) - transformProps.indexOf(b2);
  }
  var transformPropSet = new Set(transformProps);
  function isTransformProp(key) {
    return transformPropSet.has(key);
  }
  var transformOriginProps = /* @__PURE__ */ new Set(["originX", "originY", "originZ"]);
  function isTransformOriginProp(key) {
    return transformOriginProps.has(key);
  }

  // node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs
  var compareByDepth = function(a2, b2) {
    return a2.depth - b2.depth;
  };

  // node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs
  var FlatTree = function() {
    function FlatTree2() {
      this.children = [];
      this.isDirty = false;
    }
    FlatTree2.prototype.add = function(child) {
      addUniqueItem(this.children, child);
      this.isDirty = true;
    };
    FlatTree2.prototype.remove = function(child) {
      removeItem(this.children, child);
      this.isDirty = true;
    };
    FlatTree2.prototype.forEach = function(callback) {
      this.isDirty && this.children.sort(compareByDepth);
      this.isDirty = false;
      this.children.forEach(callback);
    };
    return FlatTree2;
  }();

  // node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs
  function resolveMotionValue(value) {
    var unwrappedValue = isMotionValue(value) ? value.get() : value;
    return isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;
  }

  // node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs
  var animationTarget = 1e3;
  var globalProjectionState = {
    hasAnimatedSinceResize: true,
    hasEverUpdated: false
  };
  function createProjectionNode(_a) {
    var attachResizeListener = _a.attachResizeListener, defaultParent = _a.defaultParent, measureScroll = _a.measureScroll, resetTransform = _a.resetTransform;
    return function() {
      function ProjectionNode(id2, latestValues, parent) {
        var _this = this;
        if (latestValues === void 0) {
          latestValues = {};
        }
        if (parent === void 0) {
          parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();
        }
        this.children = /* @__PURE__ */ new Set();
        this.options = {};
        this.isTreeAnimating = false;
        this.isAnimationBlocked = false;
        this.isLayoutDirty = false;
        this.updateManuallyBlocked = false;
        this.updateBlockedByResize = false;
        this.isUpdating = false;
        this.isSVG = false;
        this.needsReset = false;
        this.shouldResetTransform = false;
        this.treeScale = { x: 1, y: 1 };
        this.eventHandlers = /* @__PURE__ */ new Map();
        this.potentialNodes = /* @__PURE__ */ new Map();
        this.checkUpdateFailed = function() {
          if (_this.isUpdating) {
            _this.isUpdating = false;
            _this.clearAllSnapshots();
          }
        };
        this.updateProjection = function() {
          _this.nodes.forEach(resolveTargetDelta);
          _this.nodes.forEach(calcProjection);
        };
        this.hasProjected = false;
        this.isVisible = true;
        this.animationProgress = 0;
        this.sharedNodes = /* @__PURE__ */ new Map();
        this.id = id2;
        this.latestValues = latestValues;
        this.root = parent ? parent.root || parent : this;
        this.path = parent ? __spreadArray(__spreadArray([], __read(parent.path), false), [parent], false) : [];
        this.parent = parent;
        this.depth = parent ? parent.depth + 1 : 0;
        id2 && this.root.registerPotentialNode(id2, this);
        for (var i = 0; i < this.path.length; i++) {
          this.path[i].shouldResetTransform = true;
        }
        if (this.root === this)
          this.nodes = new FlatTree();
      }
      ProjectionNode.prototype.addEventListener = function(name, handler) {
        if (!this.eventHandlers.has(name)) {
          this.eventHandlers.set(name, new SubscriptionManager());
        }
        return this.eventHandlers.get(name).add(handler);
      };
      ProjectionNode.prototype.notifyListeners = function(name) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }
        var subscriptionManager = this.eventHandlers.get(name);
        subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify.apply(subscriptionManager, __spreadArray([], __read(args), false));
      };
      ProjectionNode.prototype.hasListeners = function(name) {
        return this.eventHandlers.has(name);
      };
      ProjectionNode.prototype.registerPotentialNode = function(id2, node3) {
        this.potentialNodes.set(id2, node3);
      };
      ProjectionNode.prototype.mount = function(instance, isLayoutDirty) {
        var _this = this;
        var _a2;
        if (isLayoutDirty === void 0) {
          isLayoutDirty = false;
        }
        if (this.instance)
          return;
        this.isSVG = instance instanceof SVGElement && instance.tagName !== "svg";
        this.instance = instance;
        var _b = this.options, layoutId = _b.layoutId, layout2 = _b.layout, visualElement2 = _b.visualElement;
        if (visualElement2 && !visualElement2.getInstance()) {
          visualElement2.mount(instance);
        }
        this.root.nodes.add(this);
        (_a2 = this.parent) === null || _a2 === void 0 ? void 0 : _a2.children.add(this);
        this.id && this.root.potentialNodes.delete(this.id);
        if (isLayoutDirty && (layout2 || layoutId)) {
          this.isLayoutDirty = true;
        }
        if (attachResizeListener) {
          var unblockTimeout_1;
          var resizeUnblockUpdate_1 = function() {
            return _this.root.updateBlockedByResize = false;
          };
          attachResizeListener(instance, function() {
            _this.root.updateBlockedByResize = true;
            clearTimeout(unblockTimeout_1);
            unblockTimeout_1 = window.setTimeout(resizeUnblockUpdate_1, 250);
            if (globalProjectionState.hasAnimatedSinceResize) {
              globalProjectionState.hasAnimatedSinceResize = false;
              _this.nodes.forEach(finishAnimation);
            }
          });
        }
        if (layoutId) {
          this.root.registerSharedNode(layoutId, this);
        }
        if (this.options.animate !== false && visualElement2 && (layoutId || layout2)) {
          this.addEventListener("didUpdate", function(_a3) {
            var _b2, _c, _d, _e, _f;
            var delta = _a3.delta, hasLayoutChanged = _a3.hasLayoutChanged, hasRelativeTargetChanged = _a3.hasRelativeTargetChanged, newLayout = _a3.layout;
            if (_this.isTreeAnimationBlocked()) {
              _this.target = void 0;
              _this.relativeTarget = void 0;
              return;
            }
            var layoutTransition = (_c = (_b2 = _this.options.transition) !== null && _b2 !== void 0 ? _b2 : visualElement2.getDefaultTransition()) !== null && _c !== void 0 ? _c : defaultLayoutTransition;
            var onLayoutAnimationComplete = visualElement2.getProps().onLayoutAnimationComplete;
            var targetChanged = !_this.targetLayout || !boxEquals(_this.targetLayout, newLayout) || hasRelativeTargetChanged;
            var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;
            if (((_d = _this.resumeFrom) === null || _d === void 0 ? void 0 : _d.instance) || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !_this.currentAnimation)) {
              if (_this.resumeFrom) {
                _this.resumingFrom = _this.resumeFrom;
                _this.resumingFrom.resumingFrom = void 0;
              }
              _this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);
              var animationOptions = __assign(__assign({}, getValueTransition(layoutTransition, "layout")), { onComplete: onLayoutAnimationComplete });
              if (visualElement2.shouldReduceMotion) {
                animationOptions.delay = 0;
                animationOptions.type = false;
              }
              _this.startAnimation(animationOptions);
            } else {
              if (!hasLayoutChanged && _this.animationProgress === 0) {
                _this.finishAnimation();
              }
              _this.isLead() && ((_f = (_e = _this.options).onExitComplete) === null || _f === void 0 ? void 0 : _f.call(_e));
            }
            _this.targetLayout = newLayout;
          });
        }
      };
      ProjectionNode.prototype.unmount = function() {
        var _a2, _b;
        this.options.layoutId && this.willUpdate();
        this.root.nodes.remove(this);
        (_a2 = this.getStack()) === null || _a2 === void 0 ? void 0 : _a2.remove(this);
        (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);
        this.instance = void 0;
        cancelSync2.preRender(this.updateProjection);
      };
      ProjectionNode.prototype.blockUpdate = function() {
        this.updateManuallyBlocked = true;
      };
      ProjectionNode.prototype.unblockUpdate = function() {
        this.updateManuallyBlocked = false;
      };
      ProjectionNode.prototype.isUpdateBlocked = function() {
        return this.updateManuallyBlocked || this.updateBlockedByResize;
      };
      ProjectionNode.prototype.isTreeAnimationBlocked = function() {
        var _a2;
        return this.isAnimationBlocked || ((_a2 = this.parent) === null || _a2 === void 0 ? void 0 : _a2.isTreeAnimationBlocked()) || false;
      };
      ProjectionNode.prototype.startUpdate = function() {
        var _a2;
        if (this.isUpdateBlocked())
          return;
        this.isUpdating = true;
        (_a2 = this.nodes) === null || _a2 === void 0 ? void 0 : _a2.forEach(resetRotation);
      };
      ProjectionNode.prototype.willUpdate = function(shouldNotifyListeners) {
        var _a2, _b, _c;
        if (shouldNotifyListeners === void 0) {
          shouldNotifyListeners = true;
        }
        if (this.root.isUpdateBlocked()) {
          (_b = (_a2 = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a2);
          return;
        }
        !this.root.isUpdating && this.root.startUpdate();
        if (this.isLayoutDirty)
          return;
        this.isLayoutDirty = true;
        for (var i = 0; i < this.path.length; i++) {
          var node3 = this.path[i];
          node3.shouldResetTransform = true;
          node3.updateScroll();
        }
        var _d = this.options, layoutId = _d.layoutId, layout2 = _d.layout;
        if (layoutId === void 0 && !layout2)
          return;
        var transformTemplate2 = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;
        this.prevTransformTemplateValue = transformTemplate2 === null || transformTemplate2 === void 0 ? void 0 : transformTemplate2(this.latestValues, "");
        this.updateSnapshot();
        shouldNotifyListeners && this.notifyListeners("willUpdate");
      };
      ProjectionNode.prototype.didUpdate = function() {
        var updateWasBlocked = this.isUpdateBlocked();
        if (updateWasBlocked) {
          this.unblockUpdate();
          this.clearAllSnapshots();
          this.nodes.forEach(clearMeasurements);
          return;
        }
        if (!this.isUpdating)
          return;
        this.isUpdating = false;
        if (this.potentialNodes.size) {
          this.potentialNodes.forEach(mountNodeEarly);
          this.potentialNodes.clear();
        }
        this.nodes.forEach(resetTransformStyle);
        this.nodes.forEach(updateLayout);
        this.nodes.forEach(notifyLayoutUpdate);
        this.clearAllSnapshots();
        flushSync.update();
        flushSync.preRender();
        flushSync.render();
      };
      ProjectionNode.prototype.clearAllSnapshots = function() {
        this.nodes.forEach(clearSnapshot);
        this.sharedNodes.forEach(removeLeadSnapshots);
      };
      ProjectionNode.prototype.scheduleUpdateProjection = function() {
        es_default2.preRender(this.updateProjection, false, true);
      };
      ProjectionNode.prototype.scheduleCheckAfterUnmount = function() {
        var _this = this;
        es_default2.postRender(function() {
          if (_this.isLayoutDirty) {
            _this.root.didUpdate();
          } else {
            _this.root.checkUpdateFailed();
          }
        });
      };
      ProjectionNode.prototype.updateSnapshot = function() {
        if (this.snapshot || !this.instance)
          return;
        var measured = this.measure();
        var layout2 = this.removeTransform(this.removeElementScroll(measured));
        roundBox(layout2);
        this.snapshot = {
          measured,
          layout: layout2,
          latestValues: {}
        };
      };
      ProjectionNode.prototype.updateLayout = function() {
        var _a2;
        if (!this.instance)
          return;
        this.updateScroll();
        if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {
          return;
        }
        if (this.resumeFrom && !this.resumeFrom.instance) {
          for (var i = 0; i < this.path.length; i++) {
            var node3 = this.path[i];
            node3.updateScroll();
          }
        }
        var measured = this.measure();
        roundBox(measured);
        var prevLayout = this.layout;
        this.layout = {
          measured,
          actual: this.removeElementScroll(measured)
        };
        this.layoutCorrected = createBox();
        this.isLayoutDirty = false;
        this.projectionDelta = void 0;
        this.notifyListeners("measure", this.layout.actual);
        (_a2 = this.options.visualElement) === null || _a2 === void 0 ? void 0 : _a2.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);
      };
      ProjectionNode.prototype.updateScroll = function() {
        if (this.options.layoutScroll && this.instance) {
          this.scroll = measureScroll(this.instance);
        }
      };
      ProjectionNode.prototype.resetTransform = function() {
        var _a2;
        if (!resetTransform)
          return;
        var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;
        var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);
        var transformTemplate2 = (_a2 = this.options.visualElement) === null || _a2 === void 0 ? void 0 : _a2.getProps().transformTemplate;
        var transformTemplateValue = transformTemplate2 === null || transformTemplate2 === void 0 ? void 0 : transformTemplate2(this.latestValues, "");
        var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;
        if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {
          resetTransform(this.instance, transformTemplateValue);
          this.shouldResetTransform = false;
          this.scheduleRender();
        }
      };
      ProjectionNode.prototype.measure = function() {
        var visualElement2 = this.options.visualElement;
        if (!visualElement2)
          return createBox();
        var box = visualElement2.measureViewportBox();
        var scroll2 = this.root.scroll;
        if (scroll2) {
          translateAxis(box.x, scroll2.x);
          translateAxis(box.y, scroll2.y);
        }
        return box;
      };
      ProjectionNode.prototype.removeElementScroll = function(box) {
        var boxWithoutScroll = createBox();
        copyBoxInto(boxWithoutScroll, box);
        for (var i = 0; i < this.path.length; i++) {
          var node3 = this.path[i];
          var scroll_1 = node3.scroll, options = node3.options;
          if (node3 !== this.root && scroll_1 && options.layoutScroll) {
            translateAxis(boxWithoutScroll.x, scroll_1.x);
            translateAxis(boxWithoutScroll.y, scroll_1.y);
          }
        }
        return boxWithoutScroll;
      };
      ProjectionNode.prototype.applyTransform = function(box, transformOnly) {
        if (transformOnly === void 0) {
          transformOnly = false;
        }
        var withTransforms = createBox();
        copyBoxInto(withTransforms, box);
        for (var i = 0; i < this.path.length; i++) {
          var node3 = this.path[i];
          if (!transformOnly && node3.options.layoutScroll && node3.scroll && node3 !== node3.root) {
            transformBox(withTransforms, {
              x: -node3.scroll.x,
              y: -node3.scroll.y
            });
          }
          if (!hasTransform(node3.latestValues))
            continue;
          transformBox(withTransforms, node3.latestValues);
        }
        if (hasTransform(this.latestValues)) {
          transformBox(withTransforms, this.latestValues);
        }
        return withTransforms;
      };
      ProjectionNode.prototype.removeTransform = function(box) {
        var _a2;
        var boxWithoutTransform = createBox();
        copyBoxInto(boxWithoutTransform, box);
        for (var i = 0; i < this.path.length; i++) {
          var node3 = this.path[i];
          if (!node3.instance)
            continue;
          if (!hasTransform(node3.latestValues))
            continue;
          hasScale(node3.latestValues) && node3.updateSnapshot();
          var sourceBox = createBox();
          var nodeBox = node3.measure();
          copyBoxInto(sourceBox, nodeBox);
          removeBoxTransforms(boxWithoutTransform, node3.latestValues, (_a2 = node3.snapshot) === null || _a2 === void 0 ? void 0 : _a2.layout, sourceBox);
        }
        if (hasTransform(this.latestValues)) {
          removeBoxTransforms(boxWithoutTransform, this.latestValues);
        }
        return boxWithoutTransform;
      };
      ProjectionNode.prototype.setTargetDelta = function(delta) {
        this.targetDelta = delta;
        this.root.scheduleUpdateProjection();
      };
      ProjectionNode.prototype.setOptions = function(options) {
        var _a2;
        this.options = __assign(__assign(__assign({}, this.options), options), { crossfade: (_a2 = options.crossfade) !== null && _a2 !== void 0 ? _a2 : true });
      };
      ProjectionNode.prototype.clearMeasurements = function() {
        this.scroll = void 0;
        this.layout = void 0;
        this.snapshot = void 0;
        this.prevTransformTemplateValue = void 0;
        this.targetDelta = void 0;
        this.target = void 0;
        this.isLayoutDirty = false;
      };
      ProjectionNode.prototype.resolveTargetDelta = function() {
        var _a2;
        var _b = this.options, layout2 = _b.layout, layoutId = _b.layoutId;
        if (!this.layout || !(layout2 || layoutId))
          return;
        if (!this.targetDelta && !this.relativeTarget) {
          this.relativeParent = this.getClosestProjectingParent();
          if (this.relativeParent && this.relativeParent.layout) {
            this.relativeTarget = createBox();
            this.relativeTargetOrigin = createBox();
            calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);
            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
          }
        }
        if (!this.relativeTarget && !this.targetDelta)
          return;
        if (!this.target) {
          this.target = createBox();
          this.targetWithTransforms = createBox();
        }
        if (this.relativeTarget && this.relativeTargetOrigin && ((_a2 = this.relativeParent) === null || _a2 === void 0 ? void 0 : _a2.target)) {
          calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);
        } else if (this.targetDelta) {
          if (Boolean(this.resumingFrom)) {
            this.target = this.applyTransform(this.layout.actual);
          } else {
            copyBoxInto(this.target, this.layout.actual);
          }
          applyBoxDelta(this.target, this.targetDelta);
        } else {
          copyBoxInto(this.target, this.layout.actual);
        }
        if (this.attemptToResolveRelativeTarget) {
          this.attemptToResolveRelativeTarget = false;
          this.relativeParent = this.getClosestProjectingParent();
          if (this.relativeParent && Boolean(this.relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !this.relativeParent.options.layoutScroll && this.relativeParent.target) {
            this.relativeTarget = createBox();
            this.relativeTargetOrigin = createBox();
            calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);
            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
          }
        }
      };
      ProjectionNode.prototype.getClosestProjectingParent = function() {
        if (!this.parent || hasTransform(this.parent.latestValues))
          return void 0;
        if ((this.parent.relativeTarget || this.parent.targetDelta) && this.parent.layout) {
          return this.parent;
        } else {
          return this.parent.getClosestProjectingParent();
        }
      };
      ProjectionNode.prototype.calcProjection = function() {
        var _a2;
        var _b = this.options, layout2 = _b.layout, layoutId = _b.layoutId;
        this.isTreeAnimating = Boolean(((_a2 = this.parent) === null || _a2 === void 0 ? void 0 : _a2.isTreeAnimating) || this.currentAnimation || this.pendingAnimation);
        if (!this.isTreeAnimating) {
          this.targetDelta = this.relativeTarget = void 0;
        }
        if (!this.layout || !(layout2 || layoutId))
          return;
        var lead = this.getLead();
        copyBoxInto(this.layoutCorrected, this.layout.actual);
        applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);
        var target = lead.target;
        if (!target)
          return;
        if (!this.projectionDelta) {
          this.projectionDelta = createDelta();
          this.projectionDeltaWithTransform = createDelta();
        }
        var prevTreeScaleX = this.treeScale.x;
        var prevTreeScaleY = this.treeScale.y;
        var prevProjectionTransform = this.projectionTransform;
        calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);
        this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);
        if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {
          this.hasProjected = true;
          this.scheduleRender();
          this.notifyListeners("projectionUpdate", target);
        }
      };
      ProjectionNode.prototype.hide = function() {
        this.isVisible = false;
      };
      ProjectionNode.prototype.show = function() {
        this.isVisible = true;
      };
      ProjectionNode.prototype.scheduleRender = function(notifyAll) {
        var _a2, _b, _c;
        if (notifyAll === void 0) {
          notifyAll = true;
        }
        (_b = (_a2 = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a2);
        notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());
        if (this.resumingFrom && !this.resumingFrom.instance) {
          this.resumingFrom = void 0;
        }
      };
      ProjectionNode.prototype.setAnimationOrigin = function(delta, hasOnlyRelativeTargetChanged) {
        var _this = this;
        var _a2;
        if (hasOnlyRelativeTargetChanged === void 0) {
          hasOnlyRelativeTargetChanged = false;
        }
        var snapshot = this.snapshot;
        var snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};
        var mixedValues = __assign({}, this.latestValues);
        var targetDelta = createDelta();
        this.relativeTarget = this.relativeTargetOrigin = void 0;
        this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;
        var relativeLayout = createBox();
        var isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;
        var isOnlyMember = (((_a2 = this.getStack()) === null || _a2 === void 0 ? void 0 : _a2.members.length) || 0) <= 1;
        var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));
        this.animationProgress = 0;
        this.mixTargetDelta = function(latest) {
          var _a3;
          var progress3 = latest / 1e3;
          mixAxisDelta(targetDelta.x, delta.x, progress3);
          mixAxisDelta(targetDelta.y, delta.y, progress3);
          _this.setTargetDelta(targetDelta);
          if (_this.relativeTarget && _this.relativeTargetOrigin && _this.layout && ((_a3 = _this.relativeParent) === null || _a3 === void 0 ? void 0 : _a3.layout)) {
            calcRelativePosition(relativeLayout, _this.layout.actual, _this.relativeParent.layout.actual);
            mixBox(_this.relativeTarget, _this.relativeTargetOrigin, relativeLayout, progress3);
          }
          if (isSharedLayoutAnimation) {
            _this.animationValues = mixedValues;
            mixValues(mixedValues, snapshotLatestValues, _this.latestValues, progress3, shouldCrossfadeOpacity, isOnlyMember);
          }
          _this.root.scheduleUpdateProjection();
          _this.scheduleRender();
          _this.animationProgress = progress3;
        };
        this.mixTargetDelta(0);
      };
      ProjectionNode.prototype.startAnimation = function(options) {
        var _this = this;
        var _a2, _b;
        (_a2 = this.currentAnimation) === null || _a2 === void 0 ? void 0 : _a2.stop();
        if (this.resumingFrom) {
          (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();
        }
        if (this.pendingAnimation) {
          cancelSync2.update(this.pendingAnimation);
          this.pendingAnimation = void 0;
        }
        this.pendingAnimation = es_default2.update(function() {
          globalProjectionState.hasAnimatedSinceResize = true;
          _this.currentAnimation = animate2(0, animationTarget, __assign(__assign({}, options), { onUpdate: function(latest) {
            var _a3;
            _this.mixTargetDelta(latest);
            (_a3 = options.onUpdate) === null || _a3 === void 0 ? void 0 : _a3.call(options, latest);
          }, onComplete: function() {
            var _a3;
            (_a3 = options.onComplete) === null || _a3 === void 0 ? void 0 : _a3.call(options);
            _this.completeAnimation();
          } }));
          if (_this.resumingFrom) {
            _this.resumingFrom.currentAnimation = _this.currentAnimation;
          }
          _this.pendingAnimation = void 0;
        });
      };
      ProjectionNode.prototype.completeAnimation = function() {
        var _a2;
        if (this.resumingFrom) {
          this.resumingFrom.currentAnimation = void 0;
          this.resumingFrom.preserveOpacity = void 0;
        }
        (_a2 = this.getStack()) === null || _a2 === void 0 ? void 0 : _a2.exitAnimationComplete();
        this.resumingFrom = this.currentAnimation = this.animationValues = void 0;
        this.notifyListeners("animationComplete");
      };
      ProjectionNode.prototype.finishAnimation = function() {
        var _a2;
        if (this.currentAnimation) {
          (_a2 = this.mixTargetDelta) === null || _a2 === void 0 ? void 0 : _a2.call(this, animationTarget);
          this.currentAnimation.stop();
        }
        this.completeAnimation();
      };
      ProjectionNode.prototype.applyTransformsToTarget = function() {
        var _a2 = this.getLead(), targetWithTransforms = _a2.targetWithTransforms, target = _a2.target, layout2 = _a2.layout, latestValues = _a2.latestValues;
        if (!targetWithTransforms || !target || !layout2)
          return;
        copyBoxInto(targetWithTransforms, target);
        transformBox(targetWithTransforms, latestValues);
        calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);
      };
      ProjectionNode.prototype.registerSharedNode = function(layoutId, node3) {
        var _a2, _b, _c;
        if (!this.sharedNodes.has(layoutId)) {
          this.sharedNodes.set(layoutId, new NodeStack());
        }
        var stack = this.sharedNodes.get(layoutId);
        stack.add(node3);
        node3.promote({
          transition: (_a2 = node3.options.initialPromotionConfig) === null || _a2 === void 0 ? void 0 : _a2.transition,
          preserveFollowOpacity: (_c = (_b = node3.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node3)
        });
      };
      ProjectionNode.prototype.isLead = function() {
        var stack = this.getStack();
        return stack ? stack.lead === this : true;
      };
      ProjectionNode.prototype.getLead = function() {
        var _a2;
        var layoutId = this.options.layoutId;
        return layoutId ? ((_a2 = this.getStack()) === null || _a2 === void 0 ? void 0 : _a2.lead) || this : this;
      };
      ProjectionNode.prototype.getPrevLead = function() {
        var _a2;
        var layoutId = this.options.layoutId;
        return layoutId ? (_a2 = this.getStack()) === null || _a2 === void 0 ? void 0 : _a2.prevLead : void 0;
      };
      ProjectionNode.prototype.getStack = function() {
        var layoutId = this.options.layoutId;
        if (layoutId)
          return this.root.sharedNodes.get(layoutId);
      };
      ProjectionNode.prototype.promote = function(_a2) {
        var _b = _a2 === void 0 ? {} : _a2, needsReset = _b.needsReset, transition3 = _b.transition, preserveFollowOpacity = _b.preserveFollowOpacity;
        var stack = this.getStack();
        if (stack)
          stack.promote(this, preserveFollowOpacity);
        if (needsReset) {
          this.projectionDelta = void 0;
          this.needsReset = true;
        }
        if (transition3)
          this.setOptions({ transition: transition3 });
      };
      ProjectionNode.prototype.relegate = function() {
        var stack = this.getStack();
        if (stack) {
          return stack.relegate(this);
        } else {
          return false;
        }
      };
      ProjectionNode.prototype.resetRotation = function() {
        var visualElement2 = this.options.visualElement;
        if (!visualElement2)
          return;
        var hasRotate = false;
        var resetValues = {};
        for (var i = 0; i < transformAxes.length; i++) {
          var axis = transformAxes[i];
          var key = "rotate" + axis;
          if (!visualElement2.getStaticValue(key)) {
            continue;
          }
          hasRotate = true;
          resetValues[key] = visualElement2.getStaticValue(key);
          visualElement2.setStaticValue(key, 0);
        }
        if (!hasRotate)
          return;
        visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.syncRender();
        for (var key in resetValues) {
          visualElement2.setStaticValue(key, resetValues[key]);
        }
        visualElement2.scheduleRender();
      };
      ProjectionNode.prototype.getProjectionStyles = function(styleProp) {
        var _a2, _b, _c, _d, _e, _f;
        if (styleProp === void 0) {
          styleProp = {};
        }
        var styles2 = {};
        if (!this.instance || this.isSVG)
          return styles2;
        if (!this.isVisible) {
          return { visibility: "hidden" };
        } else {
          styles2.visibility = "";
        }
        var transformTemplate2 = (_a2 = this.options.visualElement) === null || _a2 === void 0 ? void 0 : _a2.getProps().transformTemplate;
        if (this.needsReset) {
          this.needsReset = false;
          styles2.opacity = "";
          styles2.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || "";
          styles2.transform = transformTemplate2 ? transformTemplate2(this.latestValues, "") : "none";
          return styles2;
        }
        var lead = this.getLead();
        if (!this.projectionDelta || !this.layout || !lead.target) {
          var emptyStyles = {};
          if (this.options.layoutId) {
            emptyStyles.opacity = (_b = this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1;
            emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || "";
          }
          if (this.hasProjected && !hasTransform(this.latestValues)) {
            emptyStyles.transform = transformTemplate2 ? transformTemplate2({}, "") : "none";
            this.hasProjected = false;
          }
          return emptyStyles;
        }
        var valuesToRender = lead.animationValues || lead.latestValues;
        this.applyTransformsToTarget();
        styles2.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);
        if (transformTemplate2) {
          styles2.transform = transformTemplate2(valuesToRender, styles2.transform);
        }
        var _g = this.projectionDelta, x = _g.x, y = _g.y;
        styles2.transformOrigin = "".concat(x.origin * 100, "% ").concat(y.origin * 100, "% 0");
        if (lead.animationValues) {
          styles2.opacity = lead === this ? (_d = (_c = valuesToRender.opacity) !== null && _c !== void 0 ? _c : this.latestValues.opacity) !== null && _d !== void 0 ? _d : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;
        } else {
          styles2.opacity = lead === this ? (_e = valuesToRender.opacity) !== null && _e !== void 0 ? _e : "" : (_f = valuesToRender.opacityExit) !== null && _f !== void 0 ? _f : 0;
        }
        for (var key in scaleCorrectors) {
          if (valuesToRender[key] === void 0)
            continue;
          var _h = scaleCorrectors[key], correct = _h.correct, applyTo = _h.applyTo;
          var corrected = correct(valuesToRender[key], lead);
          if (applyTo) {
            var num = applyTo.length;
            for (var i = 0; i < num; i++) {
              styles2[applyTo[i]] = corrected;
            }
          } else {
            styles2[key] = corrected;
          }
        }
        if (this.options.layoutId) {
          styles2.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || "" : "none";
        }
        return styles2;
      };
      ProjectionNode.prototype.clearSnapshot = function() {
        this.resumeFrom = this.snapshot = void 0;
      };
      ProjectionNode.prototype.resetTree = function() {
        this.root.nodes.forEach(function(node3) {
          var _a2;
          return (_a2 = node3.currentAnimation) === null || _a2 === void 0 ? void 0 : _a2.stop();
        });
        this.root.nodes.forEach(clearMeasurements);
        this.root.sharedNodes.clear();
      };
      return ProjectionNode;
    }();
  }
  function updateLayout(node3) {
    node3.updateLayout();
  }
  function notifyLayoutUpdate(node3) {
    var _a, _b, _c, _d;
    var snapshot = (_b = (_a = node3.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) !== null && _b !== void 0 ? _b : node3.snapshot;
    if (node3.isLead() && node3.layout && snapshot && node3.hasListeners("didUpdate")) {
      var _e = node3.layout, layout_1 = _e.actual, measuredLayout = _e.measured;
      if (node3.options.animationType === "size") {
        eachAxis(function(axis) {
          var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];
          var length2 = calcLength(axisSnapshot);
          axisSnapshot.min = layout_1[axis].min;
          axisSnapshot.max = axisSnapshot.min + length2;
        });
      } else if (node3.options.animationType === "position") {
        eachAxis(function(axis) {
          var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];
          var length2 = calcLength(layout_1[axis]);
          axisSnapshot.max = axisSnapshot.min + length2;
        });
      }
      var layoutDelta = createDelta();
      calcBoxDelta(layoutDelta, layout_1, snapshot.layout);
      var visualDelta = createDelta();
      if (snapshot.isShared) {
        calcBoxDelta(visualDelta, node3.applyTransform(measuredLayout, true), snapshot.measured);
      } else {
        calcBoxDelta(visualDelta, layout_1, snapshot.layout);
      }
      var hasLayoutChanged = !isDeltaZero(layoutDelta);
      var hasRelativeTargetChanged = false;
      if (!node3.resumeFrom) {
        node3.relativeParent = node3.getClosestProjectingParent();
        if (node3.relativeParent && !node3.relativeParent.resumeFrom) {
          var _f = node3.relativeParent, parentSnapshot = _f.snapshot, parentLayout = _f.layout;
          if (parentSnapshot && parentLayout) {
            var relativeSnapshot = createBox();
            calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);
            var relativeLayout = createBox();
            calcRelativePosition(relativeLayout, layout_1, parentLayout.actual);
            if (!boxEquals(relativeSnapshot, relativeLayout)) {
              hasRelativeTargetChanged = true;
            }
          }
        }
      }
      node3.notifyListeners("didUpdate", {
        layout: layout_1,
        snapshot,
        delta: visualDelta,
        layoutDelta,
        hasLayoutChanged,
        hasRelativeTargetChanged
      });
    } else if (node3.isLead()) {
      (_d = (_c = node3.options).onExitComplete) === null || _d === void 0 ? void 0 : _d.call(_c);
    }
    node3.options.transition = void 0;
  }
  function clearSnapshot(node3) {
    node3.clearSnapshot();
  }
  function clearMeasurements(node3) {
    node3.clearMeasurements();
  }
  function resetTransformStyle(node3) {
    var visualElement2 = node3.options.visualElement;
    if (visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.getProps().onBeforeLayoutMeasure) {
      visualElement2.notifyBeforeLayoutMeasure();
    }
    node3.resetTransform();
  }
  function finishAnimation(node3) {
    node3.finishAnimation();
    node3.targetDelta = node3.relativeTarget = node3.target = void 0;
  }
  function resolveTargetDelta(node3) {
    node3.resolveTargetDelta();
  }
  function calcProjection(node3) {
    node3.calcProjection();
  }
  function resetRotation(node3) {
    node3.resetRotation();
  }
  function removeLeadSnapshots(stack) {
    stack.removeLeadSnapshot();
  }
  function mixAxisDelta(output, delta, p) {
    output.translate = mix(delta.translate, 0, p);
    output.scale = mix(delta.scale, 1, p);
    output.origin = delta.origin;
    output.originPoint = delta.originPoint;
  }
  function mixAxis(output, from2, to, p) {
    output.min = mix(from2.min, to.min, p);
    output.max = mix(from2.max, to.max, p);
  }
  function mixBox(output, from2, to, p) {
    mixAxis(output.x, from2.x, to.x, p);
    mixAxis(output.y, from2.y, to.y, p);
  }
  function hasOpacityCrossfade(node3) {
    return node3.animationValues && node3.animationValues.opacityExit !== void 0;
  }
  var defaultLayoutTransition = {
    duration: 0.45,
    ease: [0.4, 0, 0.1, 1]
  };
  function mountNodeEarly(node3, id2) {
    var searchNode = node3.root;
    for (var i = node3.path.length - 1; i >= 0; i--) {
      if (Boolean(node3.path[i].instance)) {
        searchNode = node3.path[i];
        break;
      }
    }
    var searchElement = searchNode && searchNode !== node3.root ? searchNode.instance : document;
    var element = searchElement.querySelector('[data-projection-id="'.concat(id2, '"]'));
    if (element)
      node3.mount(element, true);
  }
  function roundAxis(axis) {
    axis.min = Math.round(axis.min);
    axis.max = Math.round(axis.max);
  }
  function roundBox(box) {
    roundAxis(box.x);
    roundAxis(box.y);
  }

  // node_modules/framer-motion/dist/es/projection/node/id.mjs
  var id = 1;
  function useProjectionId() {
    return useConstant(function() {
      if (globalProjectionState.hasEverUpdated) {
        return id++;
      }
    });
  }

  // node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs
  var import_react24 = __toESM(require_react(), 1);
  var LayoutGroupContext = (0, import_react24.createContext)({});

  // node_modules/framer-motion/dist/es/motion/features/use-projection.mjs
  var import_react26 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs
  var import_react25 = __toESM(require_react(), 1);
  var SwitchLayoutGroupContext = (0, import_react25.createContext)({});

  // node_modules/framer-motion/dist/es/motion/features/use-projection.mjs
  function useProjection(projectionId, _a, visualElement2, ProjectionNodeConstructor) {
    var _b;
    var layoutId = _a.layoutId, layout2 = _a.layout, drag2 = _a.drag, dragConstraints = _a.dragConstraints, layoutScroll = _a.layoutScroll;
    var initialPromotionConfig = (0, import_react26.useContext)(SwitchLayoutGroupContext);
    if (!ProjectionNodeConstructor || !visualElement2 || (visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.projection)) {
      return;
    }
    visualElement2.projection = new ProjectionNodeConstructor(projectionId, visualElement2.getLatestValues(), (_b = visualElement2.parent) === null || _b === void 0 ? void 0 : _b.projection);
    visualElement2.projection.setOptions({
      layoutId,
      layout: layout2,
      alwaysMeasureLayout: Boolean(drag2) || dragConstraints && isRefObject2(dragConstraints),
      visualElement: visualElement2,
      scheduleRender: function() {
        return visualElement2.scheduleRender();
      },
      animationType: typeof layout2 === "string" ? layout2 : "both",
      initialPromotionConfig,
      layoutScroll
    });
  }

  // node_modules/framer-motion/dist/es/motion/utils/VisualElementHandler.mjs
  var import_react27 = __toESM(require_react(), 1);
  var VisualElementHandler = function(_super) {
    __extends(VisualElementHandler2, _super);
    function VisualElementHandler2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    VisualElementHandler2.prototype.getSnapshotBeforeUpdate = function() {
      this.updateProps();
      return null;
    };
    VisualElementHandler2.prototype.componentDidUpdate = function() {
    };
    VisualElementHandler2.prototype.updateProps = function() {
      var _a = this.props, visualElement2 = _a.visualElement, props = _a.props;
      if (visualElement2)
        visualElement2.setProps(props);
    };
    VisualElementHandler2.prototype.render = function() {
      return this.props.children;
    };
    return VisualElementHandler2;
  }(import_react27.default.Component);

  // node_modules/framer-motion/dist/es/motion/index.mjs
  function createMotionComponent(_a) {
    var preloadedFeatures = _a.preloadedFeatures, createVisualElement = _a.createVisualElement, projectionNodeConstructor = _a.projectionNodeConstructor, useRender = _a.useRender, useVisualState = _a.useVisualState, Component2 = _a.Component;
    preloadedFeatures && loadFeatures(preloadedFeatures);
    function MotionComponent(props, externalRef) {
      var layoutId = useLayoutId(props);
      props = __assign(__assign({}, props), { layoutId });
      var config2 = (0, import_react28.useContext)(MotionConfigContext);
      var features = null;
      var context = useCreateMotionContext(props);
      var projectionId = config2.isStatic ? void 0 : useProjectionId();
      var visualState = useVisualState(props, config2.isStatic);
      if (!config2.isStatic && isBrowser3) {
        context.visualElement = useVisualElement(Component2, visualState, __assign(__assign({}, config2), props), createVisualElement);
        useProjection(projectionId, props, context.visualElement, projectionNodeConstructor || featureDefinitions.projectionNodeConstructor);
        features = useFeatures(props, context.visualElement, preloadedFeatures);
      }
      return React15.createElement(VisualElementHandler, { visualElement: context.visualElement, props: __assign(__assign({}, config2), props) }, features, React15.createElement(MotionContext.Provider, { value: context }, useRender(Component2, props, projectionId, useMotionRef(visualState, context.visualElement, externalRef), visualState, config2.isStatic, context.visualElement)));
    }
    return (0, import_react28.forwardRef)(MotionComponent);
  }
  function useLayoutId(_a) {
    var _b;
    var layoutId = _a.layoutId;
    var layoutGroupId = (_b = (0, import_react28.useContext)(LayoutGroupContext)) === null || _b === void 0 ? void 0 : _b.id;
    return layoutGroupId && layoutId !== void 0 ? layoutGroupId + "-" + layoutId : layoutId;
  }

  // node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs
  function createMotionProxy(createConfig) {
    function custom(Component2, customMotionComponentConfig) {
      if (customMotionComponentConfig === void 0) {
        customMotionComponentConfig = {};
      }
      return createMotionComponent(createConfig(Component2, customMotionComponentConfig));
    }
    if (typeof Proxy === "undefined") {
      return custom;
    }
    var componentCache = /* @__PURE__ */ new Map();
    return new Proxy(custom, {
      get: function(_target, key) {
        if (!componentCache.has(key)) {
          componentCache.set(key, custom(key));
        }
        return componentCache.get(key);
      }
    });
  }

  // node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs
  var lowercaseSVGElements = [
    "animate",
    "circle",
    "defs",
    "desc",
    "ellipse",
    "g",
    "image",
    "line",
    "filter",
    "marker",
    "mask",
    "metadata",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "rect",
    "stop",
    "svg",
    "switch",
    "symbol",
    "text",
    "tspan",
    "use",
    "view"
  ];

  // node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs
  function isSVGComponent(Component2) {
    if (typeof Component2 !== "string" || Component2.includes("-")) {
      return false;
    } else if (lowercaseSVGElements.indexOf(Component2) > -1 || /[A-Z]/.test(Component2)) {
      return true;
    }
    return false;
  }

  // node_modules/framer-motion/dist/es/render/dom/use-render.mjs
  var import_react31 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/render/html/use-props.mjs
  var import_react29 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs
  function isForcedMotionValue(key, _a) {
    var layout2 = _a.layout, layoutId = _a.layoutId;
    return isTransformProp(key) || isTransformOriginProp(key) || (layout2 || layoutId !== void 0) && (!!scaleCorrectors[key] || key === "opacity");
  }

  // node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs
  var translateAlias = {
    x: "translateX",
    y: "translateY",
    z: "translateZ",
    transformPerspective: "perspective"
  };
  function buildTransform(_a, _b, transformIsDefault, transformTemplate2) {
    var transform10 = _a.transform, transformKeys2 = _a.transformKeys;
    var _c = _b.enableHardwareAcceleration, enableHardwareAcceleration = _c === void 0 ? true : _c, _d = _b.allowTransformNone, allowTransformNone = _d === void 0 ? true : _d;
    var transformString = "";
    transformKeys2.sort(sortTransformProps);
    var transformHasZ = false;
    var numTransformKeys = transformKeys2.length;
    for (var i = 0; i < numTransformKeys; i++) {
      var key = transformKeys2[i];
      transformString += "".concat(translateAlias[key] || key, "(").concat(transform10[key], ") ");
      if (key === "z")
        transformHasZ = true;
    }
    if (!transformHasZ && enableHardwareAcceleration) {
      transformString += "translateZ(0)";
    } else {
      transformString = transformString.trim();
    }
    if (transformTemplate2) {
      transformString = transformTemplate2(transform10, transformIsDefault ? "" : transformString);
    } else if (allowTransformNone && transformIsDefault) {
      transformString = "none";
    }
    return transformString;
  }
  function buildTransformOrigin(_a) {
    var _b = _a.originX, originX = _b === void 0 ? "50%" : _b, _c = _a.originY, originY = _c === void 0 ? "50%" : _c, _d = _a.originZ, originZ = _d === void 0 ? 0 : _d;
    return "".concat(originX, " ").concat(originY, " ").concat(originZ);
  }

  // node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs
  function isCSSVariable(key) {
    return key.startsWith("--");
  }

  // node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs
  var getValueAsType = function(value, type) {
    return type && typeof value === "number" ? type.transform(value) : value;
  };

  // node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs
  function buildHTMLStyles(state2, latestValues, options, transformTemplate2) {
    var _a;
    var style = state2.style, vars = state2.vars, transform10 = state2.transform, transformKeys2 = state2.transformKeys, transformOrigin = state2.transformOrigin;
    transformKeys2.length = 0;
    var hasTransform2 = false;
    var hasTransformOrigin = false;
    var transformIsNone = true;
    for (var key in latestValues) {
      var value = latestValues[key];
      if (isCSSVariable(key)) {
        vars[key] = value;
        continue;
      }
      var valueType = numberValueTypes[key];
      var valueAsType = getValueAsType(value, valueType);
      if (isTransformProp(key)) {
        hasTransform2 = true;
        transform10[key] = valueAsType;
        transformKeys2.push(key);
        if (!transformIsNone)
          continue;
        if (value !== ((_a = valueType.default) !== null && _a !== void 0 ? _a : 0))
          transformIsNone = false;
      } else if (isTransformOriginProp(key)) {
        transformOrigin[key] = valueAsType;
        hasTransformOrigin = true;
      } else {
        style[key] = valueAsType;
      }
    }
    if (hasTransform2) {
      style.transform = buildTransform(state2, options, transformIsNone, transformTemplate2);
    } else if (transformTemplate2) {
      style.transform = transformTemplate2({}, "");
    } else if (!latestValues.transform && style.transform) {
      style.transform = "none";
    }
    if (hasTransformOrigin) {
      style.transformOrigin = buildTransformOrigin(transformOrigin);
    }
  }

  // node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs
  var createHtmlRenderState = function() {
    return {
      style: {},
      transform: {},
      transformKeys: [],
      transformOrigin: {},
      vars: {}
    };
  };

  // node_modules/framer-motion/dist/es/render/html/use-props.mjs
  function copyRawValuesOnly(target, source, props) {
    for (var key in source) {
      if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {
        target[key] = source[key];
      }
    }
  }
  function useInitialMotionValues(_a, visualState, isStatic) {
    var transformTemplate2 = _a.transformTemplate;
    return (0, import_react29.useMemo)(function() {
      var state2 = createHtmlRenderState();
      buildHTMLStyles(state2, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate2);
      var vars = state2.vars, style = state2.style;
      return __assign(__assign({}, vars), style);
    }, [visualState]);
  }
  function useStyle(props, visualState, isStatic) {
    var styleProp = props.style || {};
    var style = {};
    copyRawValuesOnly(style, styleProp, props);
    Object.assign(style, useInitialMotionValues(props, visualState, isStatic));
    if (props.transformValues) {
      style = props.transformValues(style);
    }
    return style;
  }
  function useHTMLProps(props, visualState, isStatic) {
    var htmlProps = {};
    var style = useStyle(props, visualState, isStatic);
    if (Boolean(props.drag) && props.dragListener !== false) {
      htmlProps.draggable = false;
      style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = "none";
      style.touchAction = props.drag === true ? "none" : "pan-".concat(props.drag === "x" ? "y" : "x");
    }
    htmlProps.style = style;
    return htmlProps;
  }

  // node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs
  var validMotionProps = /* @__PURE__ */ new Set([
    "initial",
    "animate",
    "exit",
    "style",
    "variants",
    "transition",
    "transformTemplate",
    "transformValues",
    "custom",
    "inherit",
    "layout",
    "layoutId",
    "layoutDependency",
    "onLayoutAnimationComplete",
    "onLayoutMeasure",
    "onBeforeLayoutMeasure",
    "onAnimationStart",
    "onAnimationComplete",
    "onUpdate",
    "onDragStart",
    "onDrag",
    "onDragEnd",
    "onMeasureDragConstraints",
    "onDirectionLock",
    "onDragTransitionEnd",
    "drag",
    "dragControls",
    "dragListener",
    "dragConstraints",
    "dragDirectionLock",
    "dragSnapToOrigin",
    "_dragX",
    "_dragY",
    "dragElastic",
    "dragMomentum",
    "dragPropagation",
    "dragTransition",
    "whileDrag",
    "onPan",
    "onPanStart",
    "onPanEnd",
    "onPanSessionStart",
    "onTap",
    "onTapStart",
    "onTapCancel",
    "onHoverStart",
    "onHoverEnd",
    "whileFocus",
    "whileTap",
    "whileHover",
    "whileInView",
    "onViewportEnter",
    "onViewportLeave",
    "viewport",
    "layoutScroll"
  ]);
  function isValidMotionProp(key) {
    return validMotionProps.has(key);
  }

  // node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs
  var shouldForward = function(key) {
    return !isValidMotionProp(key);
  };
  function loadExternalIsValidProp(isValidProp) {
    if (!isValidProp)
      return;
    shouldForward = function(key) {
      return key.startsWith("on") ? !isValidMotionProp(key) : isValidProp(key);
    };
  }
  try {
    loadExternalIsValidProp(require_is_prop_valid_browser_cjs().default);
  } catch (_a) {
  }
  function filterProps(props, isDom, forwardMotionProps) {
    var filteredProps = {};
    for (var key in props) {
      if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key) || props["draggable"] && key.startsWith("onDrag")) {
        filteredProps[key] = props[key];
      }
    }
    return filteredProps;
  }

  // node_modules/framer-motion/dist/es/render/svg/use-props.mjs
  var import_react30 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs
  function calcOrigin(origin, offset, size2) {
    return typeof origin === "string" ? origin : px3.transform(offset + size2 * origin);
  }
  function calcSVGTransformOrigin(dimensions, originX, originY) {
    var pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);
    var pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);
    return "".concat(pxOriginX, " ").concat(pxOriginY);
  }

  // node_modules/framer-motion/dist/es/render/svg/utils/path.mjs
  var dashKeys = {
    offset: "stroke-dashoffset",
    array: "stroke-dasharray"
  };
  var camelKeys = {
    offset: "strokeDashoffset",
    array: "strokeDasharray"
  };
  function buildSVGPath(attrs, length2, spacing2, offset, useDashCase) {
    if (spacing2 === void 0) {
      spacing2 = 1;
    }
    if (offset === void 0) {
      offset = 0;
    }
    if (useDashCase === void 0) {
      useDashCase = true;
    }
    attrs.pathLength = 1;
    var keys3 = useDashCase ? dashKeys : camelKeys;
    attrs[keys3.offset] = px3.transform(-offset);
    var pathLength = px3.transform(length2);
    var pathSpacing = px3.transform(spacing2);
    attrs[keys3.array] = "".concat(pathLength, " ").concat(pathSpacing);
  }

  // node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs
  function buildSVGAttrs(state2, _a, options, transformTemplate2) {
    var attrX = _a.attrX, attrY = _a.attrY, originX = _a.originX, originY = _a.originY, pathLength = _a.pathLength, _b = _a.pathSpacing, pathSpacing = _b === void 0 ? 1 : _b, _c = _a.pathOffset, pathOffset = _c === void 0 ? 0 : _c, latest = __rest(_a, ["attrX", "attrY", "originX", "originY", "pathLength", "pathSpacing", "pathOffset"]);
    buildHTMLStyles(state2, latest, options, transformTemplate2);
    state2.attrs = state2.style;
    state2.style = {};
    var attrs = state2.attrs, style = state2.style, dimensions = state2.dimensions;
    if (attrs.transform) {
      if (dimensions)
        style.transform = attrs.transform;
      delete attrs.transform;
    }
    if (dimensions && (originX !== void 0 || originY !== void 0 || style.transform)) {
      style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== void 0 ? originX : 0.5, originY !== void 0 ? originY : 0.5);
    }
    if (attrX !== void 0)
      attrs.x = attrX;
    if (attrY !== void 0)
      attrs.y = attrY;
    if (pathLength !== void 0) {
      buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);
    }
  }

  // node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs
  var createSvgRenderState = function() {
    return __assign(__assign({}, createHtmlRenderState()), { attrs: {} });
  };

  // node_modules/framer-motion/dist/es/render/svg/use-props.mjs
  function useSVGProps(props, visualState) {
    var visualProps = (0, import_react30.useMemo)(function() {
      var state2 = createSvgRenderState();
      buildSVGAttrs(state2, visualState, { enableHardwareAcceleration: false }, props.transformTemplate);
      return __assign(__assign({}, state2.attrs), { style: __assign({}, state2.style) });
    }, [visualState]);
    if (props.style) {
      var rawStyles = {};
      copyRawValuesOnly(rawStyles, props.style, props);
      visualProps.style = __assign(__assign({}, rawStyles), visualProps.style);
    }
    return visualProps;
  }

  // node_modules/framer-motion/dist/es/render/dom/use-render.mjs
  function createUseRender(forwardMotionProps) {
    if (forwardMotionProps === void 0) {
      forwardMotionProps = false;
    }
    var useRender = function(Component2, props, projectionId, ref, _a, isStatic) {
      var latestValues = _a.latestValues;
      var useVisualProps = isSVGComponent(Component2) ? useSVGProps : useHTMLProps;
      var visualProps = useVisualProps(props, latestValues, isStatic);
      var filteredProps = filterProps(props, typeof Component2 === "string", forwardMotionProps);
      var elementProps = __assign(__assign(__assign({}, filteredProps), visualProps), { ref });
      if (projectionId) {
        elementProps["data-projection-id"] = projectionId;
      }
      return (0, import_react31.createElement)(Component2, elementProps);
    };
    return useRender;
  }

  // node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs
  var CAMEL_CASE_PATTERN = /([a-z])([A-Z])/g;
  var REPLACE_TEMPLATE = "$1-$2";
  var camelToDash = function(str) {
    return str.replace(CAMEL_CASE_PATTERN, REPLACE_TEMPLATE).toLowerCase();
  };

  // node_modules/framer-motion/dist/es/render/html/utils/render.mjs
  function renderHTML(element, _a, styleProp, projection) {
    var style = _a.style, vars = _a.vars;
    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));
    for (var key in vars) {
      element.style.setProperty(key, vars[key]);
    }
  }

  // node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs
  var camelCaseAttributes = /* @__PURE__ */ new Set([
    "baseFrequency",
    "diffuseConstant",
    "kernelMatrix",
    "kernelUnitLength",
    "keySplines",
    "keyTimes",
    "limitingConeAngle",
    "markerHeight",
    "markerWidth",
    "numOctaves",
    "targetX",
    "targetY",
    "surfaceScale",
    "specularConstant",
    "specularExponent",
    "stdDeviation",
    "tableValues",
    "viewBox",
    "gradientTransform",
    "pathLength"
  ]);

  // node_modules/framer-motion/dist/es/render/svg/utils/render.mjs
  function renderSVG(element, renderState) {
    renderHTML(element, renderState);
    for (var key in renderState.attrs) {
      element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);
    }
  }

  // node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs
  function scrapeMotionValuesFromProps(props) {
    var style = props.style;
    var newValues = {};
    for (var key in style) {
      if (isMotionValue(style[key]) || isForcedMotionValue(key, props)) {
        newValues[key] = style[key];
      }
    }
    return newValues;
  }

  // node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs
  function scrapeMotionValuesFromProps2(props) {
    var newValues = scrapeMotionValuesFromProps(props);
    for (var key in props) {
      if (isMotionValue(props[key])) {
        var targetKey = key === "x" || key === "y" ? "attr" + key.toUpperCase() : key;
        newValues[targetKey] = props[key];
      }
    }
    return newValues;
  }

  // node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
  var import_react32 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs
  function isAnimationControls(v) {
    return typeof v === "object" && typeof v.start === "function";
  }

  // node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
  function makeState(_a, props, context, presenceContext) {
    var scrapeMotionValuesFromProps3 = _a.scrapeMotionValuesFromProps, createRenderState = _a.createRenderState, onMount = _a.onMount;
    var state2 = {
      latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps3),
      renderState: createRenderState()
    };
    if (onMount) {
      state2.mount = function(instance) {
        return onMount(props, instance, state2);
      };
    }
    return state2;
  }
  var makeUseVisualState = function(config2) {
    return function(props, isStatic) {
      var context = (0, import_react32.useContext)(MotionContext);
      var presenceContext = (0, import_react32.useContext)(PresenceContext);
      return isStatic ? makeState(config2, props, context, presenceContext) : useConstant(function() {
        return makeState(config2, props, context, presenceContext);
      });
    };
  };
  function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
    var values = {};
    var blockInitialAnimation = (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false;
    var motionValues = scrapeMotionValues(props);
    for (var key in motionValues) {
      values[key] = resolveMotionValue(motionValues[key]);
    }
    var initial3 = props.initial, animate3 = props.animate;
    var isControllingVariants = checkIfControllingVariants(props);
    var isVariantNode = checkIfVariantNode(props);
    if (context && isVariantNode && !isControllingVariants && props.inherit !== false) {
      initial3 !== null && initial3 !== void 0 ? initial3 : initial3 = context.initial;
      animate3 !== null && animate3 !== void 0 ? animate3 : animate3 = context.animate;
    }
    var initialAnimationIsBlocked = blockInitialAnimation || initial3 === false;
    var variantToSet = initialAnimationIsBlocked ? animate3 : initial3;
    if (variantToSet && typeof variantToSet !== "boolean" && !isAnimationControls(variantToSet)) {
      var list3 = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
      list3.forEach(function(definition) {
        var resolved = resolveVariantFromProps(props, definition);
        if (!resolved)
          return;
        var transitionEnd = resolved.transitionEnd;
        resolved.transition;
        var target = __rest(resolved, ["transitionEnd", "transition"]);
        for (var key2 in target) {
          var valueTarget = target[key2];
          if (Array.isArray(valueTarget)) {
            var index = initialAnimationIsBlocked ? valueTarget.length - 1 : 0;
            valueTarget = valueTarget[index];
          }
          if (valueTarget !== null) {
            values[key2] = valueTarget;
          }
        }
        for (var key2 in transitionEnd)
          values[key2] = transitionEnd[key2];
      });
    }
    return values;
  }

  // node_modules/framer-motion/dist/es/render/svg/config-motion.mjs
  var svgMotionConfig = {
    useVisualState: makeUseVisualState({
      scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2,
      createRenderState: createSvgRenderState,
      onMount: function(props, instance, _a) {
        var renderState = _a.renderState, latestValues = _a.latestValues;
        try {
          renderState.dimensions = typeof instance.getBBox === "function" ? instance.getBBox() : instance.getBoundingClientRect();
        } catch (e) {
          renderState.dimensions = {
            x: 0,
            y: 0,
            width: 0,
            height: 0
          };
        }
        buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, props.transformTemplate);
        renderSVG(instance, renderState);
      }
    })
  };

  // node_modules/framer-motion/dist/es/render/html/config-motion.mjs
  var htmlMotionConfig = {
    useVisualState: makeUseVisualState({
      scrapeMotionValuesFromProps,
      createRenderState: createHtmlRenderState
    })
  };

  // node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs
  function createDomMotionConfig(Component2, _a, preloadedFeatures, createVisualElement, projectionNodeConstructor) {
    var _b = _a.forwardMotionProps, forwardMotionProps = _b === void 0 ? false : _b;
    var baseConfig = isSVGComponent(Component2) ? svgMotionConfig : htmlMotionConfig;
    return __assign(__assign({}, baseConfig), { preloadedFeatures, useRender: createUseRender(forwardMotionProps), createVisualElement, projectionNodeConstructor, Component: Component2 });
  }

  // node_modules/framer-motion/dist/es/render/utils/types.mjs
  var AnimationType;
  (function(AnimationType2) {
    AnimationType2["Animate"] = "animate";
    AnimationType2["Hover"] = "whileHover";
    AnimationType2["Tap"] = "whileTap";
    AnimationType2["Drag"] = "whileDrag";
    AnimationType2["Focus"] = "whileFocus";
    AnimationType2["InView"] = "whileInView";
    AnimationType2["Exit"] = "exit";
  })(AnimationType || (AnimationType = {}));

  // node_modules/framer-motion/dist/es/events/use-dom-event.mjs
  var import_react33 = __toESM(require_react(), 1);
  function addDomEvent(target, eventName, handler, options) {
    target.addEventListener(eventName, handler, options);
    return function() {
      return target.removeEventListener(eventName, handler, options);
    };
  }
  function useDomEvent(ref, eventName, handler, options) {
    (0, import_react33.useEffect)(function() {
      var element = ref.current;
      if (handler && element) {
        return addDomEvent(element, eventName, handler, options);
      }
    }, [ref, eventName, handler, options]);
  }

  // node_modules/framer-motion/dist/es/gestures/use-focus-gesture.mjs
  function useFocusGesture(_a) {
    var whileFocus = _a.whileFocus, visualElement2 = _a.visualElement;
    var onFocus3 = function() {
      var _a2;
      (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Focus, true);
    };
    var onBlur3 = function() {
      var _a2;
      (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Focus, false);
    };
    useDomEvent(visualElement2, "focus", whileFocus ? onFocus3 : void 0);
    useDomEvent(visualElement2, "blur", whileFocus ? onBlur3 : void 0);
  }

  // node_modules/framer-motion/dist/es/gestures/utils/event-type.mjs
  function isMouseEvent(event) {
    if (typeof PointerEvent !== "undefined" && event instanceof PointerEvent) {
      return !!(event.pointerType === "mouse");
    }
    return event instanceof MouseEvent;
  }
  function isTouchEvent(event) {
    var hasTouches = !!event.touches;
    return hasTouches;
  }

  // node_modules/framer-motion/dist/es/events/event-info.mjs
  function filterPrimaryPointer(eventHandler) {
    return function(event) {
      var isMouseEvent2 = event instanceof MouseEvent;
      var isPrimaryPointer = !isMouseEvent2 || isMouseEvent2 && event.button === 0;
      if (isPrimaryPointer) {
        eventHandler(event);
      }
    };
  }
  var defaultPagePoint = { pageX: 0, pageY: 0 };
  function pointFromTouch(e, pointType) {
    if (pointType === void 0) {
      pointType = "page";
    }
    var primaryTouch = e.touches[0] || e.changedTouches[0];
    var point = primaryTouch || defaultPagePoint;
    return {
      x: point[pointType + "X"],
      y: point[pointType + "Y"]
    };
  }
  function pointFromMouse(point, pointType) {
    if (pointType === void 0) {
      pointType = "page";
    }
    return {
      x: point[pointType + "X"],
      y: point[pointType + "Y"]
    };
  }
  function extractEventInfo(event, pointType) {
    if (pointType === void 0) {
      pointType = "page";
    }
    return {
      point: isTouchEvent(event) ? pointFromTouch(event, pointType) : pointFromMouse(event, pointType)
    };
  }
  var wrapHandler = function(handler, shouldFilterPrimaryPointer) {
    if (shouldFilterPrimaryPointer === void 0) {
      shouldFilterPrimaryPointer = false;
    }
    var listener = function(event) {
      return handler(event, extractEventInfo(event));
    };
    return shouldFilterPrimaryPointer ? filterPrimaryPointer(listener) : listener;
  };

  // node_modules/framer-motion/dist/es/events/utils.mjs
  var supportsPointerEvents = function() {
    return isBrowser3 && window.onpointerdown === null;
  };
  var supportsTouchEvents = function() {
    return isBrowser3 && window.ontouchstart === null;
  };
  var supportsMouseEvents = function() {
    return isBrowser3 && window.onmousedown === null;
  };

  // node_modules/framer-motion/dist/es/events/use-pointer-event.mjs
  var mouseEventNames = {
    pointerdown: "mousedown",
    pointermove: "mousemove",
    pointerup: "mouseup",
    pointercancel: "mousecancel",
    pointerover: "mouseover",
    pointerout: "mouseout",
    pointerenter: "mouseenter",
    pointerleave: "mouseleave"
  };
  var touchEventNames = {
    pointerdown: "touchstart",
    pointermove: "touchmove",
    pointerup: "touchend",
    pointercancel: "touchcancel"
  };
  function getPointerEventName2(name) {
    if (supportsPointerEvents()) {
      return name;
    } else if (supportsTouchEvents()) {
      return touchEventNames[name];
    } else if (supportsMouseEvents()) {
      return mouseEventNames[name];
    }
    return name;
  }
  function addPointerEvent(target, eventName, handler, options) {
    return addDomEvent(target, getPointerEventName2(eventName), wrapHandler(handler, eventName === "pointerdown"), options);
  }
  function usePointerEvent(ref, eventName, handler, options) {
    return useDomEvent(ref, getPointerEventName2(eventName), handler && wrapHandler(handler, eventName === "pointerdown"), options);
  }

  // node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs
  function createLock(name) {
    var lock = null;
    return function() {
      var openLock = function() {
        lock = null;
      };
      if (lock === null) {
        lock = name;
        return openLock;
      }
      return false;
    };
  }
  var globalHorizontalLock = createLock("dragHorizontal");
  var globalVerticalLock = createLock("dragVertical");
  function getGlobalLock(drag2) {
    var lock = false;
    if (drag2 === "y") {
      lock = globalVerticalLock();
    } else if (drag2 === "x") {
      lock = globalHorizontalLock();
    } else {
      var openHorizontal_1 = globalHorizontalLock();
      var openVertical_1 = globalVerticalLock();
      if (openHorizontal_1 && openVertical_1) {
        lock = function() {
          openHorizontal_1();
          openVertical_1();
        };
      } else {
        if (openHorizontal_1)
          openHorizontal_1();
        if (openVertical_1)
          openVertical_1();
      }
    }
    return lock;
  }
  function isDragActive() {
    var openGestureLock = getGlobalLock(true);
    if (!openGestureLock)
      return true;
    openGestureLock();
    return false;
  }

  // node_modules/framer-motion/dist/es/gestures/use-hover-gesture.mjs
  function createHoverEvent(visualElement2, isActive, callback) {
    return function(event, info) {
      var _a;
      if (!isMouseEvent(event) || isDragActive())
        return;
      (_a = visualElement2.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Hover, isActive);
      callback === null || callback === void 0 ? void 0 : callback(event, info);
    };
  }
  function useHoverGesture(_a) {
    var onHoverStart = _a.onHoverStart, onHoverEnd = _a.onHoverEnd, whileHover = _a.whileHover, visualElement2 = _a.visualElement;
    usePointerEvent(visualElement2, "pointerenter", onHoverStart || whileHover ? createHoverEvent(visualElement2, true, onHoverStart) : void 0);
    usePointerEvent(visualElement2, "pointerleave", onHoverEnd || whileHover ? createHoverEvent(visualElement2, false, onHoverEnd) : void 0);
  }

  // node_modules/framer-motion/dist/es/gestures/use-tap-gesture.mjs
  var import_react35 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs
  var isNodeOrChild = function(parent, child) {
    if (!child) {
      return false;
    } else if (parent === child) {
      return true;
    } else {
      return isNodeOrChild(parent, child.parentElement);
    }
  };

  // node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs
  var import_react34 = __toESM(require_react(), 1);
  function useUnmountEffect2(callback) {
    return (0, import_react34.useEffect)(function() {
      return function() {
        return callback();
      };
    }, []);
  }

  // node_modules/framer-motion/dist/es/gestures/use-tap-gesture.mjs
  function useTapGesture(_a) {
    var onTap = _a.onTap, onTapStart = _a.onTapStart, onTapCancel = _a.onTapCancel, whileTap = _a.whileTap, visualElement2 = _a.visualElement;
    var hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;
    var isPressing = (0, import_react35.useRef)(false);
    var cancelPointerEndListeners = (0, import_react35.useRef)(null);
    function removePointerEndListener() {
      var _a2;
      (_a2 = cancelPointerEndListeners.current) === null || _a2 === void 0 ? void 0 : _a2.call(cancelPointerEndListeners);
      cancelPointerEndListeners.current = null;
    }
    function checkPointerEnd() {
      var _a2;
      removePointerEndListener();
      isPressing.current = false;
      (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Tap, false);
      return !isDragActive();
    }
    function onPointerUp(event, info) {
      if (!checkPointerEnd())
        return;
      !isNodeOrChild(visualElement2.getInstance(), event.target) ? onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info) : onTap === null || onTap === void 0 ? void 0 : onTap(event, info);
    }
    function onPointerCancel(event, info) {
      if (!checkPointerEnd())
        return;
      onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info);
    }
    function onPointerDown(event, info) {
      var _a2;
      removePointerEndListener();
      if (isPressing.current)
        return;
      isPressing.current = true;
      cancelPointerEndListeners.current = pipe3(addPointerEvent(window, "pointerup", onPointerUp), addPointerEvent(window, "pointercancel", onPointerCancel));
      (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Tap, true);
      onTapStart === null || onTapStart === void 0 ? void 0 : onTapStart(event, info);
    }
    usePointerEvent(visualElement2, "pointerdown", hasPressListeners ? onPointerDown : void 0);
    useUnmountEffect2(removePointerEndListener);
  }

  // node_modules/framer-motion/dist/es/motion/features/viewport/use-viewport.mjs
  var import_react36 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/utils/warn-once.mjs
  var warned = /* @__PURE__ */ new Set();
  function warnOnce(condition, message, element) {
    if (condition || warned.has(message))
      return;
    console.warn(message);
    if (element)
      console.warn(element);
    warned.add(message);
  }

  // node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs
  var observerCallbacks = /* @__PURE__ */ new WeakMap();
  var observers = /* @__PURE__ */ new WeakMap();
  var fireObserverCallback = function(entry) {
    var _a;
    (_a = observerCallbacks.get(entry.target)) === null || _a === void 0 ? void 0 : _a(entry);
  };
  var fireAllObserverCallbacks = function(entries) {
    entries.forEach(fireObserverCallback);
  };
  function initIntersectionObserver(_a) {
    var root2 = _a.root, options = __rest(_a, ["root"]);
    var lookupRoot = root2 || document;
    if (!observers.has(lookupRoot)) {
      observers.set(lookupRoot, {});
    }
    var rootObservers = observers.get(lookupRoot);
    var key = JSON.stringify(options);
    if (!rootObservers[key]) {
      rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, __assign({ root: root2 }, options));
    }
    return rootObservers[key];
  }
  function observeIntersection(element, options, callback) {
    var rootInteresectionObserver = initIntersectionObserver(options);
    observerCallbacks.set(element, callback);
    rootInteresectionObserver.observe(element);
    return function() {
      observerCallbacks.delete(element);
      rootInteresectionObserver.unobserve(element);
    };
  }

  // node_modules/framer-motion/dist/es/motion/features/viewport/use-viewport.mjs
  function useViewport(_a) {
    var visualElement2 = _a.visualElement, whileInView = _a.whileInView, onViewportEnter = _a.onViewportEnter, onViewportLeave = _a.onViewportLeave, _b = _a.viewport, viewport = _b === void 0 ? {} : _b;
    var state2 = (0, import_react36.useRef)({
      hasEnteredView: false,
      isInView: false
    });
    var shouldObserve = Boolean(whileInView || onViewportEnter || onViewportLeave);
    if (viewport.once && state2.current.hasEnteredView)
      shouldObserve = false;
    var useObserver = typeof IntersectionObserver === "undefined" ? useMissingIntersectionObserver : useIntersectionObserver;
    useObserver(shouldObserve, state2.current, visualElement2, viewport);
  }
  var thresholdNames = {
    some: 0,
    all: 1
  };
  function useIntersectionObserver(shouldObserve, state2, visualElement2, _a) {
    var root2 = _a.root, rootMargin = _a.margin, _b = _a.amount, amount = _b === void 0 ? "some" : _b, once2 = _a.once;
    (0, import_react36.useEffect)(function() {
      if (!shouldObserve)
        return;
      var options = {
        root: root2 === null || root2 === void 0 ? void 0 : root2.current,
        rootMargin,
        threshold: typeof amount === "number" ? amount : thresholdNames[amount]
      };
      var intersectionCallback = function(entry) {
        var _a2;
        var isIntersecting = entry.isIntersecting;
        if (state2.isInView === isIntersecting)
          return;
        state2.isInView = isIntersecting;
        if (once2 && !isIntersecting && state2.hasEnteredView) {
          return;
        } else if (isIntersecting) {
          state2.hasEnteredView = true;
        }
        (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.InView, isIntersecting);
        var props = visualElement2.getProps();
        var callback = isIntersecting ? props.onViewportEnter : props.onViewportLeave;
        callback === null || callback === void 0 ? void 0 : callback(entry);
      };
      return observeIntersection(visualElement2.getInstance(), options, intersectionCallback);
    }, [shouldObserve, root2, rootMargin, amount]);
  }
  function useMissingIntersectionObserver(shouldObserve, state2, visualElement2, _a) {
    var _b = _a.fallback, fallback = _b === void 0 ? true : _b;
    (0, import_react36.useEffect)(function() {
      if (!shouldObserve || !fallback)
        return;
      if (true) {
        warnOnce(false, "IntersectionObserver not available on this device. whileInView animations will trigger on mount.");
      }
      requestAnimationFrame(function() {
        var _a2;
        state2.hasEnteredView = true;
        var onViewportEnter = visualElement2.getProps().onViewportEnter;
        onViewportEnter === null || onViewportEnter === void 0 ? void 0 : onViewportEnter(null);
        (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.InView, true);
      });
    }, [shouldObserve]);
  }

  // node_modules/framer-motion/dist/es/motion/utils/make-renderless-component.mjs
  var makeRenderlessComponent = function(hook) {
    return function(props) {
      hook(props);
      return null;
    };
  };

  // node_modules/framer-motion/dist/es/motion/features/gestures.mjs
  var gestureAnimations = {
    inView: makeRenderlessComponent(useViewport),
    tap: makeRenderlessComponent(useTapGesture),
    focus: makeRenderlessComponent(useFocusGesture),
    hover: makeRenderlessComponent(useHoverGesture)
  };

  // node_modules/framer-motion/dist/es/motion/features/animations.mjs
  var import_react38 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs
  var import_react37 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/utils/use-id.mjs
  var counter = 0;
  var incrementId = function() {
    return counter++;
  };
  var useId2 = function() {
    return useConstant(incrementId);
  };

  // node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs
  function usePresence() {
    var context = (0, import_react37.useContext)(PresenceContext);
    if (context === null)
      return [true, null];
    var isPresent2 = context.isPresent, onExitComplete = context.onExitComplete, register = context.register;
    var id2 = useId2();
    (0, import_react37.useEffect)(function() {
      return register(id2);
    }, []);
    var safeToRemove = function() {
      return onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete(id2);
    };
    return !isPresent2 && onExitComplete ? [false, safeToRemove] : [true];
  }
  function useIsPresent() {
    return isPresent((0, import_react37.useContext)(PresenceContext));
  }
  function isPresent(context) {
    return context === null ? true : context.isPresent;
  }

  // node_modules/framer-motion/dist/es/utils/shallow-compare.mjs
  function shallowCompare(next2, prev2) {
    if (!Array.isArray(prev2))
      return false;
    var prevLength = prev2.length;
    if (prevLength !== next2.length)
      return false;
    for (var i = 0; i < prevLength; i++) {
      if (prev2[i] !== next2[i])
        return false;
    }
    return true;
  }

  // node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs
  var isNumericalString = function(v) {
    return /^\-?\d*\.?\d+$/.test(v);
  };

  // node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs
  var isZeroValueString = function(v) {
    return /^0[^.\s]+$/.test(v);
  };

  // node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs
  var testValueType = function(v) {
    return function(type) {
      return type.test(v);
    };
  };

  // node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs
  var auto = {
    test: function(v) {
      return v === "auto";
    },
    parse: function(v) {
      return v;
    }
  };

  // node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs
  var dimensionValueTypes = [number, px3, percent, degrees, vw, vh, auto];
  var findDimensionValueType = function(v) {
    return dimensionValueTypes.find(testValueType(v));
  };

  // node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs
  var valueTypes = __spreadArray(__spreadArray([], __read(dimensionValueTypes), false), [color2, complex], false);
  var findValueType = function(v) {
    return valueTypes.find(testValueType(v));
  };

  // node_modules/framer-motion/dist/es/render/utils/setters.mjs
  function setMotionValue(visualElement2, key, value) {
    if (visualElement2.hasValue(key)) {
      visualElement2.getValue(key).set(value);
    } else {
      visualElement2.addValue(key, motionValue(value));
    }
  }
  function setTarget(visualElement2, definition) {
    var resolved = resolveVariant(visualElement2, definition);
    var _a = resolved ? visualElement2.makeTargetAnimatable(resolved, false) : {}, _b = _a.transitionEnd, transitionEnd = _b === void 0 ? {} : _b;
    _a.transition;
    var target = __rest(_a, ["transitionEnd", "transition"]);
    target = __assign(__assign({}, target), transitionEnd);
    for (var key in target) {
      var value = resolveFinalValueInKeyframes(target[key]);
      setMotionValue(visualElement2, key, value);
    }
  }
  function checkTargetForNewValues(visualElement2, target, origin) {
    var _a, _b, _c;
    var _d;
    var newValueKeys = Object.keys(target).filter(function(key2) {
      return !visualElement2.hasValue(key2);
    });
    var numNewValues = newValueKeys.length;
    if (!numNewValues)
      return;
    for (var i = 0; i < numNewValues; i++) {
      var key = newValueKeys[i];
      var targetValue = target[key];
      var value = null;
      if (Array.isArray(targetValue)) {
        value = targetValue[0];
      }
      if (value === null) {
        value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement2.readValue(key)) !== null && _b !== void 0 ? _b : target[key];
      }
      if (value === void 0 || value === null)
        continue;
      if (typeof value === "string" && (isNumericalString(value) || isZeroValueString(value))) {
        value = parseFloat(value);
      } else if (!findValueType(value) && complex.test(targetValue)) {
        value = getAnimatableNone2(key, targetValue);
      }
      visualElement2.addValue(key, motionValue(value));
      (_c = (_d = origin)[key]) !== null && _c !== void 0 ? _c : _d[key] = value;
      visualElement2.setBaseTarget(key, value);
    }
  }
  function getOriginFromTransition(key, transition3) {
    if (!transition3)
      return;
    var valueTransition = transition3[key] || transition3["default"] || transition3;
    return valueTransition.from;
  }
  function getOrigin(target, transition3, visualElement2) {
    var _a, _b;
    var origin = {};
    for (var key in target) {
      origin[key] = (_a = getOriginFromTransition(key, transition3)) !== null && _a !== void 0 ? _a : (_b = visualElement2.getValue(key)) === null || _b === void 0 ? void 0 : _b.get();
    }
    return origin;
  }

  // node_modules/framer-motion/dist/es/render/utils/animation.mjs
  function animateVisualElement(visualElement2, definition, options) {
    if (options === void 0) {
      options = {};
    }
    visualElement2.notifyAnimationStart(definition);
    var animation;
    if (Array.isArray(definition)) {
      var animations2 = definition.map(function(variant) {
        return animateVariant(visualElement2, variant, options);
      });
      animation = Promise.all(animations2);
    } else if (typeof definition === "string") {
      animation = animateVariant(visualElement2, definition, options);
    } else {
      var resolvedDefinition = typeof definition === "function" ? resolveVariant(visualElement2, definition, options.custom) : definition;
      animation = animateTarget(visualElement2, resolvedDefinition, options);
    }
    return animation.then(function() {
      return visualElement2.notifyAnimationComplete(definition);
    });
  }
  function animateVariant(visualElement2, variant, options) {
    var _a;
    if (options === void 0) {
      options = {};
    }
    var resolved = resolveVariant(visualElement2, variant, options.custom);
    var _b = (resolved || {}).transition, transition3 = _b === void 0 ? visualElement2.getDefaultTransition() || {} : _b;
    if (options.transitionOverride) {
      transition3 = options.transitionOverride;
    }
    var getAnimation2 = resolved ? function() {
      return animateTarget(visualElement2, resolved, options);
    } : function() {
      return Promise.resolve();
    };
    var getChildAnimations = ((_a = visualElement2.variantChildren) === null || _a === void 0 ? void 0 : _a.size) ? function(forwardDelay) {
      if (forwardDelay === void 0) {
        forwardDelay = 0;
      }
      var _a2 = transition3.delayChildren, delayChildren = _a2 === void 0 ? 0 : _a2, staggerChildren = transition3.staggerChildren, staggerDirection = transition3.staggerDirection;
      return animateChildren(visualElement2, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);
    } : function() {
      return Promise.resolve();
    };
    var when = transition3.when;
    if (when) {
      var _c = __read(when === "beforeChildren" ? [getAnimation2, getChildAnimations] : [getChildAnimations, getAnimation2], 2), first = _c[0], last3 = _c[1];
      return first().then(last3);
    } else {
      return Promise.all([getAnimation2(), getChildAnimations(options.delay)]);
    }
  }
  function animateTarget(visualElement2, definition, _a) {
    var _b;
    var _c = _a === void 0 ? {} : _a, _d = _c.delay, delay = _d === void 0 ? 0 : _d, transitionOverride = _c.transitionOverride, type = _c.type;
    var _e = visualElement2.makeTargetAnimatable(definition), _f = _e.transition, transition3 = _f === void 0 ? visualElement2.getDefaultTransition() : _f, transitionEnd = _e.transitionEnd, target = __rest(_e, ["transition", "transitionEnd"]);
    if (transitionOverride)
      transition3 = transitionOverride;
    var animations2 = [];
    var animationTypeState = type && ((_b = visualElement2.animationState) === null || _b === void 0 ? void 0 : _b.getState()[type]);
    for (var key in target) {
      var value = visualElement2.getValue(key);
      var valueTarget = target[key];
      if (!value || valueTarget === void 0 || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {
        continue;
      }
      var valueTransition = __assign({ delay }, transition3);
      if (visualElement2.shouldReduceMotion && isTransformProp(key)) {
        valueTransition = __assign(__assign({}, valueTransition), { type: false, delay: 0 });
      }
      var animation = startAnimation(key, value, valueTarget, valueTransition);
      animations2.push(animation);
    }
    return Promise.all(animations2).then(function() {
      transitionEnd && setTarget(visualElement2, transitionEnd);
    });
  }
  function animateChildren(visualElement2, variant, delayChildren, staggerChildren, staggerDirection, options) {
    if (delayChildren === void 0) {
      delayChildren = 0;
    }
    if (staggerChildren === void 0) {
      staggerChildren = 0;
    }
    if (staggerDirection === void 0) {
      staggerDirection = 1;
    }
    var animations2 = [];
    var maxStaggerDuration = (visualElement2.variantChildren.size - 1) * staggerChildren;
    var generateStaggerDuration = staggerDirection === 1 ? function(i) {
      if (i === void 0) {
        i = 0;
      }
      return i * staggerChildren;
    } : function(i) {
      if (i === void 0) {
        i = 0;
      }
      return maxStaggerDuration - i * staggerChildren;
    };
    Array.from(visualElement2.variantChildren).sort(sortByTreeOrder).forEach(function(child, i) {
      animations2.push(animateVariant(child, variant, __assign(__assign({}, options), { delay: delayChildren + generateStaggerDuration(i) })).then(function() {
        return child.notifyAnimationComplete(variant);
      }));
    });
    return Promise.all(animations2);
  }
  function sortByTreeOrder(a2, b2) {
    return a2.sortNodePosition(b2);
  }
  function shouldBlockAnimation(_a, key) {
    var protectedKeys = _a.protectedKeys, needsAnimating = _a.needsAnimating;
    var shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;
    needsAnimating[key] = false;
    return shouldBlock;
  }

  // node_modules/framer-motion/dist/es/render/utils/animation-state.mjs
  var variantPriorityOrder = [
    AnimationType.Animate,
    AnimationType.InView,
    AnimationType.Focus,
    AnimationType.Hover,
    AnimationType.Tap,
    AnimationType.Drag,
    AnimationType.Exit
  ];
  var reversePriorityOrder = __spreadArray([], __read(variantPriorityOrder), false).reverse();
  var numAnimationTypes = variantPriorityOrder.length;
  function animateList(visualElement2) {
    return function(animations2) {
      return Promise.all(animations2.map(function(_a) {
        var animation = _a.animation, options = _a.options;
        return animateVisualElement(visualElement2, animation, options);
      }));
    };
  }
  function createAnimationState(visualElement2) {
    var animate3 = animateList(visualElement2);
    var state2 = createState();
    var allAnimatedKeys = {};
    var isInitialRender = true;
    var buildResolvedTypeValues = function(acc, definition) {
      var resolved = resolveVariant(visualElement2, definition);
      if (resolved) {
        resolved.transition;
        var transitionEnd = resolved.transitionEnd, target = __rest(resolved, ["transition", "transitionEnd"]);
        acc = __assign(__assign(__assign({}, acc), target), transitionEnd);
      }
      return acc;
    };
    function isAnimated(key) {
      return allAnimatedKeys[key] !== void 0;
    }
    function setAnimateFunction(makeAnimator) {
      animate3 = makeAnimator(visualElement2);
    }
    function animateChanges(options, changedActiveType) {
      var _a;
      var props = visualElement2.getProps();
      var context = visualElement2.getVariantContext(true) || {};
      var animations2 = [];
      var removedKeys = /* @__PURE__ */ new Set();
      var encounteredKeys = {};
      var removedVariantIndex = Infinity;
      var _loop_1 = function(i2) {
        var type = reversePriorityOrder[i2];
        var typeState = state2[type];
        var prop2 = (_a = props[type]) !== null && _a !== void 0 ? _a : context[type];
        var propIsVariant = isVariantLabel(prop2);
        var activeDelta = type === changedActiveType ? typeState.isActive : null;
        if (activeDelta === false)
          removedVariantIndex = i2;
        var isInherited = prop2 === context[type] && prop2 !== props[type] && propIsVariant;
        if (isInherited && isInitialRender && visualElement2.manuallyAnimateOnMount) {
          isInherited = false;
        }
        typeState.protectedKeys = __assign({}, encounteredKeys);
        if (!typeState.isActive && activeDelta === null || !prop2 && !typeState.prevProp || isAnimationControls(prop2) || typeof prop2 === "boolean") {
          return "continue";
        }
        var variantDidChange = checkVariantsDidChange(typeState.prevProp, prop2);
        var shouldAnimateType = variantDidChange || type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || i2 > removedVariantIndex && propIsVariant;
        var definitionList = Array.isArray(prop2) ? prop2 : [prop2];
        var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});
        if (activeDelta === false)
          resolvedValues = {};
        var _b = typeState.prevResolvedValues, prevResolvedValues = _b === void 0 ? {} : _b;
        var allKeys = __assign(__assign({}, prevResolvedValues), resolvedValues);
        var markToAnimate = function(key2) {
          shouldAnimateType = true;
          removedKeys.delete(key2);
          typeState.needsAnimating[key2] = true;
        };
        for (var key in allKeys) {
          var next2 = resolvedValues[key];
          var prev2 = prevResolvedValues[key];
          if (encounteredKeys.hasOwnProperty(key))
            continue;
          if (next2 !== prev2) {
            if (isKeyframesTarget(next2) && isKeyframesTarget(prev2)) {
              if (!shallowCompare(next2, prev2) || variantDidChange) {
                markToAnimate(key);
              } else {
                typeState.protectedKeys[key] = true;
              }
            } else if (next2 !== void 0) {
              markToAnimate(key);
            } else {
              removedKeys.add(key);
            }
          } else if (next2 !== void 0 && removedKeys.has(key)) {
            markToAnimate(key);
          } else {
            typeState.protectedKeys[key] = true;
          }
        }
        typeState.prevProp = prop2;
        typeState.prevResolvedValues = resolvedValues;
        if (typeState.isActive) {
          encounteredKeys = __assign(__assign({}, encounteredKeys), resolvedValues);
        }
        if (isInitialRender && visualElement2.blockInitialAnimation) {
          shouldAnimateType = false;
        }
        if (shouldAnimateType && !isInherited) {
          animations2.push.apply(animations2, __spreadArray([], __read(definitionList.map(function(animation) {
            return {
              animation,
              options: __assign({ type }, options)
            };
          })), false));
        }
      };
      for (var i = 0; i < numAnimationTypes; i++) {
        _loop_1(i);
      }
      allAnimatedKeys = __assign({}, encounteredKeys);
      if (removedKeys.size) {
        var fallbackAnimation_1 = {};
        removedKeys.forEach(function(key) {
          var fallbackTarget = visualElement2.getBaseTarget(key);
          if (fallbackTarget !== void 0) {
            fallbackAnimation_1[key] = fallbackTarget;
          }
        });
        animations2.push({ animation: fallbackAnimation_1 });
      }
      var shouldAnimate = Boolean(animations2.length);
      if (isInitialRender && props.initial === false && !visualElement2.manuallyAnimateOnMount) {
        shouldAnimate = false;
      }
      isInitialRender = false;
      return shouldAnimate ? animate3(animations2) : Promise.resolve();
    }
    function setActive(type, isActive, options) {
      var _a;
      if (state2[type].isActive === isActive)
        return Promise.resolve();
      (_a = visualElement2.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function(child) {
        var _a2;
        return (_a2 = child.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(type, isActive);
      });
      state2[type].isActive = isActive;
      var animations2 = animateChanges(options, type);
      for (var key in state2) {
        state2[key].protectedKeys = {};
      }
      return animations2;
    }
    return {
      isAnimated,
      animateChanges,
      setActive,
      setAnimateFunction,
      getState: function() {
        return state2;
      }
    };
  }
  function checkVariantsDidChange(prev2, next2) {
    if (typeof next2 === "string") {
      return next2 !== prev2;
    } else if (isVariantLabels(next2)) {
      return !shallowCompare(next2, prev2);
    }
    return false;
  }
  function createTypeState(isActive) {
    if (isActive === void 0) {
      isActive = false;
    }
    return {
      isActive,
      protectedKeys: {},
      needsAnimating: {},
      prevResolvedValues: {}
    };
  }
  function createState() {
    var _a;
    return _a = {}, _a[AnimationType.Animate] = createTypeState(true), _a[AnimationType.InView] = createTypeState(), _a[AnimationType.Hover] = createTypeState(), _a[AnimationType.Tap] = createTypeState(), _a[AnimationType.Drag] = createTypeState(), _a[AnimationType.Focus] = createTypeState(), _a[AnimationType.Exit] = createTypeState(), _a;
  }

  // node_modules/framer-motion/dist/es/motion/features/animations.mjs
  var animations = {
    animation: makeRenderlessComponent(function(_a) {
      var visualElement2 = _a.visualElement, animate3 = _a.animate;
      visualElement2.animationState || (visualElement2.animationState = createAnimationState(visualElement2));
      if (isAnimationControls(animate3)) {
        (0, import_react38.useEffect)(function() {
          return animate3.subscribe(visualElement2);
        }, [animate3]);
      }
    }),
    exit: makeRenderlessComponent(function(props) {
      var custom = props.custom, visualElement2 = props.visualElement;
      var _a = __read(usePresence(), 2), isPresent2 = _a[0], safeToRemove = _a[1];
      var presenceContext = (0, import_react38.useContext)(PresenceContext);
      (0, import_react38.useEffect)(function() {
        var _a2, _b;
        visualElement2.isPresent = isPresent2;
        var animation = (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Exit, !isPresent2, { custom: (_b = presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.custom) !== null && _b !== void 0 ? _b : custom });
        !isPresent2 && (animation === null || animation === void 0 ? void 0 : animation.then(safeToRemove));
      }, [isPresent2]);
    })
  };

  // node_modules/framer-motion/dist/es/gestures/drag/use-drag.mjs
  var import_react39 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/gestures/PanSession.mjs
  var PanSession2 = function() {
    function PanSession3(event, handlers, _a) {
      var _this = this;
      var _b = _a === void 0 ? {} : _a, transformPagePoint = _b.transformPagePoint;
      this.startEvent = null;
      this.lastMoveEvent = null;
      this.lastMoveEventInfo = null;
      this.handlers = {};
      this.updatePoint = function() {
        if (!(_this.lastMoveEvent && _this.lastMoveEventInfo))
          return;
        var info2 = getPanInfo(_this.lastMoveEventInfo, _this.history);
        var isPanStarted = _this.startEvent !== null;
        var isDistancePastThreshold = distance(info2.offset, { x: 0, y: 0 }) >= 3;
        if (!isPanStarted && !isDistancePastThreshold)
          return;
        var point2 = info2.point;
        var timestamp2 = getFrameData2().timestamp;
        _this.history.push(__assign(__assign({}, point2), { timestamp: timestamp2 }));
        var _a2 = _this.handlers, onStart = _a2.onStart, onMove = _a2.onMove;
        if (!isPanStarted) {
          onStart && onStart(_this.lastMoveEvent, info2);
          _this.startEvent = _this.lastMoveEvent;
        }
        onMove && onMove(_this.lastMoveEvent, info2);
      };
      this.handlePointerMove = function(event2, info2) {
        _this.lastMoveEvent = event2;
        _this.lastMoveEventInfo = transformPoint(info2, _this.transformPagePoint);
        if (isMouseEvent(event2) && event2.buttons === 0) {
          _this.handlePointerUp(event2, info2);
          return;
        }
        es_default2.update(_this.updatePoint, true);
      };
      this.handlePointerUp = function(event2, info2) {
        _this.end();
        var _a2 = _this.handlers, onEnd = _a2.onEnd, onSessionEnd = _a2.onSessionEnd;
        var panInfo = getPanInfo(transformPoint(info2, _this.transformPagePoint), _this.history);
        if (_this.startEvent && onEnd) {
          onEnd(event2, panInfo);
        }
        onSessionEnd && onSessionEnd(event2, panInfo);
      };
      if (isTouchEvent(event) && event.touches.length > 1)
        return;
      this.handlers = handlers;
      this.transformPagePoint = transformPagePoint;
      var info = extractEventInfo(event);
      var initialInfo = transformPoint(info, this.transformPagePoint);
      var point = initialInfo.point;
      var timestamp = getFrameData2().timestamp;
      this.history = [__assign(__assign({}, point), { timestamp })];
      var onSessionStart = handlers.onSessionStart;
      onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));
      this.removeListeners = pipe3(addPointerEvent(window, "pointermove", this.handlePointerMove), addPointerEvent(window, "pointerup", this.handlePointerUp), addPointerEvent(window, "pointercancel", this.handlePointerUp));
    }
    PanSession3.prototype.updateHandlers = function(handlers) {
      this.handlers = handlers;
    };
    PanSession3.prototype.end = function() {
      this.removeListeners && this.removeListeners();
      cancelSync2.update(this.updatePoint);
    };
    return PanSession3;
  }();
  function transformPoint(info, transformPagePoint) {
    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;
  }
  function subtractPoint(a2, b2) {
    return { x: a2.x - b2.x, y: a2.y - b2.y };
  }
  function getPanInfo(_a, history) {
    var point = _a.point;
    return {
      point,
      delta: subtractPoint(point, lastDevicePoint(history)),
      offset: subtractPoint(point, startDevicePoint(history)),
      velocity: getVelocity2(history, 0.1)
    };
  }
  function startDevicePoint(history) {
    return history[0];
  }
  function lastDevicePoint(history) {
    return history[history.length - 1];
  }
  function getVelocity2(history, timeDelta) {
    if (history.length < 2) {
      return { x: 0, y: 0 };
    }
    var i = history.length - 1;
    var timestampedPoint = null;
    var lastPoint = lastDevicePoint(history);
    while (i >= 0) {
      timestampedPoint = history[i];
      if (lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds(timeDelta)) {
        break;
      }
      i--;
    }
    if (!timestampedPoint) {
      return { x: 0, y: 0 };
    }
    var time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;
    if (time === 0) {
      return { x: 0, y: 0 };
    }
    var currentVelocity = {
      x: (lastPoint.x - timestampedPoint.x) / time,
      y: (lastPoint.y - timestampedPoint.y) / time
    };
    if (currentVelocity.x === Infinity) {
      currentVelocity.x = 0;
    }
    if (currentVelocity.y === Infinity) {
      currentVelocity.y = 0;
    }
    return currentVelocity;
  }

  // node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs
  function applyConstraints(point, _a, elastic) {
    var min = _a.min, max = _a.max;
    if (min !== void 0 && point < min) {
      point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);
    } else if (max !== void 0 && point > max) {
      point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);
    }
    return point;
  }
  function calcRelativeAxisConstraints(axis, min, max) {
    return {
      min: min !== void 0 ? axis.min + min : void 0,
      max: max !== void 0 ? axis.max + max - (axis.max - axis.min) : void 0
    };
  }
  function calcRelativeConstraints(layoutBox, _a) {
    var top = _a.top, left = _a.left, bottom = _a.bottom, right = _a.right;
    return {
      x: calcRelativeAxisConstraints(layoutBox.x, left, right),
      y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)
    };
  }
  function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
    var _a;
    var min = constraintsAxis.min - layoutAxis.min;
    var max = constraintsAxis.max - layoutAxis.max;
    if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {
      _a = __read([max, min], 2), min = _a[0], max = _a[1];
    }
    return { min, max };
  }
  function calcViewportConstraints(layoutBox, constraintsBox) {
    return {
      x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
      y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)
    };
  }
  function calcOrigin2(source, target) {
    var origin = 0.5;
    var sourceLength = calcLength(source);
    var targetLength = calcLength(target);
    if (targetLength > sourceLength) {
      origin = progress2(target.min, target.max - sourceLength, source.min);
    } else if (sourceLength > targetLength) {
      origin = progress2(source.min, source.max - targetLength, target.min);
    }
    return clamp(0, 1, origin);
  }
  function rebaseAxisConstraints(layout2, constraints) {
    var relativeConstraints = {};
    if (constraints.min !== void 0) {
      relativeConstraints.min = constraints.min - layout2.min;
    }
    if (constraints.max !== void 0) {
      relativeConstraints.max = constraints.max - layout2.min;
    }
    return relativeConstraints;
  }
  var defaultElastic = 0.35;
  function resolveDragElastic(dragElastic) {
    if (dragElastic === void 0) {
      dragElastic = defaultElastic;
    }
    if (dragElastic === false) {
      dragElastic = 0;
    } else if (dragElastic === true) {
      dragElastic = defaultElastic;
    }
    return {
      x: resolveAxisElastic(dragElastic, "left", "right"),
      y: resolveAxisElastic(dragElastic, "top", "bottom")
    };
  }
  function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
    return {
      min: resolvePointElastic(dragElastic, minLabel),
      max: resolvePointElastic(dragElastic, maxLabel)
    };
  }
  function resolvePointElastic(dragElastic, label) {
    var _a;
    return typeof dragElastic === "number" ? dragElastic : (_a = dragElastic[label]) !== null && _a !== void 0 ? _a : 0;
  }

  // node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs
  function convertBoundingBoxToBox(_a) {
    var top = _a.top, left = _a.left, right = _a.right, bottom = _a.bottom;
    return {
      x: { min: left, max: right },
      y: { min: top, max: bottom }
    };
  }
  function convertBoxToBoundingBox(_a) {
    var x = _a.x, y = _a.y;
    return { top: y.min, right: x.max, bottom: y.max, left: x.min };
  }
  function transformBoxPoints(point, transformPoint2) {
    if (!transformPoint2)
      return point;
    var topLeft = transformPoint2({ x: point.left, y: point.top });
    var bottomRight = transformPoint2({ x: point.right, y: point.bottom });
    return {
      top: topLeft.y,
      left: topLeft.x,
      bottom: bottomRight.y,
      right: bottomRight.x
    };
  }

  // node_modules/framer-motion/dist/es/projection/utils/measure.mjs
  function measureViewportBox(instance, transformPoint2) {
    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint2));
  }
  function measurePageBox(element, rootProjectionNode2, transformPagePoint) {
    var viewportBox = measureViewportBox(element, transformPagePoint);
    var scroll2 = rootProjectionNode2.scroll;
    if (scroll2) {
      translateAxis(viewportBox.x, scroll2.x);
      translateAxis(viewportBox.y, scroll2.y);
    }
    return viewportBox;
  }

  // node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs
  var elementDragControls = /* @__PURE__ */ new WeakMap();
  var VisualElementDragControls = function() {
    function VisualElementDragControls2(visualElement2) {
      this.openGlobalLock = null;
      this.isDragging = false;
      this.currentDirection = null;
      this.originPoint = { x: 0, y: 0 };
      this.constraints = false;
      this.hasMutatedConstraints = false;
      this.elastic = createBox();
      this.visualElement = visualElement2;
    }
    VisualElementDragControls2.prototype.start = function(originEvent, _a) {
      var _this = this;
      var _b = _a === void 0 ? {} : _a, _c = _b.snapToCursor, snapToCursor = _c === void 0 ? false : _c;
      if (this.visualElement.isPresent === false)
        return;
      var onSessionStart = function(event) {
        _this.stopAnimation();
        if (snapToCursor) {
          _this.snapToCursor(extractEventInfo(event, "page").point);
        }
      };
      var onStart = function(event, info) {
        var _a2;
        var _b2 = _this.getProps(), drag2 = _b2.drag, dragPropagation = _b2.dragPropagation, onDragStart = _b2.onDragStart;
        if (drag2 && !dragPropagation) {
          if (_this.openGlobalLock)
            _this.openGlobalLock();
          _this.openGlobalLock = getGlobalLock(drag2);
          if (!_this.openGlobalLock)
            return;
        }
        _this.isDragging = true;
        _this.currentDirection = null;
        _this.resolveConstraints();
        if (_this.visualElement.projection) {
          _this.visualElement.projection.isAnimationBlocked = true;
          _this.visualElement.projection.target = void 0;
        }
        eachAxis(function(axis) {
          var _a3, _b3;
          var current = _this.getAxisMotionValue(axis).get() || 0;
          if (percent.test(current)) {
            var measuredAxis = (_b3 = (_a3 = _this.visualElement.projection) === null || _a3 === void 0 ? void 0 : _a3.layout) === null || _b3 === void 0 ? void 0 : _b3.actual[axis];
            if (measuredAxis) {
              var length_1 = calcLength(measuredAxis);
              current = length_1 * (parseFloat(current) / 100);
            }
          }
          _this.originPoint[axis] = current;
        });
        onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event, info);
        (_a2 = _this.visualElement.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Drag, true);
      };
      var onMove = function(event, info) {
        var _a2 = _this.getProps(), dragPropagation = _a2.dragPropagation, dragDirectionLock = _a2.dragDirectionLock, onDirectionLock = _a2.onDirectionLock, onDrag = _a2.onDrag;
        if (!dragPropagation && !_this.openGlobalLock)
          return;
        var offset = info.offset;
        if (dragDirectionLock && _this.currentDirection === null) {
          _this.currentDirection = getCurrentDirection(offset);
          if (_this.currentDirection !== null) {
            onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(_this.currentDirection);
          }
          return;
        }
        _this.updateAxis("x", info.point, offset);
        _this.updateAxis("y", info.point, offset);
        _this.visualElement.syncRender();
        onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, info);
      };
      var onSessionEnd = function(event, info) {
        return _this.stop(event, info);
      };
      this.panSession = new PanSession2(originEvent, {
        onSessionStart,
        onStart,
        onMove,
        onSessionEnd
      }, { transformPagePoint: this.visualElement.getTransformPagePoint() });
    };
    VisualElementDragControls2.prototype.stop = function(event, info) {
      var isDragging = this.isDragging;
      this.cancel();
      if (!isDragging)
        return;
      var velocity = info.velocity;
      this.startAnimation(velocity);
      var onDragEnd = this.getProps().onDragEnd;
      onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);
    };
    VisualElementDragControls2.prototype.cancel = function() {
      var _a, _b;
      this.isDragging = false;
      if (this.visualElement.projection) {
        this.visualElement.projection.isAnimationBlocked = false;
      }
      (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();
      this.panSession = void 0;
      var dragPropagation = this.getProps().dragPropagation;
      if (!dragPropagation && this.openGlobalLock) {
        this.openGlobalLock();
        this.openGlobalLock = null;
      }
      (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);
    };
    VisualElementDragControls2.prototype.updateAxis = function(axis, _point, offset) {
      var drag2 = this.getProps().drag;
      if (!offset || !shouldDrag(axis, drag2, this.currentDirection))
        return;
      var axisValue = this.getAxisMotionValue(axis);
      var next2 = this.originPoint[axis] + offset[axis];
      if (this.constraints && this.constraints[axis]) {
        next2 = applyConstraints(next2, this.constraints[axis], this.elastic[axis]);
      }
      axisValue.set(next2);
    };
    VisualElementDragControls2.prototype.resolveConstraints = function() {
      var _this = this;
      var _a = this.getProps(), dragConstraints = _a.dragConstraints, dragElastic = _a.dragElastic;
      var layout2 = (this.visualElement.projection || {}).layout;
      var prevConstraints = this.constraints;
      if (dragConstraints && isRefObject2(dragConstraints)) {
        if (!this.constraints) {
          this.constraints = this.resolveRefConstraints();
        }
      } else {
        if (dragConstraints && layout2) {
          this.constraints = calcRelativeConstraints(layout2.actual, dragConstraints);
        } else {
          this.constraints = false;
        }
      }
      this.elastic = resolveDragElastic(dragElastic);
      if (prevConstraints !== this.constraints && layout2 && this.constraints && !this.hasMutatedConstraints) {
        eachAxis(function(axis) {
          if (_this.getAxisMotionValue(axis)) {
            _this.constraints[axis] = rebaseAxisConstraints(layout2.actual[axis], _this.constraints[axis]);
          }
        });
      }
    };
    VisualElementDragControls2.prototype.resolveRefConstraints = function() {
      var _a = this.getProps(), constraints = _a.dragConstraints, onMeasureDragConstraints = _a.onMeasureDragConstraints;
      if (!constraints || !isRefObject2(constraints))
        return false;
      var constraintsElement = constraints.current;
      invariant(constraintsElement !== null, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
      var projection = this.visualElement.projection;
      if (!projection || !projection.layout)
        return false;
      var constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());
      var measuredConstraints = calcViewportConstraints(projection.layout.actual, constraintsBox);
      if (onMeasureDragConstraints) {
        var userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));
        this.hasMutatedConstraints = !!userConstraints;
        if (userConstraints) {
          measuredConstraints = convertBoundingBoxToBox(userConstraints);
        }
      }
      return measuredConstraints;
    };
    VisualElementDragControls2.prototype.startAnimation = function(velocity) {
      var _this = this;
      var _a = this.getProps(), drag2 = _a.drag, dragMomentum = _a.dragMomentum, dragElastic = _a.dragElastic, dragTransition = _a.dragTransition, dragSnapToOrigin = _a.dragSnapToOrigin, onDragTransitionEnd = _a.onDragTransitionEnd;
      var constraints = this.constraints || {};
      var momentumAnimations = eachAxis(function(axis) {
        var _a2;
        if (!shouldDrag(axis, drag2, _this.currentDirection)) {
          return;
        }
        var transition3 = (_a2 = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a2 !== void 0 ? _a2 : {};
        if (dragSnapToOrigin)
          transition3 = { min: 0, max: 0 };
        var bounceStiffness = dragElastic ? 200 : 1e6;
        var bounceDamping = dragElastic ? 40 : 1e7;
        var inertia2 = __assign(__assign({ type: "inertia", velocity: dragMomentum ? velocity[axis] : 0, bounceStiffness, bounceDamping, timeConstant: 750, restDelta: 1, restSpeed: 10 }, dragTransition), transition3);
        return _this.startAxisValueAnimation(axis, inertia2);
      });
      return Promise.all(momentumAnimations).then(onDragTransitionEnd);
    };
    VisualElementDragControls2.prototype.startAxisValueAnimation = function(axis, transition3) {
      var axisValue = this.getAxisMotionValue(axis);
      return startAnimation(axis, axisValue, 0, transition3);
    };
    VisualElementDragControls2.prototype.stopAnimation = function() {
      var _this = this;
      eachAxis(function(axis) {
        return _this.getAxisMotionValue(axis).stop();
      });
    };
    VisualElementDragControls2.prototype.getAxisMotionValue = function(axis) {
      var _a, _b;
      var dragKey = "_drag" + axis.toUpperCase();
      var externalMotionValue = this.visualElement.getProps()[dragKey];
      return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (_b = (_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) !== null && _b !== void 0 ? _b : 0);
    };
    VisualElementDragControls2.prototype.snapToCursor = function(point) {
      var _this = this;
      eachAxis(function(axis) {
        var drag2 = _this.getProps().drag;
        if (!shouldDrag(axis, drag2, _this.currentDirection))
          return;
        var projection = _this.visualElement.projection;
        var axisValue = _this.getAxisMotionValue(axis);
        if (projection && projection.layout) {
          var _a = projection.layout.actual[axis], min = _a.min, max = _a.max;
          axisValue.set(point[axis] - mix(min, max, 0.5));
        }
      });
    };
    VisualElementDragControls2.prototype.scalePositionWithinConstraints = function() {
      var _this = this;
      var _a;
      var _b = this.getProps(), drag2 = _b.drag, dragConstraints = _b.dragConstraints;
      var projection = this.visualElement.projection;
      if (!isRefObject2(dragConstraints) || !projection || !this.constraints)
        return;
      this.stopAnimation();
      var boxProgress = { x: 0, y: 0 };
      eachAxis(function(axis) {
        var axisValue = _this.getAxisMotionValue(axis);
        if (axisValue) {
          var latest = axisValue.get();
          boxProgress[axis] = calcOrigin2({ min: latest, max: latest }, _this.constraints[axis]);
        }
      });
      var transformTemplate2 = this.visualElement.getProps().transformTemplate;
      this.visualElement.getInstance().style.transform = transformTemplate2 ? transformTemplate2({}, "") : "none";
      (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();
      projection.updateLayout();
      this.resolveConstraints();
      eachAxis(function(axis) {
        if (!shouldDrag(axis, drag2, null))
          return;
        var axisValue = _this.getAxisMotionValue(axis);
        var _a2 = _this.constraints[axis], min = _a2.min, max = _a2.max;
        axisValue.set(mix(min, max, boxProgress[axis]));
      });
    };
    VisualElementDragControls2.prototype.addListeners = function() {
      var _this = this;
      var _a;
      elementDragControls.set(this.visualElement, this);
      var element = this.visualElement.getInstance();
      var stopPointerListener = addPointerEvent(element, "pointerdown", function(event) {
        var _a2 = _this.getProps(), drag2 = _a2.drag, _b = _a2.dragListener, dragListener = _b === void 0 ? true : _b;
        drag2 && dragListener && _this.start(event);
      });
      var measureDragConstraints = function() {
        var dragConstraints = _this.getProps().dragConstraints;
        if (isRefObject2(dragConstraints)) {
          _this.constraints = _this.resolveRefConstraints();
        }
      };
      var projection = this.visualElement.projection;
      var stopMeasureLayoutListener = projection.addEventListener("measure", measureDragConstraints);
      if (projection && !projection.layout) {
        (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();
        projection.updateLayout();
      }
      measureDragConstraints();
      var stopResizeListener = addDomEvent(window, "resize", function() {
        _this.scalePositionWithinConstraints();
      });
      projection.addEventListener("didUpdate", function(_a2) {
        var delta = _a2.delta, hasLayoutChanged = _a2.hasLayoutChanged;
        if (_this.isDragging && hasLayoutChanged) {
          eachAxis(function(axis) {
            var motionValue2 = _this.getAxisMotionValue(axis);
            if (!motionValue2)
              return;
            _this.originPoint[axis] += delta[axis].translate;
            motionValue2.set(motionValue2.get() + delta[axis].translate);
          });
          _this.visualElement.syncRender();
        }
      });
      return function() {
        stopResizeListener();
        stopPointerListener();
        stopMeasureLayoutListener();
      };
    };
    VisualElementDragControls2.prototype.getProps = function() {
      var props = this.visualElement.getProps();
      var _a = props.drag, drag2 = _a === void 0 ? false : _a, _b = props.dragDirectionLock, dragDirectionLock = _b === void 0 ? false : _b, _c = props.dragPropagation, dragPropagation = _c === void 0 ? false : _c, _d = props.dragConstraints, dragConstraints = _d === void 0 ? false : _d, _e = props.dragElastic, dragElastic = _e === void 0 ? defaultElastic : _e, _f = props.dragMomentum, dragMomentum = _f === void 0 ? true : _f;
      return __assign(__assign({}, props), { drag: drag2, dragDirectionLock, dragPropagation, dragConstraints, dragElastic, dragMomentum });
    };
    return VisualElementDragControls2;
  }();
  function shouldDrag(direction2, drag2, currentDirection) {
    return (drag2 === true || drag2 === direction2) && (currentDirection === null || currentDirection === direction2);
  }
  function getCurrentDirection(offset, lockThreshold) {
    if (lockThreshold === void 0) {
      lockThreshold = 10;
    }
    var direction2 = null;
    if (Math.abs(offset.y) > lockThreshold) {
      direction2 = "y";
    } else if (Math.abs(offset.x) > lockThreshold) {
      direction2 = "x";
    }
    return direction2;
  }

  // node_modules/framer-motion/dist/es/gestures/drag/use-drag.mjs
  function useDrag(props) {
    var groupDragControls = props.dragControls, visualElement2 = props.visualElement;
    var dragControls = useConstant(function() {
      return new VisualElementDragControls(visualElement2);
    });
    (0, import_react39.useEffect)(function() {
      return groupDragControls && groupDragControls.subscribe(dragControls);
    }, [dragControls, groupDragControls]);
    (0, import_react39.useEffect)(function() {
      return dragControls.addListeners();
    }, [dragControls]);
  }

  // node_modules/framer-motion/dist/es/gestures/use-pan-gesture.mjs
  var import_react40 = __toESM(require_react(), 1);
  function usePanGesture(_a) {
    var onPan = _a.onPan, onPanStart = _a.onPanStart, onPanEnd = _a.onPanEnd, onPanSessionStart = _a.onPanSessionStart, visualElement2 = _a.visualElement;
    var hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;
    var panSession = (0, import_react40.useRef)(null);
    var transformPagePoint = (0, import_react40.useContext)(MotionConfigContext).transformPagePoint;
    var handlers = {
      onSessionStart: onPanSessionStart,
      onStart: onPanStart,
      onMove: onPan,
      onEnd: function(event, info) {
        panSession.current = null;
        onPanEnd && onPanEnd(event, info);
      }
    };
    (0, import_react40.useEffect)(function() {
      if (panSession.current !== null) {
        panSession.current.updateHandlers(handlers);
      }
    });
    function onPointerDown(event) {
      panSession.current = new PanSession2(event, handlers, {
        transformPagePoint
      });
    }
    usePointerEvent(visualElement2, "pointerdown", hasPanEvents && onPointerDown);
    useUnmountEffect2(function() {
      return panSession.current && panSession.current.end();
    });
  }

  // node_modules/framer-motion/dist/es/motion/features/drag.mjs
  var drag = {
    pan: makeRenderlessComponent(usePanGesture),
    drag: makeRenderlessComponent(useDrag)
  };

  // node_modules/framer-motion/dist/es/render/utils/lifecycles.mjs
  var names2 = [
    "LayoutMeasure",
    "BeforeLayoutMeasure",
    "LayoutUpdate",
    "ViewportBoxUpdate",
    "Update",
    "Render",
    "AnimationComplete",
    "LayoutAnimationComplete",
    "AnimationStart",
    "SetAxisTarget",
    "Unmount"
  ];
  function createLifecycles() {
    var managers = names2.map(function() {
      return new SubscriptionManager();
    });
    var propSubscriptions = {};
    var lifecycles = {
      clearAllListeners: function() {
        return managers.forEach(function(manager2) {
          return manager2.clear();
        });
      },
      updatePropListeners: function(props) {
        names2.forEach(function(name) {
          var _a;
          var on = "on" + name;
          var propListener = props[on];
          (_a = propSubscriptions[name]) === null || _a === void 0 ? void 0 : _a.call(propSubscriptions);
          if (propListener) {
            propSubscriptions[name] = lifecycles[on](propListener);
          }
        });
      }
    };
    managers.forEach(function(manager2, i) {
      lifecycles["on" + names2[i]] = function(handler) {
        return manager2.add(handler);
      };
      lifecycles["notify" + names2[i]] = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return manager2.notify.apply(manager2, __spreadArray([], __read(args), false));
      };
    });
    return lifecycles;
  }

  // node_modules/framer-motion/dist/es/render/utils/motion-values.mjs
  function updateMotionValuesFromProps(element, next2, prev2) {
    var _a;
    for (var key in next2) {
      var nextValue = next2[key];
      var prevValue = prev2[key];
      if (isMotionValue(nextValue)) {
        element.addValue(key, nextValue);
      } else if (isMotionValue(prevValue)) {
        element.addValue(key, motionValue(nextValue));
      } else if (prevValue !== nextValue) {
        if (element.hasValue(key)) {
          var existingValue = element.getValue(key);
          !existingValue.hasAnimated && existingValue.set(nextValue);
        } else {
          element.addValue(key, motionValue((_a = element.getStaticValue(key)) !== null && _a !== void 0 ? _a : nextValue));
        }
      }
    }
    for (var key in prev2) {
      if (next2[key] === void 0)
        element.removeValue(key);
    }
    return next2;
  }

  // node_modules/framer-motion/dist/es/render/index.mjs
  var visualElement = function(_a) {
    var _b = _a.treeType, treeType = _b === void 0 ? "" : _b, build = _a.build, getBaseTarget = _a.getBaseTarget, makeTargetAnimatable = _a.makeTargetAnimatable, measureViewportBox2 = _a.measureViewportBox, renderInstance = _a.render, readValueFromInstance = _a.readValueFromInstance, removeValueFromRenderState = _a.removeValueFromRenderState, sortNodePosition = _a.sortNodePosition, scrapeMotionValuesFromProps3 = _a.scrapeMotionValuesFromProps;
    return function(_a2, options) {
      var parent = _a2.parent, props = _a2.props, presenceId = _a2.presenceId, blockInitialAnimation = _a2.blockInitialAnimation, visualState = _a2.visualState, shouldReduceMotion = _a2.shouldReduceMotion;
      if (options === void 0) {
        options = {};
      }
      var isMounted = false;
      var latestValues = visualState.latestValues, renderState = visualState.renderState;
      var instance;
      var lifecycles = createLifecycles();
      var values = /* @__PURE__ */ new Map();
      var valueSubscriptions = /* @__PURE__ */ new Map();
      var prevMotionValues = {};
      var baseTarget = __assign({}, latestValues);
      var removeFromVariantTree;
      function render3() {
        if (!instance || !isMounted)
          return;
        triggerBuild();
        renderInstance(instance, renderState, props.style, element.projection);
      }
      function triggerBuild() {
        build(element, renderState, latestValues, options, props);
      }
      function update() {
        lifecycles.notifyUpdate(latestValues);
      }
      function bindToMotionValue(key2, value2) {
        var removeOnChange = value2.onChange(function(latestValue) {
          latestValues[key2] = latestValue;
          props.onUpdate && es_default2.update(update, false, true);
        });
        var removeOnRenderRequest = value2.onRenderRequest(element.scheduleRender);
        valueSubscriptions.set(key2, function() {
          removeOnChange();
          removeOnRenderRequest();
        });
      }
      var initialMotionValues = scrapeMotionValuesFromProps3(props);
      for (var key in initialMotionValues) {
        var value = initialMotionValues[key];
        if (latestValues[key] !== void 0 && isMotionValue(value)) {
          value.set(latestValues[key], false);
        }
      }
      var isControllingVariants = checkIfControllingVariants(props);
      var isVariantNode = checkIfVariantNode(props);
      var element = __assign(__assign({
        treeType,
        current: null,
        depth: parent ? parent.depth + 1 : 0,
        parent,
        children: /* @__PURE__ */ new Set(),
        presenceId,
        shouldReduceMotion,
        variantChildren: isVariantNode ? /* @__PURE__ */ new Set() : void 0,
        isVisible: void 0,
        manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),
        blockInitialAnimation,
        isMounted: function() {
          return Boolean(instance);
        },
        mount: function(newInstance) {
          isMounted = true;
          instance = element.current = newInstance;
          if (element.projection) {
            element.projection.mount(newInstance);
          }
          if (isVariantNode && parent && !isControllingVariants) {
            removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);
          }
          values.forEach(function(value2, key2) {
            return bindToMotionValue(key2, value2);
          });
          parent === null || parent === void 0 ? void 0 : parent.children.add(element);
          element.setProps(props);
        },
        unmount: function() {
          var _a3;
          (_a3 = element.projection) === null || _a3 === void 0 ? void 0 : _a3.unmount();
          cancelSync2.update(update);
          cancelSync2.render(render3);
          valueSubscriptions.forEach(function(remove2) {
            return remove2();
          });
          removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();
          parent === null || parent === void 0 ? void 0 : parent.children.delete(element);
          lifecycles.clearAllListeners();
          instance = void 0;
          isMounted = false;
        },
        addVariantChild: function(child) {
          var _a3;
          var closestVariantNode = element.getClosestVariantNode();
          if (closestVariantNode) {
            (_a3 = closestVariantNode.variantChildren) === null || _a3 === void 0 ? void 0 : _a3.add(child);
            return function() {
              return closestVariantNode.variantChildren.delete(child);
            };
          }
        },
        sortNodePosition: function(other) {
          if (!sortNodePosition || treeType !== other.treeType)
            return 0;
          return sortNodePosition(element.getInstance(), other.getInstance());
        },
        getClosestVariantNode: function() {
          return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();
        },
        getLayoutId: function() {
          return props.layoutId;
        },
        getInstance: function() {
          return instance;
        },
        getStaticValue: function(key2) {
          return latestValues[key2];
        },
        setStaticValue: function(key2, value2) {
          return latestValues[key2] = value2;
        },
        getLatestValues: function() {
          return latestValues;
        },
        setVisibility: function(visibility) {
          if (element.isVisible === visibility)
            return;
          element.isVisible = visibility;
          element.scheduleRender();
        },
        makeTargetAnimatable: function(target, canMutate) {
          if (canMutate === void 0) {
            canMutate = true;
          }
          return makeTargetAnimatable(element, target, props, canMutate);
        },
        measureViewportBox: function() {
          return measureViewportBox2(instance, props);
        },
        addValue: function(key2, value2) {
          if (element.hasValue(key2))
            element.removeValue(key2);
          values.set(key2, value2);
          latestValues[key2] = value2.get();
          bindToMotionValue(key2, value2);
        },
        removeValue: function(key2) {
          var _a3;
          values.delete(key2);
          (_a3 = valueSubscriptions.get(key2)) === null || _a3 === void 0 ? void 0 : _a3();
          valueSubscriptions.delete(key2);
          delete latestValues[key2];
          removeValueFromRenderState(key2, renderState);
        },
        hasValue: function(key2) {
          return values.has(key2);
        },
        getValue: function(key2, defaultValue) {
          var value2 = values.get(key2);
          if (value2 === void 0 && defaultValue !== void 0) {
            value2 = motionValue(defaultValue);
            element.addValue(key2, value2);
          }
          return value2;
        },
        forEachValue: function(callback) {
          return values.forEach(callback);
        },
        readValue: function(key2) {
          var _a3;
          return (_a3 = latestValues[key2]) !== null && _a3 !== void 0 ? _a3 : readValueFromInstance(instance, key2, options);
        },
        setBaseTarget: function(key2, value2) {
          baseTarget[key2] = value2;
        },
        getBaseTarget: function(key2) {
          if (getBaseTarget) {
            var target = getBaseTarget(props, key2);
            if (target !== void 0 && !isMotionValue(target))
              return target;
          }
          return baseTarget[key2];
        }
      }, lifecycles), {
        build: function() {
          triggerBuild();
          return renderState;
        },
        scheduleRender: function() {
          es_default2.render(render3, false, true);
        },
        syncRender: render3,
        setProps: function(newProps) {
          if (newProps.transformTemplate || props.transformTemplate) {
            element.scheduleRender();
          }
          props = newProps;
          lifecycles.updatePropListeners(newProps);
          prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps3(props), prevMotionValues);
        },
        getProps: function() {
          return props;
        },
        getVariant: function(name) {
          var _a3;
          return (_a3 = props.variants) === null || _a3 === void 0 ? void 0 : _a3[name];
        },
        getDefaultTransition: function() {
          return props.transition;
        },
        getTransformPagePoint: function() {
          return props.transformPagePoint;
        },
        getVariantContext: function(startAtParent) {
          if (startAtParent === void 0) {
            startAtParent = false;
          }
          if (startAtParent)
            return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();
          if (!isControllingVariants) {
            var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};
            if (props.initial !== void 0) {
              context_1.initial = props.initial;
            }
            return context_1;
          }
          var context = {};
          for (var i = 0; i < numVariantProps; i++) {
            var name_1 = variantProps[i];
            var prop2 = props[name_1];
            if (isVariantLabel(prop2) || prop2 === false) {
              context[name_1] = prop2;
            }
          }
          return context;
        }
      });
      return element;
    };
  };
  var variantProps = __spreadArray(["initial"], __read(variantPriorityOrder), false);
  var numVariantProps = variantProps.length;

  // node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs
  function isCSSVariable2(value) {
    return typeof value === "string" && value.startsWith("var(--");
  }
  var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
  function parseCSSVariable(current) {
    var match2 = cssVariableRegex.exec(current);
    if (!match2)
      return [,];
    var _a = __read(match2, 3), token2 = _a[1], fallback = _a[2];
    return [token2, fallback];
  }
  var maxDepth = 4;
  function getVariableValue(current, element, depth) {
    if (depth === void 0) {
      depth = 1;
    }
    invariant(depth <= maxDepth, 'Max CSS variable fallback depth detected in property "'.concat(current, '". This may indicate a circular fallback dependency.'));
    var _a = __read(parseCSSVariable(current), 2), token2 = _a[0], fallback = _a[1];
    if (!token2)
      return;
    var resolved = window.getComputedStyle(element).getPropertyValue(token2);
    if (resolved) {
      return resolved.trim();
    } else if (isCSSVariable2(fallback)) {
      return getVariableValue(fallback, element, depth + 1);
    } else {
      return fallback;
    }
  }
  function resolveCSSVariables(visualElement2, _a, transitionEnd) {
    var _b;
    var target = __rest(_a, []);
    var element = visualElement2.getInstance();
    if (!(element instanceof Element))
      return { target, transitionEnd };
    if (transitionEnd) {
      transitionEnd = __assign({}, transitionEnd);
    }
    visualElement2.forEachValue(function(value) {
      var current2 = value.get();
      if (!isCSSVariable2(current2))
        return;
      var resolved2 = getVariableValue(current2, element);
      if (resolved2)
        value.set(resolved2);
    });
    for (var key in target) {
      var current = target[key];
      if (!isCSSVariable2(current))
        continue;
      var resolved = getVariableValue(current, element);
      if (!resolved)
        continue;
      target[key] = resolved;
      if (transitionEnd)
        (_b = transitionEnd[key]) !== null && _b !== void 0 ? _b : transitionEnd[key] = current;
    }
    return { target, transitionEnd };
  }

  // node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs
  var positionalKeys = /* @__PURE__ */ new Set([
    "width",
    "height",
    "top",
    "left",
    "right",
    "bottom",
    "x",
    "y"
  ]);
  var isPositionalKey = function(key) {
    return positionalKeys.has(key);
  };
  var hasPositionalKey = function(target) {
    return Object.keys(target).some(isPositionalKey);
  };
  var setAndResetVelocity = function(value, to) {
    value.set(to, false);
    value.set(to);
  };
  var isNumOrPxType = function(v) {
    return v === number || v === px3;
  };
  var BoundingBoxDimension;
  (function(BoundingBoxDimension2) {
    BoundingBoxDimension2["width"] = "width";
    BoundingBoxDimension2["height"] = "height";
    BoundingBoxDimension2["left"] = "left";
    BoundingBoxDimension2["right"] = "right";
    BoundingBoxDimension2["top"] = "top";
    BoundingBoxDimension2["bottom"] = "bottom";
  })(BoundingBoxDimension || (BoundingBoxDimension = {}));
  var getPosFromMatrix = function(matrix, pos) {
    return parseFloat(matrix.split(", ")[pos]);
  };
  var getTranslateFromMatrix = function(pos2, pos3) {
    return function(_bbox, _a) {
      var transform10 = _a.transform;
      if (transform10 === "none" || !transform10)
        return 0;
      var matrix3d = transform10.match(/^matrix3d\((.+)\)$/);
      if (matrix3d) {
        return getPosFromMatrix(matrix3d[1], pos3);
      } else {
        var matrix = transform10.match(/^matrix\((.+)\)$/);
        if (matrix) {
          return getPosFromMatrix(matrix[1], pos2);
        } else {
          return 0;
        }
      }
    };
  };
  var transformKeys = /* @__PURE__ */ new Set(["x", "y", "z"]);
  var nonTranslationalTransformKeys = transformProps.filter(function(key) {
    return !transformKeys.has(key);
  });
  function removeNonTranslationalTransform(visualElement2) {
    var removedTransforms = [];
    nonTranslationalTransformKeys.forEach(function(key) {
      var value = visualElement2.getValue(key);
      if (value !== void 0) {
        removedTransforms.push([key, value.get()]);
        value.set(key.startsWith("scale") ? 1 : 0);
      }
    });
    if (removedTransforms.length)
      visualElement2.syncRender();
    return removedTransforms;
  }
  var positionalValues = {
    width: function(_a, _b) {
      var x = _a.x;
      var _c = _b.paddingLeft, paddingLeft = _c === void 0 ? "0" : _c, _d = _b.paddingRight, paddingRight = _d === void 0 ? "0" : _d;
      return x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight);
    },
    height: function(_a, _b) {
      var y = _a.y;
      var _c = _b.paddingTop, paddingTop = _c === void 0 ? "0" : _c, _d = _b.paddingBottom, paddingBottom = _d === void 0 ? "0" : _d;
      return y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom);
    },
    top: function(_bbox, _a) {
      var top = _a.top;
      return parseFloat(top);
    },
    left: function(_bbox, _a) {
      var left = _a.left;
      return parseFloat(left);
    },
    bottom: function(_a, _b) {
      var y = _a.y;
      var top = _b.top;
      return parseFloat(top) + (y.max - y.min);
    },
    right: function(_a, _b) {
      var x = _a.x;
      var left = _b.left;
      return parseFloat(left) + (x.max - x.min);
    },
    x: getTranslateFromMatrix(4, 13),
    y: getTranslateFromMatrix(5, 14)
  };
  var convertChangedValueTypes = function(target, visualElement2, changedKeys) {
    var originBbox = visualElement2.measureViewportBox();
    var element = visualElement2.getInstance();
    var elementComputedStyle = getComputedStyle(element);
    var display = elementComputedStyle.display;
    var origin = {};
    if (display === "none") {
      visualElement2.setStaticValue("display", target.display || "block");
    }
    changedKeys.forEach(function(key) {
      origin[key] = positionalValues[key](originBbox, elementComputedStyle);
    });
    visualElement2.syncRender();
    var targetBbox = visualElement2.measureViewportBox();
    changedKeys.forEach(function(key) {
      var value = visualElement2.getValue(key);
      setAndResetVelocity(value, origin[key]);
      target[key] = positionalValues[key](targetBbox, elementComputedStyle);
    });
    return target;
  };
  var checkAndConvertChangedValueTypes = function(visualElement2, target, origin, transitionEnd) {
    if (origin === void 0) {
      origin = {};
    }
    if (transitionEnd === void 0) {
      transitionEnd = {};
    }
    target = __assign({}, target);
    transitionEnd = __assign({}, transitionEnd);
    var targetPositionalKeys = Object.keys(target).filter(isPositionalKey);
    var removedTransformValues = [];
    var hasAttemptedToRemoveTransformValues = false;
    var changedValueTypeKeys = [];
    targetPositionalKeys.forEach(function(key) {
      var value = visualElement2.getValue(key);
      if (!visualElement2.hasValue(key))
        return;
      var from2 = origin[key];
      var fromType = findDimensionValueType(from2);
      var to = target[key];
      var toType;
      if (isKeyframesTarget(to)) {
        var numKeyframes = to.length;
        var fromIndex = to[0] === null ? 1 : 0;
        from2 = to[fromIndex];
        fromType = findDimensionValueType(from2);
        for (var i = fromIndex; i < numKeyframes; i++) {
          if (!toType) {
            toType = findDimensionValueType(to[i]);
            invariant(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), "Keyframes must be of the same dimension as the current value");
          } else {
            invariant(findDimensionValueType(to[i]) === toType, "All keyframes must be of the same type");
          }
        }
      } else {
        toType = findDimensionValueType(to);
      }
      if (fromType !== toType) {
        if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {
          var current = value.get();
          if (typeof current === "string") {
            value.set(parseFloat(current));
          }
          if (typeof to === "string") {
            target[key] = parseFloat(to);
          } else if (Array.isArray(to) && toType === px3) {
            target[key] = to.map(parseFloat);
          }
        } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from2 === 0 || to === 0)) {
          if (from2 === 0) {
            value.set(toType.transform(from2));
          } else {
            target[key] = fromType.transform(to);
          }
        } else {
          if (!hasAttemptedToRemoveTransformValues) {
            removedTransformValues = removeNonTranslationalTransform(visualElement2);
            hasAttemptedToRemoveTransformValues = true;
          }
          changedValueTypeKeys.push(key);
          transitionEnd[key] = transitionEnd[key] !== void 0 ? transitionEnd[key] : target[key];
          setAndResetVelocity(value, to);
        }
      }
    });
    if (changedValueTypeKeys.length) {
      var convertedTarget = convertChangedValueTypes(target, visualElement2, changedValueTypeKeys);
      if (removedTransformValues.length) {
        removedTransformValues.forEach(function(_a) {
          var _b = __read(_a, 2), key = _b[0], value = _b[1];
          visualElement2.getValue(key).set(value);
        });
      }
      visualElement2.syncRender();
      return { target: convertedTarget, transitionEnd };
    } else {
      return { target, transitionEnd };
    }
  };
  function unitConversion(visualElement2, target, origin, transitionEnd) {
    return hasPositionalKey(target) ? checkAndConvertChangedValueTypes(visualElement2, target, origin, transitionEnd) : { target, transitionEnd };
  }

  // node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs
  var parseDomVariant = function(visualElement2, target, origin, transitionEnd) {
    var resolved = resolveCSSVariables(visualElement2, target, transitionEnd);
    target = resolved.target;
    transitionEnd = resolved.transitionEnd;
    return unitConversion(visualElement2, target, origin, transitionEnd);
  };

  // node_modules/framer-motion/dist/es/render/html/visual-element.mjs
  function getComputedStyle3(element) {
    return window.getComputedStyle(element);
  }
  var htmlConfig = {
    treeType: "dom",
    readValueFromInstance: function(domElement, key) {
      if (isTransformProp(key)) {
        var defaultType = getDefaultValueType(key);
        return defaultType ? defaultType.default || 0 : 0;
      } else {
        var computedStyle = getComputedStyle3(domElement);
        return (isCSSVariable(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;
      }
    },
    sortNodePosition: function(a2, b2) {
      return a2.compareDocumentPosition(b2) & 2 ? 1 : -1;
    },
    getBaseTarget: function(props, key) {
      var _a;
      return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];
    },
    measureViewportBox: function(element, _a) {
      var transformPagePoint = _a.transformPagePoint;
      return measureViewportBox(element, transformPagePoint);
    },
    resetTransform: function(element, domElement, props) {
      var transformTemplate2 = props.transformTemplate;
      domElement.style.transform = transformTemplate2 ? transformTemplate2({}, "") : "none";
      element.scheduleRender();
    },
    restoreTransform: function(instance, mutableState) {
      instance.style.transform = mutableState.style.transform;
    },
    removeValueFromRenderState: function(key, _a) {
      var vars = _a.vars, style = _a.style;
      delete vars[key];
      delete style[key];
    },
    makeTargetAnimatable: function(element, _a, _b, isMounted) {
      var transformValues = _b.transformValues;
      if (isMounted === void 0) {
        isMounted = true;
      }
      var transition3 = _a.transition, transitionEnd = _a.transitionEnd, target = __rest(_a, ["transition", "transitionEnd"]);
      var origin = getOrigin(target, transition3 || {}, element);
      if (transformValues) {
        if (transitionEnd)
          transitionEnd = transformValues(transitionEnd);
        if (target)
          target = transformValues(target);
        if (origin)
          origin = transformValues(origin);
      }
      if (isMounted) {
        checkTargetForNewValues(element, target, origin);
        var parsed = parseDomVariant(element, target, origin, transitionEnd);
        transitionEnd = parsed.transitionEnd;
        target = parsed.target;
      }
      return __assign({ transition: transition3, transitionEnd }, target);
    },
    scrapeMotionValuesFromProps,
    build: function(element, renderState, latestValues, options, props) {
      if (element.isVisible !== void 0) {
        renderState.style.visibility = element.isVisible ? "visible" : "hidden";
      }
      buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);
    },
    render: renderHTML
  };
  var htmlVisualElement = visualElement(htmlConfig);

  // node_modules/framer-motion/dist/es/render/svg/visual-element.mjs
  var svgVisualElement = visualElement(__assign(__assign({}, htmlConfig), { getBaseTarget: function(props, key) {
    return props[key];
  }, readValueFromInstance: function(domElement, key) {
    var _a;
    if (isTransformProp(key)) {
      return ((_a = getDefaultValueType(key)) === null || _a === void 0 ? void 0 : _a.default) || 0;
    }
    key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
    return domElement.getAttribute(key);
  }, scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2, build: function(_element, renderState, latestValues, options, props) {
    buildSVGAttrs(renderState, latestValues, options, props.transformTemplate);
  }, render: renderSVG }));

  // node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs
  var createDomVisualElement = function(Component2, options) {
    return isSVGComponent(Component2) ? svgVisualElement(options, { enableHardwareAcceleration: false }) : htmlVisualElement(options, { enableHardwareAcceleration: true });
  };

  // node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
  var import_react41 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs
  function pixelsToPercent(pixels, axis) {
    if (axis.max === axis.min)
      return 0;
    return pixels / (axis.max - axis.min) * 100;
  }
  var correctBorderRadius = {
    correct: function(latest, node3) {
      if (!node3.target)
        return latest;
      if (typeof latest === "string") {
        if (px3.test(latest)) {
          latest = parseFloat(latest);
        } else {
          return latest;
        }
      }
      var x = pixelsToPercent(latest, node3.target.x);
      var y = pixelsToPercent(latest, node3.target.y);
      return "".concat(x, "% ").concat(y, "%");
    }
  };

  // node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs
  var varToken = "_$css";
  var correctBoxShadow = {
    correct: function(latest, _a) {
      var treeScale = _a.treeScale, projectionDelta = _a.projectionDelta;
      var original = latest;
      var containsCSSVariables = latest.includes("var(");
      var cssVariables = [];
      if (containsCSSVariables) {
        latest = latest.replace(cssVariableRegex, function(match2) {
          cssVariables.push(match2);
          return varToken;
        });
      }
      var shadow = complex.parse(latest);
      if (shadow.length > 5)
        return original;
      var template = complex.createTransformer(latest);
      var offset = typeof shadow[0] !== "number" ? 1 : 0;
      var xScale = projectionDelta.x.scale * treeScale.x;
      var yScale = projectionDelta.y.scale * treeScale.y;
      shadow[0 + offset] /= xScale;
      shadow[1 + offset] /= yScale;
      var averageScale = mix(xScale, yScale, 0.5);
      if (typeof shadow[2 + offset] === "number")
        shadow[2 + offset] /= averageScale;
      if (typeof shadow[3 + offset] === "number")
        shadow[3 + offset] /= averageScale;
      var output = template(shadow);
      if (containsCSSVariables) {
        var i_1 = 0;
        output = output.replace(varToken, function() {
          var cssVariable = cssVariables[i_1];
          i_1++;
          return cssVariable;
        });
      }
      return output;
    }
  };

  // node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
  var MeasureLayoutWithContext = function(_super) {
    __extends(MeasureLayoutWithContext2, _super);
    function MeasureLayoutWithContext2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MeasureLayoutWithContext2.prototype.componentDidMount = function() {
      var _this = this;
      var _a = this.props, visualElement2 = _a.visualElement, layoutGroup = _a.layoutGroup, switchLayoutGroup = _a.switchLayoutGroup, layoutId = _a.layoutId;
      var projection = visualElement2.projection;
      addScaleCorrector(defaultScaleCorrectors);
      if (projection) {
        if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group)
          layoutGroup.group.add(projection);
        if ((switchLayoutGroup === null || switchLayoutGroup === void 0 ? void 0 : switchLayoutGroup.register) && layoutId) {
          switchLayoutGroup.register(projection);
        }
        projection.root.didUpdate();
        projection.addEventListener("animationComplete", function() {
          _this.safeToRemove();
        });
        projection.setOptions(__assign(__assign({}, projection.options), { onExitComplete: function() {
          return _this.safeToRemove();
        } }));
      }
      globalProjectionState.hasEverUpdated = true;
    };
    MeasureLayoutWithContext2.prototype.getSnapshotBeforeUpdate = function(prevProps) {
      var _this = this;
      var _a = this.props, layoutDependency = _a.layoutDependency, visualElement2 = _a.visualElement, drag2 = _a.drag, isPresent2 = _a.isPresent;
      var projection = visualElement2.projection;
      if (!projection)
        return null;
      projection.isPresent = isPresent2;
      if (drag2 || prevProps.layoutDependency !== layoutDependency || layoutDependency === void 0) {
        projection.willUpdate();
      } else {
        this.safeToRemove();
      }
      if (prevProps.isPresent !== isPresent2) {
        if (isPresent2) {
          projection.promote();
        } else if (!projection.relegate()) {
          es_default2.postRender(function() {
            var _a2;
            if (!((_a2 = projection.getStack()) === null || _a2 === void 0 ? void 0 : _a2.members.length)) {
              _this.safeToRemove();
            }
          });
        }
      }
      return null;
    };
    MeasureLayoutWithContext2.prototype.componentDidUpdate = function() {
      var projection = this.props.visualElement.projection;
      if (projection) {
        projection.root.didUpdate();
        if (!projection.currentAnimation && projection.isLead()) {
          this.safeToRemove();
        }
      }
    };
    MeasureLayoutWithContext2.prototype.componentWillUnmount = function() {
      var _a = this.props, visualElement2 = _a.visualElement, layoutGroup = _a.layoutGroup, promoteContext = _a.switchLayoutGroup;
      var projection = visualElement2.projection;
      if (projection) {
        projection.scheduleCheckAfterUnmount();
        if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group)
          layoutGroup.group.remove(projection);
        if (promoteContext === null || promoteContext === void 0 ? void 0 : promoteContext.deregister)
          promoteContext.deregister(projection);
      }
    };
    MeasureLayoutWithContext2.prototype.safeToRemove = function() {
      var safeToRemove = this.props.safeToRemove;
      safeToRemove === null || safeToRemove === void 0 ? void 0 : safeToRemove();
    };
    MeasureLayoutWithContext2.prototype.render = function() {
      return null;
    };
    return MeasureLayoutWithContext2;
  }(import_react41.default.Component);
  function MeasureLayout(props) {
    var _a = __read(usePresence(), 2), isPresent2 = _a[0], safeToRemove = _a[1];
    var layoutGroup = (0, import_react41.useContext)(LayoutGroupContext);
    return import_react41.default.createElement(MeasureLayoutWithContext, __assign({}, props, { layoutGroup, switchLayoutGroup: (0, import_react41.useContext)(SwitchLayoutGroupContext), isPresent: isPresent2, safeToRemove }));
  }
  var defaultScaleCorrectors = {
    borderRadius: __assign(__assign({}, correctBorderRadius), { applyTo: [
      "borderTopLeftRadius",
      "borderTopRightRadius",
      "borderBottomLeftRadius",
      "borderBottomRightRadius"
    ] }),
    borderTopLeftRadius: correctBorderRadius,
    borderTopRightRadius: correctBorderRadius,
    borderBottomLeftRadius: correctBorderRadius,
    borderBottomRightRadius: correctBorderRadius,
    boxShadow: correctBoxShadow
  };

  // node_modules/framer-motion/dist/es/motion/features/layout/index.mjs
  var layoutFeatures = {
    measureLayout: MeasureLayout
  };

  // node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs
  var DocumentProjectionNode = createProjectionNode({
    attachResizeListener: function(ref, notify) {
      ref.addEventListener("resize", notify, { passive: true });
      return function() {
        return ref.removeEventListener("resize", notify);
      };
    },
    measureScroll: function() {
      return {
        x: document.documentElement.scrollLeft || document.body.scrollLeft,
        y: document.documentElement.scrollTop || document.body.scrollTop
      };
    }
  });

  // node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs
  var rootProjectionNode = {
    current: void 0
  };
  var HTMLProjectionNode = createProjectionNode({
    measureScroll: function(instance) {
      return {
        x: instance.scrollLeft,
        y: instance.scrollTop
      };
    },
    defaultParent: function() {
      if (!rootProjectionNode.current) {
        var documentNode = new DocumentProjectionNode(0, {});
        documentNode.mount(window);
        documentNode.setOptions({ layoutScroll: true });
        rootProjectionNode.current = documentNode;
      }
      return rootProjectionNode.current;
    },
    resetTransform: function(instance, value) {
      instance.style.transform = value !== null && value !== void 0 ? value : "none";
    }
  });

  // node_modules/framer-motion/dist/es/render/dom/motion.mjs
  var featureBundle = __assign(__assign(__assign(__assign({}, animations), gestureAnimations), drag), layoutFeatures);
  var motion = /* @__PURE__ */ createMotionProxy(function(Component2, config2) {
    return createDomMotionConfig(Component2, config2, featureBundle, createDomVisualElement, HTMLProjectionNode);
  });

  // node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs
  var React17 = __toESM(require_react(), 1);
  var import_react45 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/utils/use-force-update.mjs
  var import_react43 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs
  var import_react42 = __toESM(require_react(), 1);
  function useIsMounted() {
    var isMounted = (0, import_react42.useRef)(false);
    useIsomorphicLayoutEffect(function() {
      isMounted.current = true;
      return function() {
        isMounted.current = false;
      };
    }, []);
    return isMounted;
  }

  // node_modules/framer-motion/dist/es/utils/use-force-update.mjs
  function useForceUpdate2() {
    var isMounted = useIsMounted();
    var _a = __read((0, import_react43.useState)(0), 2), forcedRenderCount = _a[0], setForcedRenderCount = _a[1];
    var forceRender = (0, import_react43.useCallback)(function() {
      isMounted.current && setForcedRenderCount(forcedRenderCount + 1);
    }, [forcedRenderCount]);
    var deferredForceRender = (0, import_react43.useCallback)(function() {
      return es_default2.postRender(forceRender);
    }, [forceRender]);
    return [deferredForceRender, forcedRenderCount];
  }

  // node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs
  var React16 = __toESM(require_react(), 1);
  var import_react44 = __toESM(require_react(), 1);
  var PresenceChild = function(_a) {
    var children = _a.children, initial3 = _a.initial, isPresent2 = _a.isPresent, onExitComplete = _a.onExitComplete, custom = _a.custom, presenceAffectsLayout = _a.presenceAffectsLayout;
    var presenceChildren = useConstant(newChildrenMap);
    var id2 = useId2();
    var context = (0, import_react44.useMemo)(function() {
      return {
        id: id2,
        initial: initial3,
        isPresent: isPresent2,
        custom,
        onExitComplete: function(childId) {
          var e_1, _a2;
          presenceChildren.set(childId, true);
          try {
            for (var _b = __values(presenceChildren.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
              var isComplete = _c.value;
              if (!isComplete)
                return;
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a2 = _b.return))
                _a2.call(_b);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete();
        },
        register: function(childId) {
          presenceChildren.set(childId, false);
          return function() {
            return presenceChildren.delete(childId);
          };
        }
      };
    }, presenceAffectsLayout ? void 0 : [isPresent2]);
    (0, import_react44.useMemo)(function() {
      presenceChildren.forEach(function(_, key) {
        return presenceChildren.set(key, false);
      });
    }, [isPresent2]);
    React16.useEffect(function() {
      !isPresent2 && !presenceChildren.size && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());
    }, [isPresent2]);
    return React16.createElement(PresenceContext.Provider, { value: context }, children);
  };
  function newChildrenMap() {
    return /* @__PURE__ */ new Map();
  }

  // node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs
  var getChildKey = function(child) {
    return child.key || "";
  };
  var isDev = true;
  function updateChildLookup(children, allChildren) {
    var seenChildren = isDev ? /* @__PURE__ */ new Set() : null;
    children.forEach(function(child) {
      var key = getChildKey(child);
      if (isDev && seenChildren && seenChildren.has(key)) {
        console.warn('Children of AnimatePresence require unique keys. "'.concat(key, '" is a duplicate.'));
        seenChildren.add(key);
      }
      allChildren.set(key, child);
    });
  }
  function onlyElements(children) {
    var filtered = [];
    import_react45.Children.forEach(children, function(child) {
      if ((0, import_react45.isValidElement)(child))
        filtered.push(child);
    });
    return filtered;
  }
  var AnimatePresence = function(_a) {
    var children = _a.children, custom = _a.custom, _b = _a.initial, initial3 = _b === void 0 ? true : _b, onExitComplete = _a.onExitComplete, exitBeforeEnter = _a.exitBeforeEnter, _c = _a.presenceAffectsLayout, presenceAffectsLayout = _c === void 0 ? true : _c;
    var _d = __read(useForceUpdate2(), 1), forceRender = _d[0];
    var forceRenderLayoutGroup = (0, import_react45.useContext)(LayoutGroupContext).forceRender;
    if (forceRenderLayoutGroup)
      forceRender = forceRenderLayoutGroup;
    var isMounted = useIsMounted();
    var filteredChildren = onlyElements(children);
    var childrenToRender = filteredChildren;
    var exiting = /* @__PURE__ */ new Set();
    var presentChildren = (0, import_react45.useRef)(childrenToRender);
    var allChildren = (0, import_react45.useRef)(/* @__PURE__ */ new Map()).current;
    var isInitialRender = (0, import_react45.useRef)(true);
    useIsomorphicLayoutEffect(function() {
      isInitialRender.current = false;
      updateChildLookup(filteredChildren, allChildren);
      presentChildren.current = childrenToRender;
    });
    useUnmountEffect2(function() {
      isInitialRender.current = true;
      allChildren.clear();
      exiting.clear();
    });
    if (isInitialRender.current) {
      return React17.createElement(React17.Fragment, null, childrenToRender.map(function(child) {
        return React17.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial3 ? void 0 : false, presenceAffectsLayout }, child);
      }));
    }
    childrenToRender = __spreadArray([], __read(childrenToRender), false);
    var presentKeys = presentChildren.current.map(getChildKey);
    var targetKeys = filteredChildren.map(getChildKey);
    var numPresent = presentKeys.length;
    for (var i = 0; i < numPresent; i++) {
      var key = presentKeys[i];
      if (targetKeys.indexOf(key) === -1) {
        exiting.add(key);
      }
    }
    if (exitBeforeEnter && exiting.size) {
      childrenToRender = [];
    }
    exiting.forEach(function(key2) {
      if (targetKeys.indexOf(key2) !== -1)
        return;
      var child = allChildren.get(key2);
      if (!child)
        return;
      var insertionIndex = presentKeys.indexOf(key2);
      var onExit = function() {
        allChildren.delete(key2);
        exiting.delete(key2);
        var removeIndex = presentChildren.current.findIndex(function(presentChild) {
          return presentChild.key === key2;
        });
        presentChildren.current.splice(removeIndex, 1);
        if (!exiting.size) {
          presentChildren.current = filteredChildren;
          if (isMounted.current === false)
            return;
          forceRender();
          onExitComplete && onExitComplete();
        }
      };
      childrenToRender.splice(insertionIndex, 0, React17.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom, presenceAffectsLayout }, child));
    });
    childrenToRender = childrenToRender.map(function(child) {
      var key2 = child.key;
      return exiting.has(key2) ? child : React17.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout }, child);
    });
    if (exitBeforeEnter && childrenToRender.length > 1) {
      console.warn("You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.");
    }
    return React17.createElement(React17.Fragment, null, exiting.size ? childrenToRender : childrenToRender.map(function(child) {
      return (0, import_react45.cloneElement)(child);
    }));
  };

  // node_modules/@chakra-ui/transition/dist/chakra-ui-transition.esm.js
  var React18 = __toESM(require_react());
  function _objectWithoutPropertiesLoose5(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function _extends10() {
    _extends10 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends10.apply(this, arguments);
  }
  var TransitionEasings = {
    ease: [0.25, 0.1, 0.25, 1],
    easeIn: [0.4, 0, 1, 1],
    easeOut: [0, 0, 0.2, 1],
    easeInOut: [0.4, 0, 0.2, 1]
  };
  var TransitionVariants = {
    scale: {
      enter: {
        scale: 1
      },
      exit: {
        scale: 0.95
      }
    },
    fade: {
      enter: {
        opacity: 1
      },
      exit: {
        opacity: 0
      }
    },
    pushLeft: {
      enter: {
        x: "100%"
      },
      exit: {
        x: "-30%"
      }
    },
    pushRight: {
      enter: {
        x: "-100%"
      },
      exit: {
        x: "30%"
      }
    },
    pushUp: {
      enter: {
        y: "100%"
      },
      exit: {
        y: "-30%"
      }
    },
    pushDown: {
      enter: {
        y: "-100%"
      },
      exit: {
        y: "30%"
      }
    },
    slideLeft: {
      position: {
        left: 0,
        top: 0,
        bottom: 0,
        width: "100%"
      },
      enter: {
        x: 0,
        y: 0
      },
      exit: {
        x: "-100%",
        y: 0
      }
    },
    slideRight: {
      position: {
        right: 0,
        top: 0,
        bottom: 0,
        width: "100%"
      },
      enter: {
        x: 0,
        y: 0
      },
      exit: {
        x: "100%",
        y: 0
      }
    },
    slideUp: {
      position: {
        top: 0,
        left: 0,
        right: 0,
        maxWidth: "100vw"
      },
      enter: {
        x: 0,
        y: 0
      },
      exit: {
        x: 0,
        y: "-100%"
      }
    },
    slideDown: {
      position: {
        bottom: 0,
        left: 0,
        right: 0,
        maxWidth: "100vw"
      },
      enter: {
        x: 0,
        y: 0
      },
      exit: {
        x: 0,
        y: "100%"
      }
    }
  };
  function slideTransition(options) {
    var _options$direction;
    var side = (_options$direction = options == null ? void 0 : options.direction) != null ? _options$direction : "right";
    switch (side) {
      case "right":
        return TransitionVariants.slideRight;
      case "left":
        return TransitionVariants.slideLeft;
      case "bottom":
        return TransitionVariants.slideDown;
      case "top":
        return TransitionVariants.slideUp;
      default:
        return TransitionVariants.slideRight;
    }
  }
  var TransitionDefaults = {
    enter: {
      duration: 0.2,
      ease: TransitionEasings.easeOut
    },
    exit: {
      duration: 0.1,
      ease: TransitionEasings.easeIn
    }
  };
  var withDelay = {
    enter: function enter(transition3, delay) {
      return _extends10({}, transition3, {
        delay: isNumber(delay) ? delay : delay == null ? void 0 : delay["enter"]
      });
    },
    exit: function exit(transition3, delay) {
      return _extends10({}, transition3, {
        delay: isNumber(delay) ? delay : delay == null ? void 0 : delay["exit"]
      });
    }
  };
  var _excluded$4 = ["in", "unmountOnExit", "animateOpacity", "startingHeight", "endingHeight", "style", "className", "transition", "transitionEnd"];
  var isNumeric = function isNumeric2(value) {
    return value != null && parseInt(value.toString(), 10) > 0;
  };
  var defaultTransitions2 = {
    exit: {
      height: {
        duration: 0.2,
        ease: TransitionEasings.ease
      },
      opacity: {
        duration: 0.3,
        ease: TransitionEasings.ease
      }
    },
    enter: {
      height: {
        duration: 0.3,
        ease: TransitionEasings.ease
      },
      opacity: {
        duration: 0.4,
        ease: TransitionEasings.ease
      }
    }
  };
  var variants$42 = {
    exit: function exit2(_ref2) {
      var _transition$exit;
      var animateOpacity = _ref2.animateOpacity, startingHeight = _ref2.startingHeight, transition3 = _ref2.transition, transitionEnd = _ref2.transitionEnd, delay = _ref2.delay;
      return _extends10({}, animateOpacity && {
        opacity: isNumeric(startingHeight) ? 1 : 0
      }, {
        overflow: "hidden",
        height: startingHeight,
        transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit,
        transition: (_transition$exit = transition3 == null ? void 0 : transition3.exit) != null ? _transition$exit : withDelay.exit(defaultTransitions2.exit, delay)
      });
    },
    enter: function enter2(_ref2) {
      var _transition$enter;
      var animateOpacity = _ref2.animateOpacity, endingHeight = _ref2.endingHeight, transition3 = _ref2.transition, transitionEnd = _ref2.transitionEnd, delay = _ref2.delay;
      return _extends10({}, animateOpacity && {
        opacity: 1
      }, {
        height: endingHeight,
        transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter,
        transition: (_transition$enter = transition3 == null ? void 0 : transition3.enter) != null ? _transition$enter : withDelay.enter(defaultTransitions2.enter, delay)
      });
    }
  };
  var Collapse = /* @__PURE__ */ React18.forwardRef(function(props, ref) {
    var isOpen = props["in"], unmountOnExit = props.unmountOnExit, _props$animateOpacity = props.animateOpacity, animateOpacity = _props$animateOpacity === void 0 ? true : _props$animateOpacity, _props$startingHeight = props.startingHeight, startingHeight = _props$startingHeight === void 0 ? 0 : _props$startingHeight, _props$endingHeight = props.endingHeight, endingHeight = _props$endingHeight === void 0 ? "auto" : _props$endingHeight, style = props.style, className = props.className, transition3 = props.transition, transitionEnd = props.transitionEnd, rest = _objectWithoutPropertiesLoose5(props, _excluded$4);
    var _React$useState = React18.useState(false), mounted = _React$useState[0], setMounted = _React$useState[1];
    React18.useEffect(function() {
      var timeout = setTimeout(function() {
        setMounted(true);
      });
      return function() {
        return clearTimeout(timeout);
      };
    }, []);
    warn({
      condition: Boolean(startingHeight > 0 && unmountOnExit),
      message: "startingHeight and unmountOnExit are mutually exclusive. You can't use them together"
    });
    var hasStartingHeight = parseFloat(startingHeight.toString()) > 0;
    var custom = {
      startingHeight,
      endingHeight,
      animateOpacity,
      transition: !mounted ? {
        enter: {
          duration: 0
        }
      } : transition3,
      transitionEnd: (0, import_lodash.default)(transitionEnd, {
        enter: {
          overflow: "initial"
        },
        exit: unmountOnExit ? void 0 : {
          display: hasStartingHeight ? "block" : "none"
        }
      })
    };
    var show = unmountOnExit ? isOpen : true;
    var animate3 = isOpen || unmountOnExit ? "enter" : "exit";
    return /* @__PURE__ */ React18.createElement(AnimatePresence, {
      initial: false,
      custom
    }, show && /* @__PURE__ */ React18.createElement(motion.div, _extends10({
      ref
    }, rest, {
      className: cx("chakra-collapse", className),
      style: _extends10({
        overflow: "hidden",
        display: "block"
      }, style),
      custom,
      variants: variants$42,
      initial: unmountOnExit ? "exit" : false,
      animate: animate3,
      exit: "exit"
    })));
  });
  if (__DEV__) {
    Collapse.displayName = "Collapse";
  }
  var _excluded$3 = ["unmountOnExit", "in", "className", "transition", "transitionEnd", "delay"];
  var variants$32 = {
    enter: function enter3(_temp) {
      var _transition$enter;
      var _ref2 = _temp === void 0 ? {} : _temp, transition3 = _ref2.transition, transitionEnd = _ref2.transitionEnd, delay = _ref2.delay;
      return {
        opacity: 1,
        transition: (_transition$enter = transition3 == null ? void 0 : transition3.enter) != null ? _transition$enter : withDelay.enter(TransitionDefaults.enter, delay),
        transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
      };
    },
    exit: function exit3(_temp2) {
      var _transition$exit;
      var _ref2 = _temp2 === void 0 ? {} : _temp2, transition3 = _ref2.transition, transitionEnd = _ref2.transitionEnd, delay = _ref2.delay;
      return {
        opacity: 0,
        transition: (_transition$exit = transition3 == null ? void 0 : transition3.exit) != null ? _transition$exit : withDelay.exit(TransitionDefaults.exit, delay),
        transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
      };
    }
  };
  var fadeConfig = {
    initial: "exit",
    animate: "enter",
    exit: "exit",
    variants: variants$32
  };
  var Fade = /* @__PURE__ */ React18.forwardRef(function(props, ref) {
    var unmountOnExit = props.unmountOnExit, isOpen = props["in"], className = props.className, transition3 = props.transition, transitionEnd = props.transitionEnd, delay = props.delay, rest = _objectWithoutPropertiesLoose5(props, _excluded$3);
    var animate3 = isOpen || unmountOnExit ? "enter" : "exit";
    var show = unmountOnExit ? isOpen && unmountOnExit : true;
    var custom = {
      transition: transition3,
      transitionEnd,
      delay
    };
    return /* @__PURE__ */ React18.createElement(AnimatePresence, {
      custom
    }, show && /* @__PURE__ */ React18.createElement(motion.div, _extends10({
      ref,
      className: cx("chakra-fade", className),
      custom
    }, fadeConfig, {
      animate: animate3
    }, rest)));
  });
  if (__DEV__) {
    Fade.displayName = "Fade";
  }
  var _excluded$2 = ["unmountOnExit", "in", "reverse", "initialScale", "className", "transition", "transitionEnd", "delay"];
  var variants$22 = {
    exit: function exit4(_ref2) {
      var _transition$exit;
      var reverse = _ref2.reverse, initialScale = _ref2.initialScale, transition3 = _ref2.transition, transitionEnd = _ref2.transitionEnd, delay = _ref2.delay;
      return _extends10({
        opacity: 0
      }, reverse ? {
        scale: initialScale,
        transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
      } : {
        transitionEnd: _extends10({
          scale: initialScale
        }, transitionEnd == null ? void 0 : transitionEnd.exit)
      }, {
        transition: (_transition$exit = transition3 == null ? void 0 : transition3.exit) != null ? _transition$exit : withDelay.exit(TransitionDefaults.exit, delay)
      });
    },
    enter: function enter4(_ref2) {
      var _transition$enter;
      var transitionEnd = _ref2.transitionEnd, transition3 = _ref2.transition, delay = _ref2.delay;
      return {
        opacity: 1,
        scale: 1,
        transition: (_transition$enter = transition3 == null ? void 0 : transition3.enter) != null ? _transition$enter : withDelay.enter(TransitionDefaults.enter, delay),
        transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
      };
    }
  };
  var scaleFadeConfig = {
    initial: "exit",
    animate: "enter",
    exit: "exit",
    variants: variants$22
  };
  var ScaleFade = /* @__PURE__ */ React18.forwardRef(function(props, ref) {
    var unmountOnExit = props.unmountOnExit, isOpen = props["in"], _props$reverse = props.reverse, reverse = _props$reverse === void 0 ? true : _props$reverse, _props$initialScale = props.initialScale, initialScale = _props$initialScale === void 0 ? 0.95 : _props$initialScale, className = props.className, transition3 = props.transition, transitionEnd = props.transitionEnd, delay = props.delay, rest = _objectWithoutPropertiesLoose5(props, _excluded$2);
    var show = unmountOnExit ? isOpen && unmountOnExit : true;
    var animate3 = isOpen || unmountOnExit ? "enter" : "exit";
    var custom = {
      initialScale,
      reverse,
      transition: transition3,
      transitionEnd,
      delay
    };
    return /* @__PURE__ */ React18.createElement(AnimatePresence, {
      custom
    }, show && /* @__PURE__ */ React18.createElement(motion.div, _extends10({
      ref,
      className: cx("chakra-offset-slide", className)
    }, scaleFadeConfig, {
      animate: animate3,
      custom
    }, rest)));
  });
  if (__DEV__) {
    ScaleFade.displayName = "ScaleFade";
  }
  var _excluded$12 = ["direction", "style", "unmountOnExit", "in", "className", "transition", "transitionEnd", "delay"];
  var defaultTransition = {
    exit: {
      duration: 0.15,
      ease: TransitionEasings.easeInOut
    },
    enter: {
      type: "spring",
      damping: 25,
      stiffness: 180
    }
  };
  var variants$12 = {
    exit: function exit5(_ref2) {
      var _transition$exit;
      var direction2 = _ref2.direction, transition3 = _ref2.transition, transitionEnd = _ref2.transitionEnd, delay = _ref2.delay;
      var _slideTransition = slideTransition({
        direction: direction2
      }), exitStyles = _slideTransition.exit;
      return _extends10({}, exitStyles, {
        transition: (_transition$exit = transition3 == null ? void 0 : transition3.exit) != null ? _transition$exit : withDelay.exit(defaultTransition.exit, delay),
        transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
      });
    },
    enter: function enter5(_ref2) {
      var _transition$enter;
      var direction2 = _ref2.direction, transitionEnd = _ref2.transitionEnd, transition3 = _ref2.transition, delay = _ref2.delay;
      var _slideTransition2 = slideTransition({
        direction: direction2
      }), enterStyles = _slideTransition2.enter;
      return _extends10({}, enterStyles, {
        transition: (_transition$enter = transition3 == null ? void 0 : transition3.enter) != null ? _transition$enter : withDelay.enter(defaultTransition.enter, delay),
        transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
      });
    }
  };
  var Slide = /* @__PURE__ */ React18.forwardRef(function(props, ref) {
    var _props$direction = props.direction, direction2 = _props$direction === void 0 ? "right" : _props$direction, style = props.style, unmountOnExit = props.unmountOnExit, isOpen = props["in"], className = props.className, transition3 = props.transition, transitionEnd = props.transitionEnd, delay = props.delay, rest = _objectWithoutPropertiesLoose5(props, _excluded$12);
    var transitionStyles = slideTransition({
      direction: direction2
    });
    var computedStyle = Object.assign({
      position: "fixed"
    }, transitionStyles.position, style);
    var show = unmountOnExit ? isOpen && unmountOnExit : true;
    var animate3 = isOpen || unmountOnExit ? "enter" : "exit";
    var custom = {
      transitionEnd,
      transition: transition3,
      direction: direction2,
      delay
    };
    return /* @__PURE__ */ React18.createElement(AnimatePresence, {
      custom
    }, show && /* @__PURE__ */ React18.createElement(motion.div, _extends10({}, rest, {
      ref,
      initial: "exit",
      className: cx("chakra-slide", className),
      animate: animate3,
      exit: "exit",
      custom,
      variants: variants$12,
      style: computedStyle
    })));
  });
  if (__DEV__) {
    Slide.displayName = "Slide";
  }
  var _excluded5 = ["unmountOnExit", "in", "reverse", "className", "offsetX", "offsetY", "transition", "transitionEnd", "delay"];
  var variants2 = {
    initial: function initial(_ref2) {
      var _transition$exit;
      var offsetX = _ref2.offsetX, offsetY = _ref2.offsetY, transition3 = _ref2.transition, transitionEnd = _ref2.transitionEnd, delay = _ref2.delay;
      return {
        opacity: 0,
        x: offsetX,
        y: offsetY,
        transition: (_transition$exit = transition3 == null ? void 0 : transition3.exit) != null ? _transition$exit : withDelay.exit(TransitionDefaults.exit, delay),
        transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
      };
    },
    enter: function enter6(_ref2) {
      var _transition$enter;
      var transition3 = _ref2.transition, transitionEnd = _ref2.transitionEnd, delay = _ref2.delay;
      return {
        opacity: 1,
        x: 0,
        y: 0,
        transition: (_transition$enter = transition3 == null ? void 0 : transition3.enter) != null ? _transition$enter : withDelay.enter(TransitionDefaults.enter, delay),
        transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
      };
    },
    exit: function exit6(_ref3) {
      var _transition$exit2;
      var offsetY = _ref3.offsetY, offsetX = _ref3.offsetX, transition3 = _ref3.transition, transitionEnd = _ref3.transitionEnd, reverse = _ref3.reverse, delay = _ref3.delay;
      var offset = {
        x: offsetX,
        y: offsetY
      };
      return _extends10({
        opacity: 0,
        transition: (_transition$exit2 = transition3 == null ? void 0 : transition3.exit) != null ? _transition$exit2 : withDelay.exit(TransitionDefaults.exit, delay)
      }, reverse ? _extends10({}, offset, {
        transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
      }) : {
        transitionEnd: _extends10({}, offset, transitionEnd == null ? void 0 : transitionEnd.exit)
      });
    }
  };
  var slideFadeConfig = {
    initial: "initial",
    animate: "enter",
    exit: "exit",
    variants: variants2
  };
  var SlideFade = /* @__PURE__ */ React18.forwardRef(function(props, ref) {
    var unmountOnExit = props.unmountOnExit, isOpen = props["in"], _props$reverse = props.reverse, reverse = _props$reverse === void 0 ? true : _props$reverse, className = props.className, _props$offsetX = props.offsetX, offsetX = _props$offsetX === void 0 ? 0 : _props$offsetX, _props$offsetY = props.offsetY, offsetY = _props$offsetY === void 0 ? 8 : _props$offsetY, transition3 = props.transition, transitionEnd = props.transitionEnd, delay = props.delay, rest = _objectWithoutPropertiesLoose5(props, _excluded5);
    var show = unmountOnExit ? isOpen && unmountOnExit : true;
    var animate3 = isOpen || unmountOnExit ? "enter" : "exit";
    var custom = {
      offsetX,
      offsetY,
      reverse,
      transition: transition3,
      transitionEnd,
      delay
    };
    return /* @__PURE__ */ React18.createElement(AnimatePresence, {
      custom
    }, show && /* @__PURE__ */ React18.createElement(motion.div, _extends10({
      ref,
      className: cx("chakra-offset-slide", className),
      custom
    }, slideFadeConfig, {
      animate: animate3
    }, rest)));
  });
  if (__DEV__) {
    SlideFade.displayName = "SlideFade";
  }

  // node_modules/@chakra-ui/alert/dist/chakra-ui-alert.esm.js
  var React19 = __toESM(require_react());
  function _extends11() {
    _extends11 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends11.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose6(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var CheckIcon = function CheckIcon2(props) {
    return /* @__PURE__ */ React19.createElement(Icon, _extends11({
      viewBox: "0 0 24 24"
    }, props), /* @__PURE__ */ React19.createElement("path", {
      fill: "currentColor",
      d: "M12,0A12,12,0,1,0,24,12,12.014,12.014,0,0,0,12,0Zm6.927,8.2-6.845,9.289a1.011,1.011,0,0,1-1.43.188L5.764,13.769a1,1,0,1,1,1.25-1.562l4.076,3.261,6.227-8.451A1,1,0,1,1,18.927,8.2Z"
    }));
  };
  var InfoIcon = function InfoIcon2(props) {
    return /* @__PURE__ */ React19.createElement(Icon, _extends11({
      viewBox: "0 0 24 24"
    }, props), /* @__PURE__ */ React19.createElement("path", {
      fill: "currentColor",
      d: "M12,0A12,12,0,1,0,24,12,12.013,12.013,0,0,0,12,0Zm.25,5a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,12.25,5ZM14.5,18.5h-4a1,1,0,0,1,0-2h.75a.25.25,0,0,0,.25-.25v-4.5a.25.25,0,0,0-.25-.25H10.5a1,1,0,0,1,0-2h1a2,2,0,0,1,2,2v4.75a.25.25,0,0,0,.25.25h.75a1,1,0,1,1,0,2Z"
    }));
  };
  var WarningIcon = function WarningIcon2(props) {
    return /* @__PURE__ */ React19.createElement(Icon, _extends11({
      viewBox: "0 0 24 24"
    }, props), /* @__PURE__ */ React19.createElement("path", {
      fill: "currentColor",
      d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
    }));
  };
  var _excluded6 = ["status"];
  var STATUSES = {
    info: {
      icon: InfoIcon,
      colorScheme: "blue"
    },
    warning: {
      icon: WarningIcon,
      colorScheme: "orange"
    },
    success: {
      icon: CheckIcon,
      colorScheme: "green"
    },
    error: {
      icon: WarningIcon,
      colorScheme: "red"
    }
  };
  var _createContext3 = createContext3({
    name: "AlertContext",
    errorMessage: "useAlertContext: `context` is undefined. Seems you forgot to wrap alert components in `<Alert />`"
  });
  var AlertProvider = _createContext3[0];
  var useAlertContext = _createContext3[1];
  var Alert = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var _props$colorScheme;
    var _omitThemingProps = omitThemingProps(props), _omitThemingProps$sta = _omitThemingProps.status, status = _omitThemingProps$sta === void 0 ? "info" : _omitThemingProps$sta, rest = _objectWithoutPropertiesLoose6(_omitThemingProps, _excluded6);
    var colorScheme = (_props$colorScheme = props.colorScheme) != null ? _props$colorScheme : STATUSES[status].colorScheme;
    var styles2 = useMultiStyleConfig("Alert", _extends11({}, props, {
      colorScheme
    }));
    var alertStyles = _extends11({
      width: "100%",
      display: "flex",
      alignItems: "center",
      position: "relative",
      overflow: "hidden"
    }, styles2.container);
    return /* @__PURE__ */ React19.createElement(AlertProvider, {
      value: {
        status
      }
    }, /* @__PURE__ */ React19.createElement(StylesProvider, {
      value: styles2
    }, /* @__PURE__ */ React19.createElement(chakra.div, _extends11({
      role: "alert",
      ref
    }, rest, {
      className: cx("chakra-alert", props.className),
      __css: alertStyles
    }))));
  });
  var AlertTitle = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var styles2 = useStyles();
    return /* @__PURE__ */ React19.createElement(chakra.div, _extends11({
      ref
    }, props, {
      className: cx("chakra-alert__title", props.className),
      __css: styles2.title
    }));
  });
  var AlertDescription = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var styles2 = useStyles();
    var descriptionStyles = _extends11({
      display: "inline"
    }, styles2.description);
    return /* @__PURE__ */ React19.createElement(chakra.div, _extends11({
      ref
    }, props, {
      className: cx("chakra-alert__desc", props.className),
      __css: descriptionStyles
    }));
  });
  var AlertIcon = function AlertIcon2(props) {
    var _useAlertContext = useAlertContext(), status = _useAlertContext.status;
    var BaseIcon = STATUSES[status].icon;
    var styles2 = useStyles();
    return /* @__PURE__ */ React19.createElement(chakra.span, _extends11({
      display: "inherit"
    }, props, {
      className: cx("chakra-alert__icon", props.className),
      __css: styles2.icon
    }), /* @__PURE__ */ React19.createElement(BaseIcon, {
      w: "100%",
      h: "100%"
    }));
  };

  // node_modules/@chakra-ui/button/dist/chakra-ui-button.esm.js
  var React21 = __toESM(require_react());

  // node_modules/@chakra-ui/visually-hidden/dist/chakra-ui-visually-hidden.esm.js
  var visuallyHiddenStyle = {
    border: "0px",
    clip: "rect(0px, 0px, 0px, 0px)",
    height: "1px",
    width: "1px",
    margin: "-1px",
    padding: "0px",
    overflow: "hidden",
    whiteSpace: "nowrap",
    position: "absolute"
  };
  var VisuallyHidden = chakra("span", {
    baseStyle: visuallyHiddenStyle
  });
  if (__DEV__) {
    VisuallyHidden.displayName = "VisuallyHidden";
  }
  var VisuallyHiddenInput = chakra("input", {
    baseStyle: visuallyHiddenStyle
  });
  if (__DEV__) {
    VisuallyHiddenInput.displayName = "VisuallyHiddenInput";
  }

  // node_modules/@chakra-ui/spinner/dist/chakra-ui-spinner.esm.js
  var React20 = __toESM(require_react());
  function _extends12() {
    _extends12 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends12.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose7(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var _excluded7 = ["label", "thickness", "speed", "emptyColor", "className"];
  var spin = keyframes({
    "0%": {
      transform: "rotate(0deg)"
    },
    "100%": {
      transform: "rotate(360deg)"
    }
  });
  var Spinner = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var styles2 = useStyleConfig("Spinner", props);
    var _omitThemingProps = omitThemingProps(props), _omitThemingProps$lab = _omitThemingProps.label, label = _omitThemingProps$lab === void 0 ? "Loading..." : _omitThemingProps$lab, _omitThemingProps$thi = _omitThemingProps.thickness, thickness = _omitThemingProps$thi === void 0 ? "2px" : _omitThemingProps$thi, _omitThemingProps$spe = _omitThemingProps.speed, speed = _omitThemingProps$spe === void 0 ? "0.45s" : _omitThemingProps$spe, _omitThemingProps$emp = _omitThemingProps.emptyColor, emptyColor = _omitThemingProps$emp === void 0 ? "transparent" : _omitThemingProps$emp, className = _omitThemingProps.className, rest = _objectWithoutPropertiesLoose7(_omitThemingProps, _excluded7);
    var _className = cx("chakra-spinner", className);
    var spinnerStyles = _extends12({
      display: "inline-block",
      borderColor: "currentColor",
      borderStyle: "solid",
      borderRadius: "99999px",
      borderWidth: thickness,
      borderBottomColor: emptyColor,
      borderLeftColor: emptyColor,
      animation: spin + " " + speed + " linear infinite"
    }, styles2);
    return /* @__PURE__ */ React20.createElement(chakra.div, _extends12({
      ref,
      __css: spinnerStyles,
      className: _className
    }, rest), label && /* @__PURE__ */ React20.createElement(VisuallyHidden, null, label));
  });
  if (__DEV__) {
    Spinner.displayName = "Spinner";
  }

  // node_modules/@chakra-ui/button/dist/chakra-ui-button.esm.js
  function _objectWithoutPropertiesLoose8(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function _extends13() {
    _extends13 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends13.apply(this, arguments);
  }
  var _excluded$42 = ["size", "colorScheme", "variant", "className", "spacing", "isAttached", "isDisabled"];
  var _createContext4 = createContext3({
    strict: false,
    name: "ButtonGroupContext"
  });
  var ButtonGroupProvider = _createContext4[0];
  var useButtonGroup = _createContext4[1];
  var ButtonGroup = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var size2 = props.size, colorScheme = props.colorScheme, variant = props.variant, className = props.className, _props$spacing = props.spacing, spacing2 = _props$spacing === void 0 ? "0.5rem" : _props$spacing, isAttached = props.isAttached, isDisabled2 = props.isDisabled, rest = _objectWithoutPropertiesLoose8(props, _excluded$42);
    var _className = cx("chakra-button__group", className);
    var context = React21.useMemo(function() {
      return {
        size: size2,
        colorScheme,
        variant,
        isDisabled: isDisabled2
      };
    }, [size2, colorScheme, variant, isDisabled2]);
    var groupStyles = {
      display: "inline-flex"
    };
    if (isAttached) {
      groupStyles = _extends13({}, groupStyles, {
        "> *:first-of-type:not(:last-of-type)": {
          borderEndRadius: 0
        },
        "> *:not(:first-of-type):not(:last-of-type)": {
          borderRadius: 0
        },
        "> *:not(:first-of-type):last-of-type": {
          borderStartRadius: 0
        }
      });
    } else {
      groupStyles = _extends13({}, groupStyles, {
        "& > *:not(style) ~ *:not(style)": {
          marginStart: spacing2
        }
      });
    }
    return /* @__PURE__ */ React21.createElement(ButtonGroupProvider, {
      value: context
    }, /* @__PURE__ */ React21.createElement(chakra.div, _extends13({
      ref,
      role: "group",
      __css: groupStyles,
      className: _className
    }, rest)));
  });
  if (__DEV__) {
    ButtonGroup.displayName = "ButtonGroup";
  }
  var _excluded$32 = ["label", "placement", "spacing", "children", "className", "__css"];
  var ButtonSpinner = function ButtonSpinner2(props) {
    var label = props.label, placement = props.placement, _props$spacing = props.spacing, spacing2 = _props$spacing === void 0 ? "0.5rem" : _props$spacing, _props$children = props.children, children = _props$children === void 0 ? /* @__PURE__ */ React21.createElement(Spinner, {
      color: "currentColor",
      width: "1em",
      height: "1em"
    }) : _props$children, className = props.className, __css = props.__css, rest = _objectWithoutPropertiesLoose8(props, _excluded$32);
    var _className = cx("chakra-button__spinner", className);
    var marginProp = placement === "start" ? "marginEnd" : "marginStart";
    var spinnerStyles = React21.useMemo(function() {
      var _extends22;
      return _extends13((_extends22 = {
        display: "flex",
        alignItems: "center",
        position: label ? "relative" : "absolute"
      }, _extends22[marginProp] = label ? spacing2 : 0, _extends22.fontSize = "1em", _extends22.lineHeight = "normal", _extends22), __css);
    }, [__css, label, marginProp, spacing2]);
    return /* @__PURE__ */ React21.createElement(chakra.div, _extends13({
      className: _className
    }, rest, {
      __css: spinnerStyles
    }), children);
  };
  if (__DEV__) {
    ButtonSpinner.displayName = "ButtonSpinner";
  }
  var _excluded$22 = ["children", "className"];
  var ButtonIcon = function ButtonIcon2(props) {
    var children = props.children, className = props.className, rest = _objectWithoutPropertiesLoose8(props, _excluded$22);
    var _children = /* @__PURE__ */ React21.isValidElement(children) ? /* @__PURE__ */ React21.cloneElement(children, {
      "aria-hidden": true,
      focusable: false
    }) : children;
    var _className = cx("chakra-button__icon", className);
    return /* @__PURE__ */ React21.createElement(chakra.span, _extends13({
      display: "inline-flex",
      alignSelf: "center",
      flexShrink: 0
    }, rest, {
      className: _className
    }), _children);
  };
  if (__DEV__) {
    ButtonIcon.displayName = "ButtonIcon";
  }
  function useButtonType(value) {
    var _React$useState = React21.useState(!value), isButton = _React$useState[0], setIsButton = _React$useState[1];
    var refCallback = React21.useCallback(function(node3) {
      if (!node3)
        return;
      setIsButton(node3.tagName === "BUTTON");
    }, []);
    var type = isButton ? "button" : void 0;
    return {
      ref: refCallback,
      type
    };
  }
  var _excluded$13 = ["isDisabled", "isLoading", "isActive", "isFullWidth", "children", "leftIcon", "rightIcon", "loadingText", "iconSpacing", "type", "spinner", "spinnerPlacement", "className", "as"];
  var Button = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var group = useButtonGroup();
    var styles2 = useStyleConfig("Button", _extends13({}, group, props));
    var _omitThemingProps = omitThemingProps(props), _omitThemingProps$isD = _omitThemingProps.isDisabled, isDisabled2 = _omitThemingProps$isD === void 0 ? group == null ? void 0 : group.isDisabled : _omitThemingProps$isD, isLoading = _omitThemingProps.isLoading, isActive = _omitThemingProps.isActive, isFullWidth = _omitThemingProps.isFullWidth, children = _omitThemingProps.children, leftIcon = _omitThemingProps.leftIcon, rightIcon = _omitThemingProps.rightIcon, loadingText = _omitThemingProps.loadingText, _omitThemingProps$ico = _omitThemingProps.iconSpacing, iconSpacing2 = _omitThemingProps$ico === void 0 ? "0.5rem" : _omitThemingProps$ico, type = _omitThemingProps.type, spinner2 = _omitThemingProps.spinner, _omitThemingProps$spi = _omitThemingProps.spinnerPlacement, spinnerPlacement = _omitThemingProps$spi === void 0 ? "start" : _omitThemingProps$spi, className = _omitThemingProps.className, as = _omitThemingProps.as, rest = _objectWithoutPropertiesLoose8(_omitThemingProps, _excluded$13);
    var buttonStyles = React21.useMemo(function() {
      var _styles$_focus;
      var _focus = (0, import_lodash.default)({}, (_styles$_focus = styles2 == null ? void 0 : styles2["_focus"]) != null ? _styles$_focus : {}, {
        zIndex: 1
      });
      return _extends13({
        display: "inline-flex",
        appearance: "none",
        alignItems: "center",
        justifyContent: "center",
        userSelect: "none",
        position: "relative",
        whiteSpace: "nowrap",
        verticalAlign: "middle",
        outline: "none",
        width: isFullWidth ? "100%" : "auto"
      }, styles2, !!group && {
        _focus
      });
    }, [styles2, group, isFullWidth]);
    var _useButtonType = useButtonType(as), _ref2 = _useButtonType.ref, defaultType = _useButtonType.type;
    var contentProps = {
      rightIcon,
      leftIcon,
      iconSpacing: iconSpacing2,
      children
    };
    return /* @__PURE__ */ React21.createElement(chakra.button, _extends13({
      disabled: isDisabled2 || isLoading,
      ref: useMergeRefs(ref, _ref2),
      as,
      type: type != null ? type : defaultType,
      "data-active": dataAttr(isActive),
      "data-loading": dataAttr(isLoading),
      __css: buttonStyles,
      className: cx("chakra-button", className)
    }, rest), isLoading && spinnerPlacement === "start" && /* @__PURE__ */ React21.createElement(ButtonSpinner, {
      className: "chakra-button__spinner--start",
      label: loadingText,
      placement: "start",
      spacing: iconSpacing2
    }, spinner2), isLoading ? loadingText || /* @__PURE__ */ React21.createElement(chakra.span, {
      opacity: 0
    }, /* @__PURE__ */ React21.createElement(ButtonContent, contentProps)) : /* @__PURE__ */ React21.createElement(ButtonContent, contentProps), isLoading && spinnerPlacement === "end" && /* @__PURE__ */ React21.createElement(ButtonSpinner, {
      className: "chakra-button__spinner--end",
      label: loadingText,
      placement: "end",
      spacing: iconSpacing2
    }, spinner2));
  });
  if (__DEV__) {
    Button.displayName = "Button";
  }
  function ButtonContent(props) {
    var leftIcon = props.leftIcon, rightIcon = props.rightIcon, children = props.children, iconSpacing2 = props.iconSpacing;
    return /* @__PURE__ */ React21.createElement(React21.Fragment, null, leftIcon && /* @__PURE__ */ React21.createElement(ButtonIcon, {
      marginEnd: iconSpacing2
    }, leftIcon), children, rightIcon && /* @__PURE__ */ React21.createElement(ButtonIcon, {
      marginStart: iconSpacing2
    }, rightIcon));
  }
  var _excluded8 = ["icon", "children", "isRound", "aria-label"];
  var IconButton = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var icon = props.icon, children = props.children, isRound = props.isRound, ariaLabel = props["aria-label"], rest = _objectWithoutPropertiesLoose8(props, _excluded8);
    var element = icon || children;
    var _children = /* @__PURE__ */ React21.isValidElement(element) ? /* @__PURE__ */ React21.cloneElement(element, {
      "aria-hidden": true,
      focusable: false
    }) : null;
    return /* @__PURE__ */ React21.createElement(Button, _extends13({
      padding: "0",
      borderRadius: isRound ? "full" : void 0,
      ref,
      "aria-label": ariaLabel
    }, rest), _children);
  });
  if (__DEV__) {
    IconButton.displayName = "IconButton";
  }

  // node_modules/@chakra-ui/close-button/dist/chakra-ui-close-button.esm.js
  var React22 = __toESM(require_react());
  function _objectWithoutPropertiesLoose9(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function _extends14() {
    _extends14 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends14.apply(this, arguments);
  }
  var _excluded9 = ["children", "isDisabled", "__css"];
  var CloseIcon = function CloseIcon2(props) {
    return /* @__PURE__ */ React22.createElement(Icon, _extends14({
      focusable: "false",
      "aria-hidden": true
    }, props), /* @__PURE__ */ React22.createElement("path", {
      fill: "currentColor",
      d: "M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z"
    }));
  };
  var CloseButton = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var styles2 = useStyleConfig("CloseButton", props);
    var _omitThemingProps = omitThemingProps(props), children = _omitThemingProps.children, isDisabled2 = _omitThemingProps.isDisabled, __css = _omitThemingProps.__css, rest = _objectWithoutPropertiesLoose9(_omitThemingProps, _excluded9);
    var baseStyle22 = {
      outline: 0,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      flexShrink: 0
    };
    return /* @__PURE__ */ React22.createElement(chakra.button, _extends14({
      type: "button",
      "aria-label": "Close",
      ref,
      disabled: isDisabled2,
      __css: _extends14({}, baseStyle22, styles2, __css)
    }, rest), children || /* @__PURE__ */ React22.createElement(CloseIcon, {
      width: "1em",
      height: "1em"
    }));
  });
  if (__DEV__) {
    CloseButton.displayName = "CloseButton";
  }

  // node_modules/@chakra-ui/layout/dist/chakra-ui-layout.esm.js
  var React23 = __toESM(require_react());
  function _extends15() {
    _extends15 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends15.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose10(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var _excluded$h = ["ratio", "children", "className"];
  var AspectRatio = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var _props$ratio = props.ratio, ratio = _props$ratio === void 0 ? 4 / 3 : _props$ratio, children = props.children, className = props.className, rest = _objectWithoutPropertiesLoose10(props, _excluded$h);
    var child = React23.Children.only(children);
    var _className = cx("chakra-aspect-ratio", className);
    return /* @__PURE__ */ React23.createElement(chakra.div, _extends15({
      ref,
      position: "relative",
      className: _className,
      _before: {
        height: 0,
        content: '""',
        display: "block",
        paddingBottom: mapResponsive(ratio, function(r) {
          return 1 / r * 100 + "%";
        })
      },
      __css: {
        "& > *:not(style)": {
          overflow: "hidden",
          position: "absolute",
          top: "0",
          right: "0",
          bottom: "0",
          left: "0",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          width: "100%",
          height: "100%"
        },
        "& > img, & > video": {
          objectFit: "cover"
        }
      }
    }, rest), child);
  });
  if (__DEV__) {
    AspectRatio.displayName = "AspectRatio";
  }
  var _excluded$g = ["className"];
  var Badge2 = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var styles2 = useStyleConfig("Badge", props);
    var _omitThemingProps = omitThemingProps(props);
    _omitThemingProps.className;
    var rest = _objectWithoutPropertiesLoose10(_omitThemingProps, _excluded$g);
    return /* @__PURE__ */ React23.createElement(chakra.span, _extends15({
      ref,
      className: cx("chakra-badge", props.className)
    }, rest, {
      __css: _extends15({
        display: "inline-block",
        whiteSpace: "nowrap",
        verticalAlign: "middle"
      }, styles2)
    }));
  });
  if (__DEV__) {
    Badge2.displayName = "Badge";
  }
  var _excluded$f = ["size", "centerContent"];
  var _excluded2$5 = ["size"];
  var Box = chakra("div");
  if (__DEV__) {
    Box.displayName = "Box";
  }
  var Square = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var size2 = props.size, _props$centerContent = props.centerContent, centerContent = _props$centerContent === void 0 ? true : _props$centerContent, rest = _objectWithoutPropertiesLoose10(props, _excluded$f);
    var styles2 = centerContent ? {
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    } : {};
    return /* @__PURE__ */ React23.createElement(Box, _extends15({
      ref,
      boxSize: size2,
      __css: _extends15({}, styles2, {
        flexShrink: 0,
        flexGrow: 0
      })
    }, rest));
  });
  if (__DEV__) {
    Square.displayName = "Square";
  }
  var Circle = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var size2 = props.size, rest = _objectWithoutPropertiesLoose10(props, _excluded2$5);
    return /* @__PURE__ */ React23.createElement(Square, _extends15({
      size: size2,
      ref,
      borderRadius: "9999px"
    }, rest));
  });
  if (__DEV__) {
    Circle.displayName = "Circle";
  }
  var Center = chakra("div", {
    baseStyle: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    }
  });
  if (__DEV__) {
    Center.displayName = "Center";
  }
  var _excluded$d = ["className"];
  var Code = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var styles2 = useStyleConfig("Code", props);
    var _omitThemingProps = omitThemingProps(props);
    _omitThemingProps.className;
    var rest = _objectWithoutPropertiesLoose10(_omitThemingProps, _excluded$d);
    return /* @__PURE__ */ React23.createElement(chakra.code, _extends15({
      ref,
      className: cx("chakra-code", props.className)
    }, rest, {
      __css: _extends15({
        display: "inline-block"
      }, styles2)
    }));
  });
  if (__DEV__) {
    Code.displayName = "Code";
  }
  var _excluded$c = ["className", "centerContent"];
  var Container3 = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var _omitThemingProps = omitThemingProps(props), className = _omitThemingProps.className, centerContent = _omitThemingProps.centerContent, rest = _objectWithoutPropertiesLoose10(_omitThemingProps, _excluded$c);
    var styles2 = useStyleConfig("Container", props);
    return /* @__PURE__ */ React23.createElement(chakra.div, _extends15({
      ref,
      className: cx("chakra-container", className)
    }, rest, {
      __css: _extends15({}, styles2, centerContent && {
        display: "flex",
        flexDirection: "column",
        alignItems: "center"
      })
    }));
  });
  if (__DEV__) {
    Container3.displayName = "Container";
  }
  var _excluded$b = ["borderLeftWidth", "borderBottomWidth", "borderTopWidth", "borderRightWidth", "borderWidth", "borderStyle", "borderColor"];
  var _excluded2$4 = ["className", "orientation", "__css"];
  var Divider = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var _useStyleConfig = useStyleConfig("Divider", props), borderLeftWidth = _useStyleConfig.borderLeftWidth, borderBottomWidth = _useStyleConfig.borderBottomWidth, borderTopWidth = _useStyleConfig.borderTopWidth, borderRightWidth = _useStyleConfig.borderRightWidth, borderWidth = _useStyleConfig.borderWidth, borderStyle = _useStyleConfig.borderStyle, borderColor = _useStyleConfig.borderColor, styles2 = _objectWithoutPropertiesLoose10(_useStyleConfig, _excluded$b);
    var _omitThemingProps = omitThemingProps(props), className = _omitThemingProps.className, _omitThemingProps$ori = _omitThemingProps.orientation, orientation = _omitThemingProps$ori === void 0 ? "horizontal" : _omitThemingProps$ori, __css = _omitThemingProps.__css, rest = _objectWithoutPropertiesLoose10(_omitThemingProps, _excluded2$4);
    var dividerStyles = {
      vertical: {
        borderLeftWidth: borderLeftWidth || borderRightWidth || borderWidth || "1px",
        height: "100%"
      },
      horizontal: {
        borderBottomWidth: borderBottomWidth || borderTopWidth || borderWidth || "1px",
        width: "100%"
      }
    };
    return /* @__PURE__ */ React23.createElement(chakra.hr, _extends15({
      ref,
      "aria-orientation": orientation
    }, rest, {
      __css: _extends15({}, styles2, {
        border: "0",
        borderColor,
        borderStyle
      }, dividerStyles[orientation], __css),
      className: cx("chakra-divider", className)
    }));
  });
  if (__DEV__) {
    Divider.displayName = "Divider";
  }
  var _excluded$a = ["direction", "align", "justify", "wrap", "basis", "grow", "shrink"];
  var Flex = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var direction2 = props.direction, align = props.align, justify = props.justify, wrap3 = props.wrap, basis = props.basis, grow = props.grow, shrink = props.shrink, rest = _objectWithoutPropertiesLoose10(props, _excluded$a);
    var styles2 = {
      display: "flex",
      flexDirection: direction2,
      alignItems: align,
      justifyContent: justify,
      flexWrap: wrap3,
      flexBasis: basis,
      flexGrow: grow,
      flexShrink: shrink
    };
    return /* @__PURE__ */ React23.createElement(chakra.div, _extends15({
      ref,
      __css: styles2
    }, rest));
  });
  if (__DEV__) {
    Flex.displayName = "Flex";
  }
  var _excluded$9 = ["area", "templateAreas", "gap", "rowGap", "columnGap", "column", "row", "autoFlow", "autoRows", "templateRows", "autoColumns", "templateColumns"];
  var Grid = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var area = props.area, templateAreas = props.templateAreas, gap = props.gap, rowGap = props.rowGap, columnGap = props.columnGap, column2 = props.column, row = props.row, autoFlow = props.autoFlow, autoRows = props.autoRows, templateRows = props.templateRows, autoColumns = props.autoColumns, templateColumns = props.templateColumns, rest = _objectWithoutPropertiesLoose10(props, _excluded$9);
    var styles2 = {
      display: "grid",
      gridArea: area,
      gridTemplateAreas: templateAreas,
      gridGap: gap,
      gridRowGap: rowGap,
      gridColumnGap: columnGap,
      gridAutoColumns: autoColumns,
      gridColumn: column2,
      gridRow: row,
      gridAutoFlow: autoFlow,
      gridAutoRows: autoRows,
      gridTemplateRows: templateRows,
      gridTemplateColumns: templateColumns
    };
    return /* @__PURE__ */ React23.createElement(chakra.div, _extends15({
      ref,
      __css: styles2
    }, rest));
  });
  if (__DEV__) {
    Grid.displayName = "Grid";
  }
  var _excluded$8 = ["className"];
  var Heading = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var styles2 = useStyleConfig("Heading", props);
    var _omitThemingProps = omitThemingProps(props);
    _omitThemingProps.className;
    var rest = _objectWithoutPropertiesLoose10(_omitThemingProps, _excluded$8);
    return /* @__PURE__ */ React23.createElement(chakra.h2, _extends15({
      ref,
      className: cx("chakra-heading", props.className)
    }, rest, {
      __css: styles2
    }));
  });
  if (__DEV__) {
    Heading.displayName = "Heading";
  }
  var _excluded$7 = ["className"];
  var Kbd = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var styles2 = useStyleConfig("Kbd", props);
    var _omitThemingProps = omitThemingProps(props), className = _omitThemingProps.className, rest = _objectWithoutPropertiesLoose10(_omitThemingProps, _excluded$7);
    return /* @__PURE__ */ React23.createElement(chakra.kbd, _extends15({
      ref,
      className: cx("chakra-kbd", className)
    }, rest, {
      __css: _extends15({
        fontFamily: "mono"
      }, styles2)
    }));
  });
  if (__DEV__) {
    Kbd.displayName = "Kbd";
  }
  var _excluded$6 = ["className", "isExternal"];
  var Link = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var styles2 = useStyleConfig("Link", props);
    var _omitThemingProps = omitThemingProps(props), className = _omitThemingProps.className, isExternal = _omitThemingProps.isExternal, rest = _objectWithoutPropertiesLoose10(_omitThemingProps, _excluded$6);
    return /* @__PURE__ */ React23.createElement(chakra.a, _extends15({
      target: isExternal ? "_blank" : void 0,
      rel: isExternal ? "noopener" : void 0,
      ref,
      className: cx("chakra-link", className)
    }, rest, {
      __css: styles2
    }));
  });
  if (__DEV__) {
    Link.displayName = "Link";
  }
  var _excluded$5 = ["children", "styleType", "stylePosition", "spacing"];
  var _excluded2$2 = ["as"];
  var _excluded32 = ["as"];
  var _createContext5 = createContext3({
    name: "StylesContext",
    errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in a `<*List />` "
  });
  var StylesProvider2 = _createContext5[0];
  var useStyles2 = _createContext5[1];
  var List = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var _ref2;
    var styles2 = useMultiStyleConfig("List", props);
    var _omitThemingProps = omitThemingProps(props), children = _omitThemingProps.children, _omitThemingProps$sty = _omitThemingProps.styleType, styleType = _omitThemingProps$sty === void 0 ? "none" : _omitThemingProps$sty, stylePosition = _omitThemingProps.stylePosition, spacing2 = _omitThemingProps.spacing, rest = _objectWithoutPropertiesLoose10(_omitThemingProps, _excluded$5);
    var validChildren = getValidChildren(children);
    var selector2 = "& > *:not(style) ~ *:not(style)";
    var spacingStyle = spacing2 ? (_ref2 = {}, _ref2[selector2] = {
      mt: spacing2
    }, _ref2) : {};
    return /* @__PURE__ */ React23.createElement(StylesProvider2, {
      value: styles2
    }, /* @__PURE__ */ React23.createElement(chakra.ul, _extends15({
      ref,
      listStyleType: styleType,
      listStylePosition: stylePosition,
      role: "list",
      __css: _extends15({}, styles2.container, spacingStyle)
    }, rest), validChildren));
  });
  if (__DEV__) {
    List.displayName = "List";
  }
  var OrderedList = /* @__PURE__ */ forwardRef3(function(props, ref) {
    props.as;
    var rest = _objectWithoutPropertiesLoose10(props, _excluded2$2);
    return /* @__PURE__ */ React23.createElement(List, _extends15({
      ref,
      as: "ol",
      styleType: "decimal",
      marginStart: "1em"
    }, rest));
  });
  if (__DEV__) {
    OrderedList.displayName = "OrderedList";
  }
  var UnorderedList = /* @__PURE__ */ forwardRef3(function(props, ref) {
    props.as;
    var rest = _objectWithoutPropertiesLoose10(props, _excluded32);
    return /* @__PURE__ */ React23.createElement(List, _extends15({
      ref,
      as: "ul",
      styleType: "initial",
      marginStart: "1em"
    }, rest));
  });
  if (__DEV__) {
    UnorderedList.displayName = "UnorderedList";
  }
  var ListItem = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var styles2 = useStyles2();
    return /* @__PURE__ */ React23.createElement(chakra.li, _extends15({
      ref
    }, props, {
      __css: styles2.item
    }));
  });
  if (__DEV__) {
    ListItem.displayName = "ListItem";
  }
  var ListIcon = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var styles2 = useStyles2();
    return /* @__PURE__ */ React23.createElement(Icon, _extends15({
      ref,
      role: "presentation"
    }, props, {
      __css: styles2.icon
    }));
  });
  if (__DEV__) {
    ListIcon.displayName = "ListIcon";
  }
  var _excluded$43 = ["columns", "spacingX", "spacingY", "spacing", "minChildWidth"];
  var SimpleGrid = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var columns = props.columns, spacingX = props.spacingX, spacingY = props.spacingY, spacing2 = props.spacing, minChildWidth = props.minChildWidth, rest = _objectWithoutPropertiesLoose10(props, _excluded$43);
    var templateColumns = minChildWidth ? widthToColumns(minChildWidth) : countToColumns(columns);
    return /* @__PURE__ */ React23.createElement(Grid, _extends15({
      ref,
      gap: spacing2,
      columnGap: spacingX,
      rowGap: spacingY,
      templateColumns
    }, rest));
  });
  if (__DEV__) {
    SimpleGrid.displayName = "SimpleGrid";
  }
  function toPx(n) {
    return isNumber(n) ? n + "px" : n;
  }
  function widthToColumns(width) {
    return mapResponsive(width, function(value) {
      return isNull(value) ? null : "repeat(auto-fit, minmax(" + toPx(value) + ", 1fr))";
    });
  }
  function countToColumns(count) {
    return mapResponsive(count, function(value) {
      return isNull(value) ? null : "repeat(" + value + ", minmax(0, 1fr))";
    });
  }
  var Spacer = chakra("div", {
    baseStyle: {
      flex: 1,
      justifySelf: "stretch",
      alignSelf: "stretch"
    }
  });
  if (__DEV__) {
    Spacer.displayName = "Spacer";
  }
  var selector = "& > *:not(style) ~ *:not(style)";
  function getStackStyles(options) {
    var _ref2;
    var spacing2 = options.spacing, direction2 = options.direction;
    var directionStyles = {
      column: {
        marginTop: spacing2,
        marginEnd: 0,
        marginBottom: 0,
        marginStart: 0
      },
      row: {
        marginTop: 0,
        marginEnd: 0,
        marginBottom: 0,
        marginStart: spacing2
      },
      "column-reverse": {
        marginTop: 0,
        marginEnd: 0,
        marginBottom: spacing2,
        marginStart: 0
      },
      "row-reverse": {
        marginTop: 0,
        marginEnd: spacing2,
        marginBottom: 0,
        marginStart: 0
      }
    };
    return _ref2 = {
      flexDirection: direction2
    }, _ref2[selector] = mapResponsive(direction2, function(value) {
      return directionStyles[value];
    }), _ref2;
  }
  function getDividerStyles(options) {
    var spacing2 = options.spacing, direction2 = options.direction;
    var dividerStyles = {
      column: {
        my: spacing2,
        mx: 0,
        borderLeftWidth: 0,
        borderBottomWidth: "1px"
      },
      "column-reverse": {
        my: spacing2,
        mx: 0,
        borderLeftWidth: 0,
        borderBottomWidth: "1px"
      },
      row: {
        mx: spacing2,
        my: 0,
        borderLeftWidth: "1px",
        borderBottomWidth: 0
      },
      "row-reverse": {
        mx: spacing2,
        my: 0,
        borderLeftWidth: "1px",
        borderBottomWidth: 0
      }
    };
    return {
      "&": mapResponsive(direction2, function(value) {
        return dividerStyles[value];
      })
    };
  }
  var _excluded$33 = ["isInline", "direction", "align", "justify", "spacing", "wrap", "children", "divider", "className", "shouldWrapChildren"];
  var StackItem = function StackItem2(props) {
    return /* @__PURE__ */ React23.createElement(chakra.div, _extends15({
      className: "chakra-stack__item"
    }, props, {
      __css: _extends15({
        display: "inline-block",
        flex: "0 0 auto",
        minWidth: 0
      }, props["__css"])
    }));
  };
  var Stack = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var _ref2;
    var isInline = props.isInline, directionProp = props.direction, align = props.align, justify = props.justify, _props$spacing = props.spacing, spacing2 = _props$spacing === void 0 ? "0.5rem" : _props$spacing, wrap3 = props.wrap, children = props.children, divider2 = props.divider, className = props.className, shouldWrapChildren = props.shouldWrapChildren, rest = _objectWithoutPropertiesLoose10(props, _excluded$33);
    var direction2 = isInline ? "row" : directionProp != null ? directionProp : "column";
    var styles2 = React23.useMemo(function() {
      return getStackStyles({
        direction: direction2,
        spacing: spacing2
      });
    }, [direction2, spacing2]);
    var dividerStyle = React23.useMemo(function() {
      return getDividerStyles({
        spacing: spacing2,
        direction: direction2
      });
    }, [spacing2, direction2]);
    var hasDivider = !!divider2;
    var shouldUseChildren = !shouldWrapChildren && !hasDivider;
    var validChildren = getValidChildren(children);
    var clones = shouldUseChildren ? validChildren : validChildren.map(function(child, index) {
      var key = typeof child.key !== "undefined" ? child.key : index;
      var isLast = index + 1 === validChildren.length;
      var wrappedChild = /* @__PURE__ */ React23.createElement(StackItem, {
        key
      }, child);
      var _child = shouldWrapChildren ? wrappedChild : child;
      if (!hasDivider)
        return _child;
      var clonedDivider = /* @__PURE__ */ React23.cloneElement(divider2, {
        __css: dividerStyle
      });
      var _divider = isLast ? null : clonedDivider;
      return /* @__PURE__ */ React23.createElement(React23.Fragment, {
        key
      }, _child, _divider);
    });
    var _className = cx("chakra-stack", className);
    return /* @__PURE__ */ React23.createElement(chakra.div, _extends15({
      ref,
      display: "flex",
      alignItems: align,
      justifyContent: justify,
      flexDirection: styles2.flexDirection,
      flexWrap: wrap3,
      className: _className,
      __css: hasDivider ? {} : (_ref2 = {}, _ref2[selector] = styles2[selector], _ref2)
    }, rest), clones);
  });
  if (__DEV__) {
    Stack.displayName = "Stack";
  }
  var HStack = /* @__PURE__ */ forwardRef3(function(props, ref) {
    return /* @__PURE__ */ React23.createElement(Stack, _extends15({
      align: "center"
    }, props, {
      direction: "row",
      ref
    }));
  });
  if (__DEV__) {
    HStack.displayName = "HStack";
  }
  var VStack = /* @__PURE__ */ forwardRef3(function(props, ref) {
    return /* @__PURE__ */ React23.createElement(Stack, _extends15({
      align: "center"
    }, props, {
      direction: "column",
      ref
    }));
  });
  if (__DEV__) {
    VStack.displayName = "VStack";
  }
  var _excluded$23 = ["className", "align", "decoration", "casing"];
  var Text = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var styles2 = useStyleConfig("Text", props);
    var _omitThemingProps = omitThemingProps(props);
    _omitThemingProps.className;
    _omitThemingProps.align;
    _omitThemingProps.decoration;
    _omitThemingProps.casing;
    var rest = _objectWithoutPropertiesLoose10(_omitThemingProps, _excluded$23);
    var aliasedProps = filterUndefined({
      textAlign: props.align,
      textDecoration: props.decoration,
      textTransform: props.casing
    });
    return /* @__PURE__ */ React23.createElement(chakra.p, _extends15({
      ref,
      className: cx("chakra-text", props.className)
    }, aliasedProps, rest, {
      __css: styles2
    }));
  });
  if (__DEV__) {
    Text.displayName = "Text";
  }
  var _excluded$14 = ["spacing", "children", "justify", "direction", "align", "className", "shouldWrapChildren"];
  var _excluded2$1 = ["className"];
  var Wrap = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var _props$spacing = props.spacing, spacing2 = _props$spacing === void 0 ? "0.5rem" : _props$spacing, children = props.children, justify = props.justify, direction2 = props.direction, align = props.align, className = props.className, shouldWrapChildren = props.shouldWrapChildren, rest = _objectWithoutPropertiesLoose10(props, _excluded$14);
    var styles2 = React23.useMemo(function() {
      return {
        "--chakra-wrap-spacing": function chakraWrapSpacing(theme3) {
          return mapResponsive(spacing2, function(value) {
            return tokenToCSSVar("space", value)(theme3);
          });
        },
        "--wrap-spacing": "calc(var(--chakra-wrap-spacing) / 2)",
        display: "flex",
        flexWrap: "wrap",
        justifyContent: justify,
        alignItems: align,
        flexDirection: direction2,
        listStyleType: "none",
        padding: "0",
        margin: "calc(var(--wrap-spacing) * -1)",
        "& > *:not(style)": {
          margin: "var(--wrap-spacing)"
        }
      };
    }, [spacing2, justify, align, direction2]);
    var childrenToRender = shouldWrapChildren ? React23.Children.map(children, function(child, index) {
      return /* @__PURE__ */ React23.createElement(WrapItem, {
        key: index
      }, child);
    }) : children;
    return /* @__PURE__ */ React23.createElement(chakra.div, _extends15({
      ref,
      className: cx("chakra-wrap", className)
    }, rest), /* @__PURE__ */ React23.createElement(chakra.ul, {
      className: "chakra-wrap__list",
      __css: styles2
    }, childrenToRender));
  });
  if (__DEV__) {
    Wrap.displayName = "Wrap";
  }
  var WrapItem = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var className = props.className, rest = _objectWithoutPropertiesLoose10(props, _excluded2$1);
    return /* @__PURE__ */ React23.createElement(chakra.li, _extends15({
      ref,
      __css: {
        display: "flex",
        alignItems: "flex-start"
      },
      className: cx("chakra-wrap__listitem", className)
    }, rest));
  });
  if (__DEV__) {
    WrapItem.displayName = "WrapItem";
  }

  // node_modules/@chakra-ui/focus-lock/dist/chakra-ui-focus-lock.esm.js
  var React30 = __toESM(require_react());

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose11(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }

  // node_modules/react-focus-lock/dist/es2015/Combination.js
  var React29 = __toESM(require_react());

  // node_modules/react-focus-lock/dist/es2015/Lock.js
  var React26 = __toESM(require_react());
  var import_prop_types2 = __toESM(require_prop_types());

  // node_modules/focus-lock/dist/es2015/constants.js
  var FOCUS_GROUP = "data-focus-lock";
  var FOCUS_DISABLED = "data-focus-lock-disabled";
  var FOCUS_ALLOW = "data-no-focus-lock";
  var FOCUS_AUTO = "data-autofocus-inside";

  // node_modules/use-callback-ref/dist/es2015/assignRef.js
  function assignRef3(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
    return ref;
  }

  // node_modules/use-callback-ref/dist/es2015/useRef.js
  var import_react46 = __toESM(require_react());
  function useCallbackRef2(initialValue, callback) {
    var ref = (0, import_react46.useState)(function() {
      return {
        value: initialValue,
        callback,
        facade: {
          get current() {
            return ref.value;
          },
          set current(value) {
            var last3 = ref.value;
            if (last3 !== value) {
              ref.value = value;
              ref.callback(value, last3);
            }
          }
        }
      };
    })[0];
    ref.callback = callback;
    return ref.facade;
  }

  // node_modules/use-callback-ref/dist/es2015/useMergeRef.js
  function useMergeRefs2(refs, defaultValue) {
    return useCallbackRef2(defaultValue, function(newValue) {
      return refs.forEach(function(ref) {
        return assignRef3(ref, newValue);
      });
    });
  }

  // node_modules/react-focus-lock/dist/es2015/FocusGuard.js
  var React24 = __toESM(require_react());
  var import_prop_types = __toESM(require_prop_types());
  var hiddenGuard = {
    width: "1px",
    height: "0px",
    padding: 0,
    overflow: "hidden",
    position: "fixed",
    top: "1px",
    left: "1px"
  };
  var InFocusGuard = function InFocusGuard2(_ref2) {
    var children = _ref2.children;
    return /* @__PURE__ */ React24.createElement(React24.Fragment, null, /* @__PURE__ */ React24.createElement("div", {
      key: "guard-first",
      "data-focus-guard": true,
      "data-focus-auto-guard": true,
      style: hiddenGuard
    }), children, children && /* @__PURE__ */ React24.createElement("div", {
      key: "guard-last",
      "data-focus-guard": true,
      "data-focus-auto-guard": true,
      style: hiddenGuard
    }));
  };
  InFocusGuard.propTypes = true ? {
    children: import_prop_types.default.node
  } : {};
  InFocusGuard.defaultProps = {
    children: null
  };

  // node_modules/use-sidecar/node_modules/tslib/modules/index.js
  var import_tslib44 = __toESM(require_tslib2(), 1);
  var {
    __extends: __extends2,
    __assign: __assign2,
    __rest: __rest2,
    __decorate: __decorate2,
    __param: __param2,
    __metadata: __metadata2,
    __awaiter: __awaiter2,
    __generator: __generator2,
    __exportStar: __exportStar2,
    __createBinding: __createBinding2,
    __values: __values2,
    __read: __read2,
    __spread: __spread2,
    __spreadArrays: __spreadArrays2,
    __await: __await2,
    __asyncGenerator: __asyncGenerator2,
    __asyncDelegator: __asyncDelegator2,
    __asyncValues: __asyncValues2,
    __makeTemplateObject: __makeTemplateObject2,
    __importStar: __importStar2,
    __importDefault: __importDefault2,
    __classPrivateFieldGet: __classPrivateFieldGet2,
    __classPrivateFieldSet: __classPrivateFieldSet2
  } = import_tslib44.default;

  // node_modules/use-sidecar/dist/es2015/medium.js
  function ItoI(a2) {
    return a2;
  }
  function innerCreateMedium(defaults2, middleware2) {
    if (middleware2 === void 0) {
      middleware2 = ItoI;
    }
    var buffer = [];
    var assigned = false;
    var medium = {
      read: function() {
        if (assigned) {
          throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
        }
        if (buffer.length) {
          return buffer[buffer.length - 1];
        }
        return defaults2;
      },
      useMedium: function(data) {
        var item = middleware2(data, assigned);
        buffer.push(item);
        return function() {
          buffer = buffer.filter(function(x) {
            return x !== item;
          });
        };
      },
      assignSyncMedium: function(cb2) {
        assigned = true;
        while (buffer.length) {
          var cbs = buffer;
          buffer = [];
          cbs.forEach(cb2);
        }
        buffer = {
          push: function(x) {
            return cb2(x);
          },
          filter: function() {
            return buffer;
          }
        };
      },
      assignMedium: function(cb2) {
        assigned = true;
        var pendingQueue = [];
        if (buffer.length) {
          var cbs = buffer;
          buffer = [];
          cbs.forEach(cb2);
          pendingQueue = buffer;
        }
        var executeQueue = function() {
          var cbs2 = pendingQueue;
          pendingQueue = [];
          cbs2.forEach(cb2);
        };
        var cycle = function() {
          return Promise.resolve().then(executeQueue);
        };
        cycle();
        buffer = {
          push: function(x) {
            pendingQueue.push(x);
            cycle();
          },
          filter: function(filter4) {
            pendingQueue = pendingQueue.filter(filter4);
            return buffer;
          }
        };
      }
    };
    return medium;
  }
  function createMedium(defaults2, middleware2) {
    if (middleware2 === void 0) {
      middleware2 = ItoI;
    }
    return innerCreateMedium(defaults2, middleware2);
  }
  function createSidecarMedium(options) {
    if (options === void 0) {
      options = {};
    }
    var medium = innerCreateMedium(null);
    medium.options = __assign2({ async: true, ssr: false }, options);
    return medium;
  }

  // node_modules/use-sidecar/dist/es2015/exports.js
  var React25 = __toESM(require_react());
  var SideCar = function(_a) {
    var sideCar2 = _a.sideCar, rest = __rest2(_a, ["sideCar"]);
    if (!sideCar2) {
      throw new Error("Sidecar: please provide `sideCar` property to import the right car");
    }
    var Target = sideCar2.read();
    if (!Target) {
      throw new Error("Sidecar medium not found");
    }
    return React25.createElement(Target, __assign2({}, rest));
  };
  SideCar.isSideCarExport = true;
  function exportSidecar(medium, exported) {
    medium.useMedium(exported);
    return SideCar;
  }

  // node_modules/react-focus-lock/dist/es2015/medium.js
  var mediumFocus = createMedium({}, function(_ref2) {
    var target = _ref2.target, currentTarget = _ref2.currentTarget;
    return {
      target,
      currentTarget
    };
  });
  var mediumBlur = createMedium();
  var mediumEffect = createMedium();
  var mediumSidecar = createSidecarMedium({
    async: true
  });

  // node_modules/react-focus-lock/dist/es2015/Lock.js
  var emptyArray = [];
  var FocusLock = /* @__PURE__ */ React26.forwardRef(function FocusLockUI(props, parentRef) {
    var _extends22;
    var _React$useState = React26.useState(), realObserved = _React$useState[0], setObserved = _React$useState[1];
    var observed = React26.useRef();
    var isActive = React26.useRef(false);
    var originalFocusedElement = React26.useRef(null);
    var children = props.children, disabled2 = props.disabled, noFocusGuards = props.noFocusGuards, persistentFocus = props.persistentFocus, crossFrame = props.crossFrame, autoFocus = props.autoFocus, allowTextSelection = props.allowTextSelection, group = props.group, className = props.className, whiteList = props.whiteList, _props$shards = props.shards, shards = _props$shards === void 0 ? emptyArray : _props$shards, _props$as = props.as, Container4 = _props$as === void 0 ? "div" : _props$as, _props$lockProps = props.lockProps, containerProps = _props$lockProps === void 0 ? {} : _props$lockProps, SideCar2 = props.sideCar, shouldReturnFocus = props.returnFocus, onActivationCallback = props.onActivation, onDeactivationCallback = props.onDeactivation;
    var _React$useState2 = React26.useState({}), id2 = _React$useState2[0];
    var onActivation = React26.useCallback(function() {
      originalFocusedElement.current = originalFocusedElement.current || document && document.activeElement;
      if (observed.current && onActivationCallback) {
        onActivationCallback(observed.current);
      }
      isActive.current = true;
    }, [onActivationCallback]);
    var onDeactivation = React26.useCallback(function() {
      isActive.current = false;
      if (onDeactivationCallback) {
        onDeactivationCallback(observed.current);
      }
    }, [onDeactivationCallback]);
    var returnFocus = React26.useCallback(function(allowDefer) {
      var current = originalFocusedElement.current;
      if (Boolean(shouldReturnFocus) && current && current.focus) {
        var focusOptions = typeof shouldReturnFocus === "object" ? shouldReturnFocus : void 0;
        originalFocusedElement.current = null;
        if (allowDefer) {
          Promise.resolve().then(function() {
            return current.focus(focusOptions);
          });
        } else {
          current.focus(focusOptions);
        }
      }
    }, [shouldReturnFocus]);
    var onFocus3 = React26.useCallback(function(event) {
      if (isActive.current) {
        mediumFocus.useMedium(event);
      }
    }, []);
    var onBlur3 = mediumBlur.useMedium;
    var setObserveNode = React26.useCallback(function(newObserved) {
      if (observed.current !== newObserved) {
        observed.current = newObserved;
        setObserved(newObserved);
      }
    }, []);
    if (true) {
      if (typeof allowTextSelection !== "undefined") {
        console.warn("React-Focus-Lock: allowTextSelection is deprecated and enabled by default");
      }
      React26.useEffect(function() {
        if (!observed.current) {
          console.error("FocusLock: could not obtain ref to internal node");
        }
      }, []);
    }
    var lockProps = _extends((_extends22 = {}, _extends22[FOCUS_DISABLED] = disabled2 && "disabled", _extends22[FOCUS_GROUP] = group, _extends22), containerProps);
    var hasLeadingGuards = noFocusGuards !== true;
    var hasTailingGuards = hasLeadingGuards && noFocusGuards !== "tail";
    var mergedRef = useMergeRefs2([parentRef, setObserveNode]);
    return /* @__PURE__ */ React26.createElement(React26.Fragment, null, hasLeadingGuards && [
      /* @__PURE__ */ React26.createElement("div", {
        key: "guard-first",
        "data-focus-guard": true,
        tabIndex: disabled2 ? -1 : 0,
        style: hiddenGuard
      }),
      /* @__PURE__ */ React26.createElement("div", {
        key: "guard-nearest",
        "data-focus-guard": true,
        tabIndex: disabled2 ? -1 : 1,
        style: hiddenGuard
      })
    ], !disabled2 && /* @__PURE__ */ React26.createElement(SideCar2, {
      id: id2,
      sideCar: mediumSidecar,
      observed: realObserved,
      disabled: disabled2,
      persistentFocus,
      crossFrame,
      autoFocus,
      whiteList,
      shards,
      onActivation,
      onDeactivation,
      returnFocus
    }), /* @__PURE__ */ React26.createElement(Container4, _extends({
      ref: mergedRef
    }, lockProps, {
      className,
      onBlur: onBlur3,
      onFocus: onFocus3
    }), children), hasTailingGuards && /* @__PURE__ */ React26.createElement("div", {
      "data-focus-guard": true,
      tabIndex: disabled2 ? -1 : 0,
      style: hiddenGuard
    }));
  });
  FocusLock.propTypes = true ? {
    children: import_prop_types2.node,
    disabled: import_prop_types2.bool,
    returnFocus: (0, import_prop_types2.oneOfType)([import_prop_types2.bool, import_prop_types2.object]),
    noFocusGuards: import_prop_types2.bool,
    allowTextSelection: import_prop_types2.bool,
    autoFocus: import_prop_types2.bool,
    persistentFocus: import_prop_types2.bool,
    crossFrame: import_prop_types2.bool,
    group: import_prop_types2.string,
    className: import_prop_types2.string,
    whiteList: import_prop_types2.func,
    shards: (0, import_prop_types2.arrayOf)(import_prop_types2.any),
    as: (0, import_prop_types2.oneOfType)([import_prop_types2.string, import_prop_types2.func, import_prop_types2.object]),
    lockProps: import_prop_types2.object,
    onActivation: import_prop_types2.func,
    onDeactivation: import_prop_types2.func,
    sideCar: import_prop_types2.any.isRequired
  } : {};
  FocusLock.defaultProps = {
    children: void 0,
    disabled: false,
    returnFocus: false,
    noFocusGuards: false,
    autoFocus: true,
    persistentFocus: false,
    crossFrame: true,
    allowTextSelection: void 0,
    group: void 0,
    className: void 0,
    whiteList: void 0,
    shards: void 0,
    as: "div",
    lockProps: {},
    onActivation: void 0,
    onDeactivation: void 0
  };
  var Lock_default = FocusLock;

  // node_modules/react-focus-lock/dist/es2015/Trap.js
  var React28 = __toESM(require_react());
  var import_prop_types3 = __toESM(require_prop_types());

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf2(o, p) {
    _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf4(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf2(o, p);
  }

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf2(subClass, superClass);
  }

  // node_modules/@babel/runtime/helpers/esm/defineProperty.js
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }

  // node_modules/react-clientside-effect/lib/index.es.js
  var import_react47 = __toESM(require_react());
  function withSideEffect(reducePropsToState2, handleStateChangeOnClient2) {
    if (true) {
      if (typeof reducePropsToState2 !== "function") {
        throw new Error("Expected reducePropsToState to be a function.");
      }
      if (typeof handleStateChangeOnClient2 !== "function") {
        throw new Error("Expected handleStateChangeOnClient to be a function.");
      }
    }
    function getDisplayName(WrappedComponent) {
      return WrappedComponent.displayName || WrappedComponent.name || "Component";
    }
    return function wrap3(WrappedComponent) {
      if (true) {
        if (typeof WrappedComponent !== "function") {
          throw new Error("Expected WrappedComponent to be a React component.");
        }
      }
      var mountedInstances = [];
      var state2;
      function emitChange() {
        state2 = reducePropsToState2(mountedInstances.map(function(instance) {
          return instance.props;
        }));
        handleStateChangeOnClient2(state2);
      }
      var SideEffect = /* @__PURE__ */ function(_PureComponent) {
        _inheritsLoose(SideEffect2, _PureComponent);
        function SideEffect2() {
          return _PureComponent.apply(this, arguments) || this;
        }
        SideEffect2.peek = function peek2() {
          return state2;
        };
        var _proto = SideEffect2.prototype;
        _proto.componentDidMount = function componentDidMount() {
          mountedInstances.push(this);
          emitChange();
        };
        _proto.componentDidUpdate = function componentDidUpdate() {
          emitChange();
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
          var index = mountedInstances.indexOf(this);
          mountedInstances.splice(index, 1);
          emitChange();
        };
        _proto.render = function render3() {
          return /* @__PURE__ */ import_react47.default.createElement(WrappedComponent, this.props);
        };
        return SideEffect2;
      }(import_react47.PureComponent);
      _defineProperty(SideEffect, "displayName", "SideEffect(" + getDisplayName(WrappedComponent) + ")");
      return SideEffect;
    };
  }
  var index_es_default = withSideEffect;

  // node_modules/focus-lock/dist/es2015/utils/array.js
  var toArray = function(a2) {
    var ret = Array(a2.length);
    for (var i = 0; i < a2.length; ++i) {
      ret[i] = a2[i];
    }
    return ret;
  };
  var asArray = function(a2) {
    return Array.isArray(a2) ? a2 : [a2];
  };

  // node_modules/focus-lock/dist/es2015/utils/all-affected.js
  var filterNested = function(nodes) {
    var contained = /* @__PURE__ */ new Set();
    var l = nodes.length;
    for (var i = 0; i < l; i += 1) {
      for (var j = i + 1; j < l; j += 1) {
        var position3 = nodes[i].compareDocumentPosition(nodes[j]);
        if ((position3 & Node.DOCUMENT_POSITION_CONTAINED_BY) > 0) {
          contained.add(j);
        }
        if ((position3 & Node.DOCUMENT_POSITION_CONTAINS) > 0) {
          contained.add(i);
        }
      }
    }
    return nodes.filter(function(_, index) {
      return !contained.has(index);
    });
  };
  var getTopParent = function(node3) {
    return node3.parentNode ? getTopParent(node3.parentNode) : node3;
  };
  var getAllAffectedNodes = function(node3) {
    var nodes = asArray(node3);
    return nodes.filter(Boolean).reduce(function(acc, currentNode) {
      var group = currentNode.getAttribute(FOCUS_GROUP);
      acc.push.apply(acc, group ? filterNested(toArray(getTopParent(currentNode).querySelectorAll("[" + FOCUS_GROUP + '="' + group + '"]:not([' + FOCUS_DISABLED + '="disabled"])'))) : [currentNode]);
      return acc;
    }, []);
  };

  // node_modules/focus-lock/dist/es2015/utils/is.js
  var isElementHidden = function(node3) {
    if (node3.nodeType !== Node.ELEMENT_NODE) {
      return false;
    }
    var computedStyle = window.getComputedStyle(node3, null);
    if (!computedStyle || !computedStyle.getPropertyValue) {
      return false;
    }
    return computedStyle.getPropertyValue("display") === "none" || computedStyle.getPropertyValue("visibility") === "hidden";
  };
  var isVisibleUncached = function(node3, checkParent) {
    return !node3 || node3 === document || node3 && node3.nodeType === Node.DOCUMENT_NODE || !isElementHidden(node3) && checkParent(node3.parentNode && node3.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? node3.parentNode.host : node3.parentNode);
  };
  var isVisibleCached = function(visibilityCache, node3) {
    var cached = visibilityCache.get(node3);
    if (cached !== void 0) {
      return cached;
    }
    var result = isVisibleUncached(node3, isVisibleCached.bind(void 0, visibilityCache));
    visibilityCache.set(node3, result);
    return result;
  };
  var notHiddenInput = function(node3) {
    return !((node3.tagName === "INPUT" || node3.tagName === "BUTTON") && (node3.type === "hidden" || node3.disabled));
  };
  var isGuard = function(node3) {
    return Boolean(node3 && node3.dataset && node3.dataset.focusGuard);
  };
  var isNotAGuard = function(node3) {
    return !isGuard(node3);
  };
  var isDefined = function(x) {
    return Boolean(x);
  };

  // node_modules/focus-lock/dist/es2015/utils/tabOrder.js
  var tabSort = function(a2, b2) {
    var tabDiff = a2.tabIndex - b2.tabIndex;
    var indexDiff = a2.index - b2.index;
    if (tabDiff) {
      if (!a2.tabIndex) {
        return 1;
      }
      if (!b2.tabIndex) {
        return -1;
      }
    }
    return tabDiff || indexDiff;
  };
  var orderByTabIndex = function(nodes, filterNegative, keepGuards) {
    return toArray(nodes).map(function(node3, index) {
      return {
        node: node3,
        index,
        tabIndex: keepGuards && node3.tabIndex === -1 ? (node3.dataset || {}).focusGuard ? 0 : -1 : node3.tabIndex
      };
    }).filter(function(data) {
      return !filterNegative || data.tabIndex >= 0;
    }).sort(tabSort);
  };

  // node_modules/focus-lock/dist/es2015/utils/tabbables.js
  var tabbables = [
    "button:enabled",
    "select:enabled",
    "textarea:enabled",
    "input:enabled",
    "a[href]",
    "area[href]",
    "summary",
    "iframe",
    "object",
    "embed",
    "audio[controls]",
    "video[controls]",
    "[tabindex]",
    "[contenteditable]",
    "[autofocus]"
  ];

  // node_modules/focus-lock/dist/es2015/utils/tabUtils.js
  var queryTabbables = tabbables.join(",");
  var queryGuardTabbables = queryTabbables + ", [data-focus-guard]";
  var getFocusables = function(parents, withGuards) {
    return parents.reduce(function(acc, parent) {
      return acc.concat(toArray(parent.querySelectorAll(withGuards ? queryGuardTabbables : queryTabbables)), parent.parentNode ? toArray(parent.parentNode.querySelectorAll(queryTabbables)).filter(function(node3) {
        return node3 === parent;
      }) : []);
    }, []);
  };
  var getParentAutofocusables = function(parent) {
    var parentFocus = parent.querySelectorAll("[" + FOCUS_AUTO + "]");
    return toArray(parentFocus).map(function(node3) {
      return getFocusables([node3]);
    }).reduce(function(acc, nodes) {
      return acc.concat(nodes);
    }, []);
  };

  // node_modules/focus-lock/dist/es2015/utils/DOMutils.js
  var filterFocusable = function(nodes, visibilityCache) {
    return toArray(nodes).filter(function(node3) {
      return isVisibleCached(visibilityCache, node3);
    }).filter(function(node3) {
      return notHiddenInput(node3);
    });
  };
  var getTabbableNodes = function(topNodes, visibilityCache, withGuards) {
    return orderByTabIndex(filterFocusable(getFocusables(topNodes, withGuards), visibilityCache), true, withGuards);
  };
  var getAllTabbableNodes = function(topNodes, visibilityCache) {
    return orderByTabIndex(filterFocusable(getFocusables(topNodes), visibilityCache), false);
  };
  var parentAutofocusables = function(topNode, visibilityCache) {
    return filterFocusable(getParentAutofocusables(topNode), visibilityCache);
  };

  // node_modules/focus-lock/dist/es2015/utils/parenting.js
  var getParents = function(node3, parents) {
    if (parents === void 0) {
      parents = [];
    }
    parents.push(node3);
    if (node3.parentNode) {
      getParents(node3.parentNode, parents);
    }
    return parents;
  };
  var getCommonParent = function(nodeA, nodeB) {
    var parentsA = getParents(nodeA);
    var parentsB = getParents(nodeB);
    for (var i = 0; i < parentsA.length; i += 1) {
      var currentParent = parentsA[i];
      if (parentsB.indexOf(currentParent) >= 0) {
        return currentParent;
      }
    }
    return false;
  };
  var getTopCommonParent = function(baseActiveElement, leftEntry, rightEntries) {
    var activeElements = asArray(baseActiveElement);
    var leftEntries = asArray(leftEntry);
    var activeElement = activeElements[0];
    var topCommon = false;
    leftEntries.filter(Boolean).forEach(function(entry) {
      topCommon = getCommonParent(topCommon || entry, entry) || topCommon;
      rightEntries.filter(Boolean).forEach(function(subEntry) {
        var common = getCommonParent(activeElement, subEntry);
        if (common) {
          if (!topCommon || common.contains(topCommon)) {
            topCommon = common;
          } else {
            topCommon = getCommonParent(common, topCommon);
          }
        }
      });
    });
    return topCommon;
  };
  var allParentAutofocusables = function(entries, visibilityCache) {
    return entries.reduce(function(acc, node3) {
      return acc.concat(parentAutofocusables(node3, visibilityCache));
    }, []);
  };

  // node_modules/focus-lock/dist/es2015/focusables.js
  var getFocusabledIn = function(topNode) {
    var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
    var commonParent = getTopCommonParent(topNode, topNode, entries);
    var visibilityCache = /* @__PURE__ */ new Map();
    var outerNodes = getTabbableNodes([commonParent], visibilityCache, true);
    var innerElements = getTabbableNodes(entries, visibilityCache).filter(function(_a) {
      var node3 = _a.node;
      return isNotAGuard(node3);
    }).map(function(_a) {
      var node3 = _a.node;
      return node3;
    });
    return outerNodes.map(function(_a) {
      var node3 = _a.node, index = _a.index;
      return {
        node: node3,
        index,
        lockItem: innerElements.indexOf(node3) >= 0,
        guard: isGuard(node3)
      };
    });
  };

  // node_modules/focus-lock/dist/es2015/focusInside.js
  var focusInFrame = function(frame3) {
    return frame3 === document.activeElement;
  };
  var focusInsideIframe = function(topNode) {
    return Boolean(toArray(topNode.querySelectorAll("iframe")).some(function(node3) {
      return focusInFrame(node3);
    }));
  };
  var focusInside = function(topNode) {
    var activeElement = document && document.activeElement;
    if (!activeElement || activeElement.dataset && activeElement.dataset.focusGuard) {
      return false;
    }
    return getAllAffectedNodes(topNode).reduce(function(result, node3) {
      return result || node3.contains(activeElement) || focusInsideIframe(node3);
    }, false);
  };

  // node_modules/focus-lock/dist/es2015/focusIsHidden.js
  var focusIsHidden = function() {
    return document && toArray(document.querySelectorAll("[" + FOCUS_ALLOW + "]")).some(function(node3) {
      return node3.contains(document.activeElement);
    });
  };

  // node_modules/focus-lock/dist/es2015/utils/correctFocus.js
  var isRadio = function(node3) {
    return node3.tagName === "INPUT" && node3.type === "radio";
  };
  var findSelectedRadio = function(node3, nodes) {
    return nodes.filter(isRadio).filter(function(el) {
      return el.name === node3.name;
    }).filter(function(el) {
      return el.checked;
    })[0] || node3;
  };
  var correctNode = function(node3, nodes) {
    if (isRadio(node3) && node3.name) {
      return findSelectedRadio(node3, nodes);
    }
    return node3;
  };
  var correctNodes = function(nodes) {
    var resultSet = /* @__PURE__ */ new Set();
    nodes.forEach(function(node3) {
      return resultSet.add(correctNode(node3, nodes));
    });
    return nodes.filter(function(node3) {
      return resultSet.has(node3);
    });
  };

  // node_modules/focus-lock/dist/es2015/utils/firstFocus.js
  var pickFirstFocus = function(nodes) {
    if (nodes[0] && nodes.length > 1) {
      return correctNode(nodes[0], nodes);
    }
    return nodes[0];
  };
  var pickFocusable = function(nodes, index) {
    if (nodes.length > 1) {
      return nodes.indexOf(correctNode(nodes[index], nodes));
    }
    return index;
  };

  // node_modules/focus-lock/dist/es2015/solver.js
  var NEW_FOCUS = "NEW_FOCUS";
  var newFocus = function(innerNodes, outerNodes, activeElement, lastNode) {
    var cnt = innerNodes.length;
    var firstFocus = innerNodes[0];
    var lastFocus = innerNodes[cnt - 1];
    var isOnGuard = isGuard(activeElement);
    if (innerNodes.indexOf(activeElement) >= 0) {
      return void 0;
    }
    var activeIndex = outerNodes.indexOf(activeElement);
    var lastIndex = lastNode ? outerNodes.indexOf(lastNode) : activeIndex;
    var lastNodeInside = lastNode ? innerNodes.indexOf(lastNode) : -1;
    var indexDiff = activeIndex - lastIndex;
    var firstNodeIndex = outerNodes.indexOf(firstFocus);
    var lastNodeIndex = outerNodes.indexOf(lastFocus);
    var correctedNodes = correctNodes(outerNodes);
    var correctedIndexDiff = correctedNodes.indexOf(activeElement) - (lastNode ? correctedNodes.indexOf(lastNode) : activeIndex);
    var returnFirstNode = pickFocusable(innerNodes, 0);
    var returnLastNode = pickFocusable(innerNodes, cnt - 1);
    if (activeIndex === -1 || lastNodeInside === -1) {
      return NEW_FOCUS;
    }
    if (!indexDiff && lastNodeInside >= 0) {
      return lastNodeInside;
    }
    if (activeIndex <= firstNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
      return returnLastNode;
    }
    if (activeIndex >= lastNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
      return returnFirstNode;
    }
    if (indexDiff && Math.abs(correctedIndexDiff) > 1) {
      return lastNodeInside;
    }
    if (activeIndex <= firstNodeIndex) {
      return returnLastNode;
    }
    if (activeIndex > lastNodeIndex) {
      return returnFirstNode;
    }
    if (indexDiff) {
      if (Math.abs(indexDiff) > 1) {
        return lastNodeInside;
      }
      return (cnt + lastNodeInside + indexDiff) % cnt;
    }
    return void 0;
  };

  // node_modules/focus-lock/dist/es2015/focusMerge.js
  var findAutoFocused = function(autoFocusables) {
    return function(node3) {
      return node3.autofocus || node3.dataset && !!node3.dataset.autofocus || autoFocusables.indexOf(node3) >= 0;
    };
  };
  var reorderNodes = function(srcNodes, dstNodes) {
    var remap = /* @__PURE__ */ new Map();
    dstNodes.forEach(function(entity) {
      return remap.set(entity.node, entity);
    });
    return srcNodes.map(function(node3) {
      return remap.get(node3);
    }).filter(isDefined);
  };
  var getFocusMerge = function(topNode, lastNode) {
    var activeElement = document && document.activeElement;
    var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
    var commonParent = getTopCommonParent(activeElement || topNode, topNode, entries);
    var visibilityCache = /* @__PURE__ */ new Map();
    var anyFocusable = getAllTabbableNodes(entries, visibilityCache);
    var innerElements = getTabbableNodes(entries, visibilityCache).filter(function(_a) {
      var node3 = _a.node;
      return isNotAGuard(node3);
    });
    if (!innerElements[0]) {
      innerElements = anyFocusable;
      if (!innerElements[0]) {
        return void 0;
      }
    }
    var outerNodes = getAllTabbableNodes([commonParent], visibilityCache).map(function(_a) {
      var node3 = _a.node;
      return node3;
    });
    var orderedInnerElements = reorderNodes(outerNodes, innerElements);
    var innerNodes = orderedInnerElements.map(function(_a) {
      var node3 = _a.node;
      return node3;
    });
    var newId = newFocus(innerNodes, outerNodes, activeElement, lastNode);
    if (newId === NEW_FOCUS) {
      var autoFocusable = anyFocusable.map(function(_a) {
        var node3 = _a.node;
        return node3;
      }).filter(findAutoFocused(allParentAutofocusables(entries, visibilityCache)));
      return {
        node: autoFocusable && autoFocusable.length ? pickFirstFocus(autoFocusable) : pickFirstFocus(innerNodes)
      };
    }
    if (newId === void 0) {
      return newId;
    }
    return orderedInnerElements[newId];
  };

  // node_modules/focus-lock/dist/es2015/setFocus.js
  var focusOn = function(target) {
    target.focus();
    if ("contentWindow" in target && target.contentWindow) {
      target.contentWindow.focus();
    }
  };
  var guardCount = 0;
  var lockDisabled = false;
  var setFocus = function(topNode, lastNode) {
    var focusable = getFocusMerge(topNode, lastNode);
    if (lockDisabled) {
      return;
    }
    if (focusable) {
      if (guardCount > 2) {
        console.error("FocusLock: focus-fighting detected. Only one focus management system could be active. See https://github.com/theKashey/focus-lock/#focus-fighting");
        lockDisabled = true;
        setTimeout(function() {
          lockDisabled = false;
        }, 1);
        return;
      }
      guardCount++;
      focusOn(focusable.node);
      guardCount--;
    }
  };

  // node_modules/focus-lock/dist/es2015/index.js
  var es2015_default = setFocus;

  // node_modules/react-focus-lock/dist/es2015/util.js
  function deferAction(action) {
    var _window = window, setImmediate = _window.setImmediate;
    if (typeof setImmediate !== "undefined") {
      setImmediate(action);
    } else {
      setTimeout(action, 1);
    }
  }

  // node_modules/react-focus-lock/dist/es2015/Trap.js
  var focusOnBody = function focusOnBody2() {
    return document && document.activeElement === document.body;
  };
  var isFreeFocus = function isFreeFocus2() {
    return focusOnBody() || focusIsHidden();
  };
  var lastActiveTrap = null;
  var lastActiveFocus = null;
  var lastPortaledElement = null;
  var focusWasOutsideWindow = false;
  var defaultWhitelist = function defaultWhitelist2() {
    return true;
  };
  var focusWhitelisted = function focusWhitelisted2(activeElement) {
    return (lastActiveTrap.whiteList || defaultWhitelist)(activeElement);
  };
  var recordPortal = function recordPortal2(observerNode, portaledElement) {
    lastPortaledElement = {
      observerNode,
      portaledElement
    };
  };
  var focusIsPortaledPair = function focusIsPortaledPair2(element) {
    return lastPortaledElement && lastPortaledElement.portaledElement === element;
  };
  function autoGuard(startIndex, end, step, allNodes) {
    var lastGuard = null;
    var i = startIndex;
    do {
      var item = allNodes[i];
      if (item.guard) {
        if (item.node.dataset.focusAutoGuard) {
          lastGuard = item;
        }
      } else if (item.lockItem) {
        if (i !== startIndex) {
          return;
        }
        lastGuard = null;
      } else {
        break;
      }
    } while ((i += step) !== end);
    if (lastGuard) {
      lastGuard.node.tabIndex = 0;
    }
  }
  var extractRef = function extractRef2(ref) {
    return ref && "current" in ref ? ref.current : ref;
  };
  var focusWasOutside = function focusWasOutside2(crossFrameOption) {
    if (crossFrameOption) {
      return Boolean(focusWasOutsideWindow);
    }
    return focusWasOutsideWindow === "meanwhile";
  };
  var activateTrap = function activateTrap2() {
    var result = false;
    if (lastActiveTrap) {
      var _lastActiveTrap = lastActiveTrap, observed = _lastActiveTrap.observed, persistentFocus = _lastActiveTrap.persistentFocus, autoFocus = _lastActiveTrap.autoFocus, shards = _lastActiveTrap.shards, crossFrame = _lastActiveTrap.crossFrame;
      var workingNode = observed || lastPortaledElement && lastPortaledElement.portaledElement;
      var activeElement = document && document.activeElement;
      if (workingNode) {
        var workingArea = [workingNode].concat(shards.map(extractRef).filter(Boolean));
        if (!activeElement || focusWhitelisted(activeElement)) {
          if (persistentFocus || focusWasOutside(crossFrame) || !isFreeFocus() || !lastActiveFocus && autoFocus) {
            if (workingNode && !(focusInside(workingArea) || focusIsPortaledPair(activeElement, workingNode))) {
              if (document && !lastActiveFocus && activeElement && !autoFocus) {
                if (activeElement.blur) {
                  activeElement.blur();
                }
                document.body.focus();
              } else {
                result = es2015_default(workingArea, lastActiveFocus);
                lastPortaledElement = {};
              }
            }
            focusWasOutsideWindow = false;
            lastActiveFocus = document && document.activeElement;
          }
        }
        if (document) {
          var newActiveElement = document && document.activeElement;
          var allNodes = getFocusabledIn(workingArea);
          var focusedIndex = allNodes.map(function(_ref2) {
            var node3 = _ref2.node;
            return node3;
          }).indexOf(newActiveElement);
          if (focusedIndex > -1) {
            allNodes.filter(function(_ref2) {
              var guard = _ref2.guard, node3 = _ref2.node;
              return guard && node3.dataset.focusAutoGuard;
            }).forEach(function(_ref3) {
              var node3 = _ref3.node;
              return node3.removeAttribute("tabIndex");
            });
            autoGuard(focusedIndex, allNodes.length, 1, allNodes);
            autoGuard(focusedIndex, -1, -1, allNodes);
          }
        }
      }
    }
    return result;
  };
  var onTrap = function onTrap2(event) {
    if (activateTrap() && event) {
      event.stopPropagation();
      event.preventDefault();
    }
  };
  var onBlur = function onBlur2() {
    return deferAction(activateTrap);
  };
  var onFocus = function onFocus2(event) {
    var source = event.target;
    var currentNode = event.currentTarget;
    if (!currentNode.contains(source)) {
      recordPortal(currentNode, source);
    }
  };
  var FocusWatcher = function FocusWatcher2() {
    return null;
  };
  var FocusTrap = function FocusTrap2(_ref4) {
    var children = _ref4.children;
    return /* @__PURE__ */ React28.createElement("div", {
      onBlur,
      onFocus
    }, children);
  };
  FocusTrap.propTypes = true ? {
    children: import_prop_types3.default.node.isRequired
  } : {};
  var onWindowBlur = function onWindowBlur2() {
    focusWasOutsideWindow = "just";
    setTimeout(function() {
      focusWasOutsideWindow = "meanwhile";
    }, 0);
  };
  var attachHandler = function attachHandler2() {
    document.addEventListener("focusin", onTrap, true);
    document.addEventListener("focusout", onBlur);
    window.addEventListener("blur", onWindowBlur);
  };
  var detachHandler = function detachHandler2() {
    document.removeEventListener("focusin", onTrap, true);
    document.removeEventListener("focusout", onBlur);
    window.removeEventListener("blur", onWindowBlur);
  };
  function reducePropsToState(propsList) {
    return propsList.filter(function(_ref5) {
      var disabled2 = _ref5.disabled;
      return !disabled2;
    });
  }
  function handleStateChangeOnClient(traps) {
    var trap = traps.slice(-1)[0];
    if (trap && !lastActiveTrap) {
      attachHandler();
    }
    var lastTrap = lastActiveTrap;
    var sameTrap = lastTrap && trap && trap.id === lastTrap.id;
    lastActiveTrap = trap;
    if (lastTrap && !sameTrap) {
      lastTrap.onDeactivation();
      if (!traps.filter(function(_ref6) {
        var id2 = _ref6.id;
        return id2 === lastTrap.id;
      }).length) {
        lastTrap.returnFocus(!trap);
      }
    }
    if (trap) {
      lastActiveFocus = null;
      if (!sameTrap || lastTrap.observed !== trap.observed) {
        trap.onActivation();
      }
      activateTrap(true);
      deferAction(activateTrap);
    } else {
      detachHandler();
      lastActiveFocus = null;
    }
  }
  mediumFocus.assignSyncMedium(onFocus);
  mediumBlur.assignMedium(onBlur);
  mediumEffect.assignMedium(function(cb2) {
    return cb2({
      moveFocusInside: es2015_default,
      focusInside
    });
  });
  var Trap_default = index_es_default(reducePropsToState, handleStateChangeOnClient)(FocusWatcher);

  // node_modules/react-focus-lock/dist/es2015/Combination.js
  var FocusLockCombination = /* @__PURE__ */ React29.forwardRef(function FocusLockUICombination(props, ref) {
    return /* @__PURE__ */ React29.createElement(Lock_default, _extends({
      sideCar: Trap_default,
      ref
    }, props));
  });
  var _ref = Lock_default.propTypes || {};
  var sideCar = _ref.sideCar;
  var propTypes = _objectWithoutPropertiesLoose11(_ref, ["sideCar"]);
  FocusLockCombination.propTypes = true ? propTypes : {};
  var Combination_default = FocusLockCombination;

  // node_modules/react-focus-lock/dist/es2015/index.js
  var es2015_default2 = Combination_default;

  // node_modules/@chakra-ui/focus-lock/dist/chakra-ui-focus-lock.esm.js
  var FocusLock2 = function FocusLock3(props) {
    var initialFocusRef = props.initialFocusRef, finalFocusRef = props.finalFocusRef, contentRef = props.contentRef, restoreFocus = props.restoreFocus, children = props.children, isDisabled2 = props.isDisabled, autoFocus = props.autoFocus, persistentFocus = props.persistentFocus, lockFocusAcrossFrames = props.lockFocusAcrossFrames;
    var onActivation = React30.useCallback(function() {
      if (initialFocusRef != null && initialFocusRef.current) {
        initialFocusRef.current.focus();
      } else if (contentRef != null && contentRef.current) {
        var focusables = getAllFocusable(contentRef.current);
        if (focusables.length === 0) {
          focus(contentRef.current, {
            nextTick: true
          });
        }
      }
    }, [initialFocusRef, contentRef]);
    var onDeactivation = React30.useCallback(function() {
      var _finalFocusRef$curren;
      finalFocusRef == null ? void 0 : (_finalFocusRef$curren = finalFocusRef.current) == null ? void 0 : _finalFocusRef$curren.focus();
    }, [finalFocusRef]);
    var returnFocus = restoreFocus && !finalFocusRef;
    return /* @__PURE__ */ React30.createElement(es2015_default2, {
      crossFrame: lockFocusAcrossFrames,
      persistentFocus,
      autoFocus,
      disabled: isDisabled2,
      onActivation,
      onDeactivation,
      returnFocus
    }, children);
  };
  if (__DEV__) {
    FocusLock2.displayName = "FocusLock";
  }

  // node_modules/@chakra-ui/modal/dist/chakra-ui-modal.esm.js
  var React36 = __toESM(require_react());
  var import_react48 = __toESM(require_react());

  // node_modules/react-remove-scroll/node_modules/tslib/modules/index.js
  var import_tslib45 = __toESM(require_tslib3(), 1);
  var {
    __extends: __extends3,
    __assign: __assign3,
    __rest: __rest3,
    __decorate: __decorate3,
    __param: __param3,
    __metadata: __metadata3,
    __awaiter: __awaiter3,
    __generator: __generator3,
    __exportStar: __exportStar3,
    __createBinding: __createBinding3,
    __values: __values3,
    __read: __read3,
    __spread: __spread3,
    __spreadArrays: __spreadArrays3,
    __await: __await3,
    __asyncGenerator: __asyncGenerator3,
    __asyncDelegator: __asyncDelegator3,
    __asyncValues: __asyncValues3,
    __makeTemplateObject: __makeTemplateObject3,
    __importStar: __importStar3,
    __importDefault: __importDefault3,
    __classPrivateFieldGet: __classPrivateFieldGet3,
    __classPrivateFieldSet: __classPrivateFieldSet3
  } = import_tslib45.default;

  // node_modules/react-remove-scroll/dist/es2015/Combination.js
  var React35 = __toESM(require_react());

  // node_modules/react-remove-scroll/dist/es2015/UI.js
  var React31 = __toESM(require_react());

  // node_modules/react-remove-scroll-bar/dist/es2015/constants.js
  var zeroRightClassName = "right-scroll-bar-position";
  var fullWidthClassName = "width-before-scroll-bar";
  var noScrollbarsClassName = "with-scroll-bars-hidden";
  var removedBarSizeVariable = "--removed-body-scroll-bar-size";

  // node_modules/react-remove-scroll/dist/es2015/medium.js
  var effectCar = createSidecarMedium();

  // node_modules/react-remove-scroll/dist/es2015/UI.js
  var nothing = function() {
    return;
  };
  var RemoveScroll = React31.forwardRef(function(props, parentRef) {
    var ref = React31.useRef(null);
    var _a = React31.useState({
      onScrollCapture: nothing,
      onWheelCapture: nothing,
      onTouchMoveCapture: nothing
    }), callbacks = _a[0], setCallbacks = _a[1];
    var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar2 = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b = props.as, Container4 = _b === void 0 ? "div" : _b, rest = __rest3(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as"]);
    var SideCar2 = sideCar2;
    var containerRef = useMergeRefs2([
      ref,
      parentRef
    ]);
    var containerProps = __assign3({}, rest, callbacks);
    return React31.createElement(React31.Fragment, null, enabled && React31.createElement(SideCar2, { sideCar: effectCar, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref }), forwardProps ? React31.cloneElement(React31.Children.only(children), __assign3({}, containerProps, { ref: containerRef })) : React31.createElement(Container4, __assign3({}, containerProps, { className, ref: containerRef }), children));
  });
  RemoveScroll.defaultProps = {
    enabled: true,
    removeScrollBar: true,
    inert: false
  };
  RemoveScroll.classNames = {
    fullWidth: fullWidthClassName,
    zeroRight: zeroRightClassName
  };

  // node_modules/react-remove-scroll/dist/es2015/SideEffect.js
  var React34 = __toESM(require_react());

  // node_modules/react-remove-scroll-bar/dist/es2015/component.js
  var React33 = __toESM(require_react());

  // node_modules/react-style-singleton/dist/es2015/hook.js
  var React32 = __toESM(require_react());

  // node_modules/get-nonce/dist/es2015/index.js
  var currentNonce;
  var getNonce = function() {
    if (currentNonce) {
      return currentNonce;
    }
    if (typeof __webpack_nonce__ !== "undefined") {
      return __webpack_nonce__;
    }
    return void 0;
  };

  // node_modules/react-style-singleton/dist/es2015/singleton.js
  function makeStyleTag() {
    if (!document)
      return null;
    var tag2 = document.createElement("style");
    tag2.type = "text/css";
    var nonce = getNonce();
    if (nonce) {
      tag2.setAttribute("nonce", nonce);
    }
    return tag2;
  }
  function injectStyles(tag2, css4) {
    if (tag2.styleSheet) {
      tag2.styleSheet.cssText = css4;
    } else {
      tag2.appendChild(document.createTextNode(css4));
    }
  }
  function insertStyleTag(tag2) {
    var head = document.head || document.getElementsByTagName("head")[0];
    head.appendChild(tag2);
  }
  var stylesheetSingleton = function() {
    var counter2 = 0;
    var stylesheet = null;
    return {
      add: function(style) {
        if (counter2 == 0) {
          if (stylesheet = makeStyleTag()) {
            injectStyles(stylesheet, style);
            insertStyleTag(stylesheet);
          }
        }
        counter2++;
      },
      remove: function() {
        counter2--;
        if (!counter2 && stylesheet) {
          stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
          stylesheet = null;
        }
      }
    };
  };

  // node_modules/react-style-singleton/dist/es2015/hook.js
  var styleHookSingleton = function() {
    var sheet = stylesheetSingleton();
    return function(styles2) {
      React32.useEffect(function() {
        sheet.add(styles2);
        return function() {
          sheet.remove();
        };
      }, []);
    };
  };

  // node_modules/react-style-singleton/dist/es2015/component.js
  var styleSingleton = function() {
    var useStyle2 = styleHookSingleton();
    var Sheet = function(_a) {
      var styles2 = _a.styles;
      useStyle2(styles2);
      return null;
    };
    return Sheet;
  };

  // node_modules/react-remove-scroll-bar/dist/es2015/utils.js
  var zeroGap = {
    left: 0,
    top: 0,
    right: 0,
    gap: 0
  };
  var parse3 = function(x) {
    return parseInt(x || "", 10) || 0;
  };
  var getOffset = function(gapMode) {
    var cs = window.getComputedStyle(document.body);
    var left = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
    var top = cs[gapMode === "padding" ? "paddingTop" : "marginTop"];
    var right = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
    return [
      parse3(left),
      parse3(top),
      parse3(right)
    ];
  };
  var getGapWidth = function(gapMode) {
    if (gapMode === void 0) {
      gapMode = "margin";
    }
    if (typeof window === "undefined") {
      return zeroGap;
    }
    var offsets = getOffset(gapMode);
    var documentWidth = document.documentElement.clientWidth;
    var windowWidth = window.innerWidth;
    return {
      left: offsets[0],
      top: offsets[1],
      right: offsets[2],
      gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
    };
  };

  // node_modules/react-remove-scroll-bar/dist/es2015/component.js
  var Style = styleSingleton();
  var getStyles = function(_a, allowRelative, gapMode, important) {
    var left = _a.left, top = _a.top, right = _a.right, gap = _a.gap;
    if (gapMode === void 0) {
      gapMode = "margin";
    }
    return "\n  ." + noScrollbarsClassName + " {\n   overflow: hidden " + important + ";\n   padding-right: " + gap + "px " + important + ";\n  }\n  body {\n    overflow: hidden " + important + ";\n    " + [
      allowRelative && "position: relative " + important + ";",
      gapMode === "margin" && "\n    padding-left: " + left + "px;\n    padding-top: " + top + "px;\n    padding-right: " + right + "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: " + gap + "px " + important + ";\n    ",
      gapMode === "padding" && "padding-right: " + gap + "px " + important + ";"
    ].filter(Boolean).join("") + "\n  }\n  \n  ." + zeroRightClassName + " {\n    right: " + gap + "px " + important + ";\n  }\n  \n  ." + fullWidthClassName + " {\n    margin-right: " + gap + "px " + important + ";\n  }\n  \n  ." + zeroRightClassName + " ." + zeroRightClassName + " {\n    right: 0 " + important + ";\n  }\n  \n  ." + fullWidthClassName + " ." + fullWidthClassName + " {\n    margin-right: 0 " + important + ";\n  }\n  \n  body {\n    " + removedBarSizeVariable + ": " + gap + "px;\n  }\n";
  };
  var RemoveScrollBar = function(props) {
    var _a = React33.useState(getGapWidth(props.gapMode)), gap = _a[0], setGap = _a[1];
    React33.useEffect(function() {
      setGap(getGapWidth(props.gapMode));
    }, [props.gapMode]);
    var noRelative = props.noRelative, noImportant = props.noImportant, _b = props.gapMode, gapMode = _b === void 0 ? "margin" : _b;
    return React33.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "") });
  };

  // node_modules/react-remove-scroll/dist/es2015/handleScroll.js
  var elementCouldBeVScrolled = function(node3) {
    var styles2 = window.getComputedStyle(node3);
    return styles2.overflowY !== "hidden" && !(styles2.overflowY === styles2.overflowX && styles2.overflowY === "visible");
  };
  var elementCouldBeHScrolled = function(node3) {
    var styles2 = window.getComputedStyle(node3);
    return styles2.overflowX !== "hidden" && !(styles2.overflowY === styles2.overflowX && styles2.overflowX === "visible");
  };
  var locationCouldBeScrolled = function(axis, node3) {
    var current = node3;
    do {
      var isScrollable = elementCouldBeScrolled(axis, current);
      if (isScrollable) {
        var _a = getScrollVariables(axis, current), s = _a[1], d = _a[2];
        if (s > d) {
          return true;
        }
      }
      current = current.parentNode;
    } while (current && current !== document.body);
    return false;
  };
  var getVScrollVariables = function(_a) {
    var scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;
    return [scrollTop, scrollHeight, clientHeight];
  };
  var getHScrollVariables = function(_a) {
    var scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;
    return [scrollLeft, scrollWidth, clientWidth];
  };
  var elementCouldBeScrolled = function(axis, node3) {
    return axis === "v" ? elementCouldBeVScrolled(node3) : elementCouldBeHScrolled(node3);
  };
  var getScrollVariables = function(axis, node3) {
    return axis === "v" ? getVScrollVariables(node3) : getHScrollVariables(node3);
  };
  var handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
    var delta = sourceDelta;
    var target = event.target;
    var targetInLock = endTarget.contains(target);
    var shouldCancelScroll = false;
    var isDeltaPositive = delta > 0;
    var availableScroll = 0;
    var availableScrollTop = 0;
    do {
      var _a = getScrollVariables(axis, target), position3 = _a[0], scroll_1 = _a[1], capacity = _a[2];
      var elementScroll = scroll_1 - capacity - position3;
      if (position3 || elementScroll) {
        if (elementCouldBeScrolled(axis, target)) {
          availableScroll += elementScroll;
          availableScrollTop += position3;
        }
      }
      target = target.parentNode;
    } while (!targetInLock && target !== document.body || targetInLock && (endTarget.contains(target) || endTarget === target));
    if (isDeltaPositive && (noOverscroll && availableScroll === 0 || !noOverscroll && delta > availableScroll)) {
      shouldCancelScroll = true;
    } else if (!isDeltaPositive && (noOverscroll && availableScrollTop === 0 || !noOverscroll && -delta > availableScrollTop)) {
      shouldCancelScroll = true;
    }
    return shouldCancelScroll;
  };

  // node_modules/react-remove-scroll/dist/es2015/aggresiveCapture.js
  var passiveSupported = false;
  if (typeof window !== "undefined") {
    try {
      options = Object.defineProperty({}, "passive", {
        get: function() {
          passiveSupported = true;
          return true;
        }
      });
      window.addEventListener("test", options, options);
      window.removeEventListener("test", options, options);
    } catch (err) {
      passiveSupported = false;
    }
  }
  var options;
  var nonPassive = passiveSupported ? { passive: false } : false;

  // node_modules/react-remove-scroll/dist/es2015/SideEffect.js
  var getTouchXY = function(event) {
    return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
  };
  var getDeltaXY = function(event) {
    return [event.deltaX, event.deltaY];
  };
  var extractRef3 = function(ref) {
    return ref && "current" in ref ? ref.current : ref;
  };
  var deltaCompare = function(x, y) {
    return x[0] === y[0] && x[1] === y[1];
  };
  var generateStyle = function(id2) {
    return "\n  .block-interactivity-" + id2 + " {pointer-events: none;}\n  .allow-interactivity-" + id2 + " {pointer-events: all;}\n";
  };
  var idCounter = 0;
  var lockStack = [];
  function RemoveScrollSideCar(props) {
    var shouldPreventQueue = React34.useRef([]);
    var touchStartRef = React34.useRef([0, 0]);
    var activeAxis = React34.useRef();
    var id2 = React34.useState(idCounter++)[0];
    var Style2 = React34.useState(function() {
      return styleSingleton();
    })[0];
    var lastProps = React34.useRef(props);
    React34.useEffect(function() {
      lastProps.current = props;
    }, [props]);
    React34.useEffect(function() {
      if (props.inert) {
        document.body.classList.add("block-interactivity-" + id2);
        var allow_1 = [
          props.lockRef.current
        ].concat((props.shards || []).map(extractRef3)).filter(Boolean);
        allow_1.forEach(function(el) {
          return el.classList.add("allow-interactivity-" + id2);
        });
        return function() {
          document.body.classList.remove("block-interactivity-" + id2);
          allow_1.forEach(function(el) {
            return el.classList.remove("allow-interactivity-" + id2);
          });
        };
      }
      return;
    }, [props.inert, props.lockRef.current, props.shards]);
    var shouldCancelEvent = React34.useCallback(function(event, parent) {
      if ("touches" in event && event.touches.length === 2) {
        return !lastProps.current.allowPinchZoom;
      }
      var touch = getTouchXY(event);
      var touchStart = touchStartRef.current;
      var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
      var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
      var currentAxis;
      var target = event.target;
      var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
      var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
      if (!canBeScrolledInMainDirection) {
        return true;
      }
      if (canBeScrolledInMainDirection) {
        currentAxis = moveDirection;
      } else {
        currentAxis = moveDirection === "v" ? "h" : "v";
        canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
      }
      if (!canBeScrolledInMainDirection) {
        return false;
      }
      if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) {
        activeAxis.current = currentAxis;
      }
      if (!currentAxis) {
        return true;
      }
      var cancelingAxis = activeAxis.current || currentAxis;
      return handleScroll(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, true);
    }, []);
    var shouldPrevent = React34.useCallback(function(_event) {
      var event = _event;
      if (!lockStack.length || lockStack[lockStack.length - 1] !== Style2) {
        return;
      }
      var delta = "deltaY" in event ? getDeltaXY(event) : getTouchXY(event);
      var sourceEvent = shouldPreventQueue.current.filter(function(e) {
        return e.name === event.type && e.target === event.target && deltaCompare(e.delta, delta);
      })[0];
      if (sourceEvent && sourceEvent.should) {
        event.preventDefault();
        return;
      }
      if (!sourceEvent) {
        var shardNodes = (lastProps.current.shards || []).map(extractRef3).filter(Boolean).filter(function(node3) {
          return node3.contains(event.target);
        });
        var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
        if (shouldStop) {
          event.preventDefault();
        }
      }
    }, []);
    var shouldCancel = React34.useCallback(function(name, delta, target, should) {
      var event = { name, delta, target, should };
      shouldPreventQueue.current.push(event);
      setTimeout(function() {
        shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e) {
          return e !== event;
        });
      }, 1);
    }, []);
    var scrollTouchStart = React34.useCallback(function(event) {
      touchStartRef.current = getTouchXY(event);
      activeAxis.current = void 0;
    }, []);
    var scrollWheel = React34.useCallback(function(event) {
      shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
    }, []);
    var scrollTouchMove = React34.useCallback(function(event) {
      shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
    }, []);
    React34.useEffect(function() {
      lockStack.push(Style2);
      props.setCallbacks({
        onScrollCapture: scrollWheel,
        onWheelCapture: scrollWheel,
        onTouchMoveCapture: scrollTouchMove
      });
      document.addEventListener("wheel", shouldPrevent, nonPassive);
      document.addEventListener("touchmove", shouldPrevent, nonPassive);
      document.addEventListener("touchstart", scrollTouchStart, nonPassive);
      return function() {
        lockStack = lockStack.filter(function(inst) {
          return inst !== Style2;
        });
        document.removeEventListener("wheel", shouldPrevent, nonPassive);
        document.removeEventListener("touchmove", shouldPrevent, nonPassive);
        document.removeEventListener("touchstart", scrollTouchStart, nonPassive);
      };
    }, []);
    var removeScrollBar = props.removeScrollBar, inert = props.inert;
    return React34.createElement(React34.Fragment, null, inert ? React34.createElement(Style2, { styles: generateStyle(id2) }) : null, removeScrollBar ? React34.createElement(RemoveScrollBar, { gapMode: "margin" }) : null);
  }

  // node_modules/react-remove-scroll/dist/es2015/sidecar.js
  var sidecar_default = exportSidecar(effectCar, RemoveScrollSideCar);

  // node_modules/react-remove-scroll/dist/es2015/Combination.js
  var ReactRemoveScroll = React35.forwardRef(function(props, ref) {
    return React35.createElement(RemoveScroll, __assign3({}, props, { ref, sideCar: sidecar_default }));
  });
  ReactRemoveScroll.classNames = RemoveScroll.classNames;
  var Combination_default2 = ReactRemoveScroll;

  // node_modules/aria-hidden/dist/es2015/index.js
  var getDefaultParent = function(originalTarget) {
    if (typeof document === "undefined") {
      return null;
    }
    var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
    return sampleTarget.ownerDocument.body;
  };
  var counterMap = /* @__PURE__ */ new WeakMap();
  var uncontrolledNodes = /* @__PURE__ */ new WeakMap();
  var markerMap = {};
  var lockCount = 0;
  var hideOthers = function(originalTarget, parentNode, markerName) {
    if (parentNode === void 0) {
      parentNode = getDefaultParent(originalTarget);
    }
    if (markerName === void 0) {
      markerName = "data-aria-hidden";
    }
    var targets = Array.isArray(originalTarget) ? originalTarget : [originalTarget];
    if (!markerMap[markerName]) {
      markerMap[markerName] = /* @__PURE__ */ new WeakMap();
    }
    var markerCounter = markerMap[markerName];
    var hiddenNodes = [];
    var elementsToKeep = /* @__PURE__ */ new Set();
    var keep = function(el) {
      if (!el || elementsToKeep.has(el)) {
        return;
      }
      elementsToKeep.add(el);
      keep(el.parentNode);
    };
    targets.forEach(keep);
    var deep = function(parent) {
      if (!parent || targets.indexOf(parent) >= 0) {
        return;
      }
      Array.prototype.forEach.call(parent.children, function(node3) {
        if (elementsToKeep.has(node3)) {
          deep(node3);
        } else {
          var attr = node3.getAttribute("aria-hidden");
          var alreadyHidden = attr !== null && attr !== "false";
          var counterValue = (counterMap.get(node3) || 0) + 1;
          var markerValue = (markerCounter.get(node3) || 0) + 1;
          counterMap.set(node3, counterValue);
          markerCounter.set(node3, markerValue);
          hiddenNodes.push(node3);
          if (counterValue === 1 && alreadyHidden) {
            uncontrolledNodes.set(node3, true);
          }
          if (markerValue === 1) {
            node3.setAttribute(markerName, "true");
          }
          if (!alreadyHidden) {
            node3.setAttribute("aria-hidden", "true");
          }
        }
      });
    };
    deep(parentNode);
    elementsToKeep.clear();
    lockCount++;
    return function() {
      hiddenNodes.forEach(function(node3) {
        var counterValue = counterMap.get(node3) - 1;
        var markerValue = markerCounter.get(node3) - 1;
        counterMap.set(node3, counterValue);
        markerCounter.set(node3, markerValue);
        if (!counterValue) {
          if (!uncontrolledNodes.has(node3)) {
            node3.removeAttribute("aria-hidden");
          }
          uncontrolledNodes.delete(node3);
        }
        if (!markerValue) {
          node3.removeAttribute(markerName);
        }
      });
      lockCount--;
      if (!lockCount) {
        counterMap = /* @__PURE__ */ new WeakMap();
        counterMap = /* @__PURE__ */ new WeakMap();
        uncontrolledNodes = /* @__PURE__ */ new WeakMap();
        markerMap = {};
      }
    };
  };

  // node_modules/@chakra-ui/modal/dist/chakra-ui-modal.esm.js
  function _objectWithoutPropertiesLoose12(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function _extends16() {
    _extends16 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends16.apply(this, arguments);
  }
  var _excluded$34 = ["preset"];
  var transitions = {
    slideInBottom: _extends16({}, slideFadeConfig, {
      custom: {
        offsetY: 16,
        reverse: true
      }
    }),
    slideInRight: _extends16({}, slideFadeConfig, {
      custom: {
        offsetX: 16,
        reverse: true
      }
    }),
    scale: _extends16({}, scaleFadeConfig, {
      custom: {
        initialScale: 0.95,
        reverse: true
      }
    }),
    none: {}
  };
  var Motion = chakra(motion.section);
  var ModalTransition = /* @__PURE__ */ React36.forwardRef(function(props, ref) {
    var preset = props.preset, rest = _objectWithoutPropertiesLoose12(props, _excluded$34);
    var motionProps = transitions[preset];
    return /* @__PURE__ */ React36.createElement(Motion, _extends16({
      ref
    }, motionProps, rest));
  });
  var ModalManager = /* @__PURE__ */ function() {
    function ModalManager2() {
      this.modals = void 0;
      this.modals = [];
    }
    var _proto = ModalManager2.prototype;
    _proto.add = function add4(modal2) {
      this.modals.push(modal2);
    };
    _proto.remove = function remove2(modal2) {
      this.modals = this.modals.filter(function(_modal) {
        return _modal !== modal2;
      });
    };
    _proto.isTopModal = function isTopModal(modal2) {
      var topmostModal = this.modals[this.modals.length - 1];
      return topmostModal === modal2;
    };
    return ModalManager2;
  }();
  var manager = new ModalManager();
  function useModalManager(ref, isOpen) {
    (0, import_react48.useEffect)(function() {
      if (isOpen) {
        manager.add(ref);
      }
      return function() {
        manager.remove(ref);
      };
    }, [isOpen, ref]);
  }
  function useModal(props) {
    var isOpen = props.isOpen, onClose = props.onClose, id2 = props.id, _props$closeOnOverlay = props.closeOnOverlayClick, closeOnOverlayClick = _props$closeOnOverlay === void 0 ? true : _props$closeOnOverlay, _props$closeOnEsc = props.closeOnEsc, closeOnEsc = _props$closeOnEsc === void 0 ? true : _props$closeOnEsc, _props$useInert = props.useInert, useInert = _props$useInert === void 0 ? true : _props$useInert, onOverlayClickProp = props.onOverlayClick, onEsc = props.onEsc;
    var dialogRef = (0, import_react48.useRef)(null);
    var overlayRef = (0, import_react48.useRef)(null);
    var _useIds = useIds(id2, "chakra-modal", "chakra-modal--header", "chakra-modal--body"), dialogId = _useIds[0], headerId = _useIds[1], bodyId = _useIds[2];
    useAriaHidden(dialogRef, isOpen && useInert);
    useModalManager(dialogRef, isOpen);
    var mouseDownTarget = (0, import_react48.useRef)(null);
    var onMouseDown = (0, import_react48.useCallback)(function(event) {
      mouseDownTarget.current = event.target;
    }, []);
    var onKeyDown = (0, import_react48.useCallback)(function(event) {
      if (event.key === "Escape") {
        event.stopPropagation();
        if (closeOnEsc) {
          onClose == null ? void 0 : onClose();
        }
        onEsc == null ? void 0 : onEsc();
      }
    }, [closeOnEsc, onClose, onEsc]);
    var _useState = (0, import_react48.useState)(false), headerMounted = _useState[0], setHeaderMounted = _useState[1];
    var _useState2 = (0, import_react48.useState)(false), bodyMounted = _useState2[0], setBodyMounted = _useState2[1];
    var getDialogProps = (0, import_react48.useCallback)(function(props2, ref) {
      if (props2 === void 0) {
        props2 = {};
      }
      if (ref === void 0) {
        ref = null;
      }
      return _extends16({
        role: "dialog"
      }, props2, {
        ref: mergeRefs(ref, dialogRef),
        id: dialogId,
        tabIndex: -1,
        "aria-modal": true,
        "aria-labelledby": headerMounted ? headerId : void 0,
        "aria-describedby": bodyMounted ? bodyId : void 0,
        onClick: callAllHandlers(props2.onClick, function(event) {
          return event.stopPropagation();
        })
      });
    }, [bodyId, bodyMounted, dialogId, headerId, headerMounted]);
    var onOverlayClick = (0, import_react48.useCallback)(function(event) {
      event.stopPropagation();
      if (mouseDownTarget.current !== event.target)
        return;
      if (!manager.isTopModal(dialogRef))
        return;
      if (closeOnOverlayClick) {
        onClose == null ? void 0 : onClose();
      }
      onOverlayClickProp == null ? void 0 : onOverlayClickProp();
    }, [onClose, closeOnOverlayClick, onOverlayClickProp]);
    var getDialogContainerProps = (0, import_react48.useCallback)(function(props2, ref) {
      if (props2 === void 0) {
        props2 = {};
      }
      if (ref === void 0) {
        ref = null;
      }
      return _extends16({}, props2, {
        ref: mergeRefs(ref, overlayRef),
        onClick: callAllHandlers(props2.onClick, onOverlayClick),
        onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
        onMouseDown: callAllHandlers(props2.onMouseDown, onMouseDown)
      });
    }, [onKeyDown, onMouseDown, onOverlayClick]);
    return {
      isOpen,
      onClose,
      headerId,
      bodyId,
      setBodyMounted,
      setHeaderMounted,
      dialogRef,
      overlayRef,
      getDialogProps,
      getDialogContainerProps
    };
  }
  function useAriaHidden(ref, shouldHide) {
    var currentElement = ref.current;
    (0, import_react48.useEffect)(function() {
      if (!ref.current || !shouldHide)
        return void 0;
      return hideOthers(ref.current);
    }, [shouldHide, ref, currentElement]);
  }
  var _excluded$24 = ["className", "children", "containerProps"];
  var _excluded2$12 = ["className", "transition"];
  var _excluded33 = ["className"];
  var _excluded42 = ["className"];
  var _excluded52 = ["className"];
  var _excluded62 = ["onClick", "className"];
  var _createContext$12 = createContext3({
    strict: true,
    name: "ModalContext",
    errorMessage: "useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`"
  });
  var ModalContextProvider = _createContext$12[0];
  var useModalContext = _createContext$12[1];
  var Modal = function Modal2(props) {
    var portalProps = props.portalProps, children = props.children, autoFocus = props.autoFocus, trapFocus = props.trapFocus, initialFocusRef = props.initialFocusRef, finalFocusRef = props.finalFocusRef, returnFocusOnClose = props.returnFocusOnClose, blockScrollOnMount = props.blockScrollOnMount, allowPinchZoom = props.allowPinchZoom, preserveScrollBarGap = props.preserveScrollBarGap, motionPreset = props.motionPreset, lockFocusAcrossFrames = props.lockFocusAcrossFrames, onCloseComplete = props.onCloseComplete;
    var styles2 = useMultiStyleConfig("Modal", props);
    var modal2 = useModal(props);
    var context = _extends16({}, modal2, {
      autoFocus,
      trapFocus,
      initialFocusRef,
      finalFocusRef,
      returnFocusOnClose,
      blockScrollOnMount,
      allowPinchZoom,
      preserveScrollBarGap,
      motionPreset,
      lockFocusAcrossFrames
    });
    return /* @__PURE__ */ React36.createElement(ModalContextProvider, {
      value: context
    }, /* @__PURE__ */ React36.createElement(StylesProvider, {
      value: styles2
    }, /* @__PURE__ */ React36.createElement(AnimatePresence, {
      onExitComplete: onCloseComplete
    }, context.isOpen && /* @__PURE__ */ React36.createElement(Portal, portalProps, children))));
  };
  Modal.defaultProps = {
    lockFocusAcrossFrames: true,
    returnFocusOnClose: true,
    scrollBehavior: "outside",
    trapFocus: true,
    autoFocus: true,
    blockScrollOnMount: true,
    allowPinchZoom: false,
    motionPreset: "scale"
  };
  if (__DEV__) {
    Modal.displayName = "Modal";
  }
  var MotionDiv = chakra(motion.div);
  var ModalContent = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var className = props.className, children = props.children, rootProps = props.containerProps, rest = _objectWithoutPropertiesLoose12(props, _excluded$24);
    var _useModalContext = useModalContext(), getDialogProps = _useModalContext.getDialogProps, getDialogContainerProps = _useModalContext.getDialogContainerProps;
    var dialogProps = getDialogProps(rest, ref);
    var containerProps = getDialogContainerProps(rootProps);
    var _className = cx("chakra-modal__content", className);
    var styles2 = useStyles();
    var dialogStyles = _extends16({
      display: "flex",
      flexDirection: "column",
      position: "relative",
      width: "100%",
      outline: 0
    }, styles2.dialog);
    var dialogContainerStyles = _extends16({
      display: "flex",
      width: "100vw",
      height: "100vh",
      "@supports(height: -webkit-fill-available)": {
        height: "-webkit-fill-available"
      },
      position: "fixed",
      left: 0,
      top: 0
    }, styles2.dialogContainer);
    var _useModalContext2 = useModalContext(), motionPreset = _useModalContext2.motionPreset;
    return /* @__PURE__ */ React36.createElement(ModalFocusScope, null, /* @__PURE__ */ React36.createElement(chakra.div, _extends16({}, containerProps, {
      className: "chakra-modal__content-container",
      tabIndex: -1,
      __css: dialogContainerStyles
    }), /* @__PURE__ */ React36.createElement(ModalTransition, _extends16({
      preset: motionPreset,
      className: _className
    }, dialogProps, {
      __css: dialogStyles
    }), children)));
  });
  if (__DEV__) {
    ModalContent.displayName = "ModalContent";
  }
  function ModalFocusScope(props) {
    var _useModalContext3 = useModalContext(), autoFocus = _useModalContext3.autoFocus, trapFocus = _useModalContext3.trapFocus, dialogRef = _useModalContext3.dialogRef, initialFocusRef = _useModalContext3.initialFocusRef, blockScrollOnMount = _useModalContext3.blockScrollOnMount, allowPinchZoom = _useModalContext3.allowPinchZoom, finalFocusRef = _useModalContext3.finalFocusRef, returnFocusOnClose = _useModalContext3.returnFocusOnClose, preserveScrollBarGap = _useModalContext3.preserveScrollBarGap, lockFocusAcrossFrames = _useModalContext3.lockFocusAcrossFrames;
    var _usePresence = usePresence(), isPresent2 = _usePresence[0], safeToRemove = _usePresence[1];
    React36.useEffect(function() {
      if (!isPresent2 && safeToRemove) {
        setTimeout(safeToRemove);
      }
    }, [isPresent2, safeToRemove]);
    return /* @__PURE__ */ React36.createElement(FocusLock2, {
      autoFocus,
      isDisabled: !trapFocus,
      initialFocusRef,
      finalFocusRef,
      restoreFocus: returnFocusOnClose,
      contentRef: dialogRef,
      lockFocusAcrossFrames
    }, /* @__PURE__ */ React36.createElement(Combination_default2, {
      removeScrollBar: !preserveScrollBarGap,
      allowPinchZoom,
      enabled: blockScrollOnMount,
      forwardProps: true
    }, props.children));
  }
  var ModalOverlay = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var className = props.className;
    props.transition;
    var rest = _objectWithoutPropertiesLoose12(props, _excluded2$12);
    var _className = cx("chakra-modal__overlay", className);
    var styles2 = useStyles();
    var overlayStyle = _extends16({
      pos: "fixed",
      left: "0",
      top: "0",
      w: "100vw",
      h: "100vh"
    }, styles2.overlay);
    var _useModalContext4 = useModalContext(), motionPreset = _useModalContext4.motionPreset;
    var motionProps = motionPreset === "none" ? {} : fadeConfig;
    return /* @__PURE__ */ React36.createElement(MotionDiv, _extends16({}, motionProps, {
      __css: overlayStyle,
      ref,
      className: _className
    }, rest));
  });
  if (__DEV__) {
    ModalOverlay.displayName = "ModalOverlay";
  }
  var ModalHeader = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var className = props.className, rest = _objectWithoutPropertiesLoose12(props, _excluded33);
    var _useModalContext5 = useModalContext(), headerId = _useModalContext5.headerId, setHeaderMounted = _useModalContext5.setHeaderMounted;
    React36.useEffect(function() {
      setHeaderMounted(true);
      return function() {
        return setHeaderMounted(false);
      };
    }, [setHeaderMounted]);
    var _className = cx("chakra-modal__header", className);
    var styles2 = useStyles();
    var headerStyles = _extends16({
      flex: 0
    }, styles2.header);
    return /* @__PURE__ */ React36.createElement(chakra.header, _extends16({
      ref,
      className: _className,
      id: headerId
    }, rest, {
      __css: headerStyles
    }));
  });
  if (__DEV__) {
    ModalHeader.displayName = "ModalHeader";
  }
  var ModalBody = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var className = props.className, rest = _objectWithoutPropertiesLoose12(props, _excluded42);
    var _useModalContext6 = useModalContext(), bodyId = _useModalContext6.bodyId, setBodyMounted = _useModalContext6.setBodyMounted;
    React36.useEffect(function() {
      setBodyMounted(true);
      return function() {
        return setBodyMounted(false);
      };
    }, [setBodyMounted]);
    var _className = cx("chakra-modal__body", className);
    var styles2 = useStyles();
    return /* @__PURE__ */ React36.createElement(chakra.div, _extends16({
      ref,
      className: _className,
      id: bodyId
    }, rest, {
      __css: styles2.body
    }));
  });
  if (__DEV__) {
    ModalBody.displayName = "ModalBody";
  }
  var ModalFooter = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var className = props.className, rest = _objectWithoutPropertiesLoose12(props, _excluded52);
    var _className = cx("chakra-modal__footer", className);
    var styles2 = useStyles();
    var footerStyles = _extends16({
      display: "flex",
      alignItems: "center",
      justifyContent: "flex-end"
    }, styles2.footer);
    return /* @__PURE__ */ React36.createElement(chakra.footer, _extends16({
      ref
    }, rest, {
      __css: footerStyles,
      className: _className
    }));
  });
  if (__DEV__) {
    ModalFooter.displayName = "ModalFooter";
  }
  var ModalCloseButton = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var onClick = props.onClick, className = props.className, rest = _objectWithoutPropertiesLoose12(props, _excluded62);
    var _useModalContext7 = useModalContext(), onClose = _useModalContext7.onClose;
    var _className = cx("chakra-modal__close-btn", className);
    var styles2 = useStyles();
    return /* @__PURE__ */ React36.createElement(CloseButton, _extends16({
      ref,
      __css: styles2.closeButton,
      className: _className,
      onClick: callAllHandlers(onClick, function(event) {
        event.stopPropagation();
        onClose();
      })
    }, rest));
  });
  if (__DEV__) {
    ModalCloseButton.displayName = "ModalCloseButton";
  }
  var _excluded23 = ["className", "children"];
  var _createContext6 = createContext3();
  var DrawerContextProvider = _createContext6[0];
  var useDrawerContext = _createContext6[1];
  var StyledSlide = chakra(Slide);
  var DrawerContent = /* @__PURE__ */ forwardRef3(function(props, ref) {
    var className = props.className, children = props.children, rest = _objectWithoutPropertiesLoose12(props, _excluded23);
    var _useModalContext = useModalContext(), getDialogProps = _useModalContext.getDialogProps, getDialogContainerProps = _useModalContext.getDialogContainerProps, isOpen = _useModalContext.isOpen;
    var dialogProps = getDialogProps(rest, ref);
    var containerProps = getDialogContainerProps();
    var _className = cx("chakra-modal__content", className);
    var styles2 = useStyles();
    var dialogStyles = _extends16({
      display: "flex",
      flexDirection: "column",
      position: "relative",
      width: "100%",
      outline: 0
    }, styles2.dialog);
    var dialogContainerStyles = _extends16({
      display: "flex",
      width: "100vw",
      height: "100vh",
      position: "fixed",
      left: 0,
      top: 0
    }, styles2.dialogContainer);
    var _useDrawerContext = useDrawerContext(), placement = _useDrawerContext.placement;
    return /* @__PURE__ */ React36.createElement(chakra.div, _extends16({}, containerProps, {
      className: "chakra-modal__content-container",
      __css: dialogContainerStyles
    }), /* @__PURE__ */ React36.createElement(ModalFocusScope, null, /* @__PURE__ */ React36.createElement(StyledSlide, _extends16({
      direction: placement,
      "in": isOpen,
      className: _className
    }, dialogProps, {
      __css: dialogStyles
    }), children)));
  });
  if (__DEV__) {
    DrawerContent.displayName = "DrawerContent";
  }

  // node_modules/@chakra-ui/toast/dist/chakra-ui-toast.esm.js
  var React38 = __toESM(require_react());
  var import_react_dom3 = __toESM(require_react_dom());

  // node_modules/@reach/alert/dist/reach-alert.esm.js
  var import_react51 = __toESM(require_react());
  var import_react_dom2 = __toESM(require_react_dom());

  // node_modules/@reach/visually-hidden/dist/reach-visually-hidden.esm.js
  var import_react49 = __toESM(require_react());
  var import_prop_types4 = __toESM(require_prop_types());
  function _extends17() {
    _extends17 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends17.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose13(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var VisuallyHidden2 = /* @__PURE__ */ (0, import_react49.forwardRef)(function VisuallyHidden3(_ref2, ref) {
    var _ref$as = _ref2.as, Comp = _ref$as === void 0 ? "span" : _ref$as, _ref$style = _ref2.style, style = _ref$style === void 0 ? {} : _ref$style, props = _objectWithoutPropertiesLoose13(_ref2, ["as", "style"]);
    return /* @__PURE__ */ (0, import_react49.createElement)(Comp, _extends17({
      ref,
      style: _extends17({
        border: 0,
        clip: "rect(0 0 0 0)",
        height: "1px",
        margin: "-1px",
        overflow: "hidden",
        padding: 0,
        position: "absolute",
        width: "1px",
        whiteSpace: "nowrap",
        wordWrap: "normal"
      }, style)
    }, props));
  });
  if (true) {
    VisuallyHidden2.displayName = "VisuallyHidden";
    VisuallyHidden2.propTypes = {
      as: import_prop_types4.default.any,
      children: import_prop_types4.default.node
    };
  }

  // node_modules/@reach/utils/dist/reach-utils.esm.js
  var React37 = __toESM(require_react());
  var import_react50 = __toESM(require_react());
  var import_warning = __toESM(require_warning());
  var checkedPkgs = {};
  var checkStyles = noop5;
  if (true) {
    _ref2 = typeof process !== "undefined" ? process : {
      env: {
        NODE_ENV: "development"
      }
    }, env = _ref2.env;
    checkStyles = function checkStyles2(packageName) {
      if (checkedPkgs[packageName])
        return;
      checkedPkgs[packageName] = true;
      if (env.NODE_ENV !== "test" && parseInt(window.getComputedStyle(document.body).getPropertyValue("--reach-" + packageName), 10) !== 1) {
        console.warn("@reach/" + packageName + ' styles not found. If you are using a bundler like webpack or parcel include this in the entry file of your app before any of your own styles:\n\n    import "@reach/' + packageName + `/styles.css";

  Otherwise you'll need to include them some other way:

    <link rel="stylesheet" type="text/css" href="node_modules/@reach/` + packageName + '/styles.css" />\n\n  For more information visit https://ui.reach.tech/styling.\n  ');
      }
    };
  }
  var _ref2;
  var env;
  var ponyfillGlobal = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : /* @__PURE__ */ Function("return this")();
  function assignRef4(ref, value) {
    if (ref == null)
      return;
    if (isFunction2(ref)) {
      ref(value);
    } else {
      try {
        ref.current = value;
      } catch (error2) {
        throw new Error('Cannot assign value "' + value + '" to ref "' + ref + '"');
      }
    }
  }
  function canUseDOM2() {
    return !!(typeof window !== "undefined" && window.document && window.document.createElement);
  }
  function forwardRefWithAs(render3) {
    return /* @__PURE__ */ (0, import_react50.forwardRef)(render3);
  }
  function getOwnerDocument2(element) {
    return canUseDOM2() ? element ? element.ownerDocument : document : null;
  }
  function isFunction2(value) {
    return !!(value && {}.toString.call(value) == "[object Function]");
  }
  function noop5() {
  }
  var useControlledSwitchWarning = noop5;
  if (true) {
    useControlledSwitchWarning = function useControlledSwitchWarning2(controlledValue, controlledPropName, componentName) {
      var controlledRef = (0, import_react50.useRef)(controlledValue != null);
      var nameCache = (0, import_react50.useRef)({
        componentName,
        controlledPropName
      });
      (0, import_react50.useEffect)(function() {
        nameCache.current = {
          componentName,
          controlledPropName
        };
      }, [componentName, controlledPropName]);
      (0, import_react50.useEffect)(function() {
        var wasControlled = controlledRef.current;
        var _nameCache$current = nameCache.current, componentName2 = _nameCache$current.componentName, controlledPropName2 = _nameCache$current.controlledPropName;
        var isControlled = controlledValue != null;
        if (wasControlled !== isControlled) {
          console.error("A component is changing an " + (wasControlled ? "" : "un") + "controlled `" + controlledPropName2 + "` state of " + componentName2 + " to be " + (wasControlled ? "un" : "") + "controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled " + componentName2 + " element for the lifetime of the component.\nMore info: https://fb.me/react-controlled-components");
        }
      }, [controlledValue]);
    };
  }
  var useCheckStyles = noop5;
  if (true) {
    useCheckStyles = function useCheckStyles2(pkg2) {
      var name = (0, import_react50.useRef)(pkg2);
      (0, import_react50.useEffect)(function() {
        return void (name.current = pkg2);
      }, [pkg2]);
      (0, import_react50.useEffect)(function() {
        return checkStyles(name.current);
      }, []);
    };
  }
  function useForkedRef() {
    for (var _len4 = arguments.length, refs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      refs[_key4] = arguments[_key4];
    }
    return (0, import_react50.useMemo)(function() {
      if (refs.every(function(ref) {
        return ref == null;
      })) {
        return null;
      }
      return function(node3) {
        refs.forEach(function(ref) {
          assignRef4(ref, node3);
        });
      };
    }, [].concat(refs));
  }
  function usePrevious(value) {
    var ref = (0, import_react50.useRef)(null);
    (0, import_react50.useEffect)(function() {
      ref.current = value;
    }, [value]);
    return ref.current;
  }
  var useStateLogger = noop5;
  if (true) {
    useStateLogger = function useStateLogger2(state2, DEBUG) {
      if (DEBUG === void 0) {
        DEBUG = false;
      }
      var debugRef = (0, import_react50.useRef)(DEBUG);
      (0, import_react50.useEffect)(function() {
        debugRef.current = DEBUG;
      }, [DEBUG]);
      (0, import_react50.useEffect)(function() {
        if (debugRef.current) {
          console.group("State Updated");
          console.log("%c" + state2, "font-weight: normal; font-size: 120%; font-style: italic;");
          console.groupEnd();
        }
      }, [state2]);
    };
  }

  // node_modules/@reach/alert/dist/reach-alert.esm.js
  var import_prop_types5 = __toESM(require_prop_types());
  function _extends18() {
    _extends18 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends18.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose14(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var keys2 = {
    polite: -1,
    assertive: -1
  };
  var elements = {
    polite: {},
    assertive: {}
  };
  var liveRegions = {
    polite: null,
    assertive: null
  };
  var renderTimer;
  var Alert2 = /* @__PURE__ */ forwardRefWithAs(function Alert3(_ref2, forwardedRef) {
    var _ref$as = _ref2.as, Comp = _ref$as === void 0 ? "div" : _ref$as, children = _ref2.children, _ref$type = _ref2.type, regionType = _ref$type === void 0 ? "polite" : _ref$type, props = _objectWithoutPropertiesLoose14(_ref2, ["as", "children", "type"]);
    var ownRef = (0, import_react51.useRef)(null);
    var ref = useForkedRef(forwardedRef, ownRef);
    var child = (0, import_react51.useMemo)(function() {
      return /* @__PURE__ */ (0, import_react51.createElement)(Comp, _extends18({}, props, {
        ref,
        "data-reach-alert": true
      }), children);
    }, [children, props]);
    useMirrorEffects(regionType, child, ownRef);
    return child;
  });
  if (true) {
    Alert2.displayName = "Alert";
    Alert2.propTypes = {
      children: import_prop_types5.default.node,
      type: /* @__PURE__ */ import_prop_types5.default.oneOf(["assertive", "polite"])
    };
  }
  function createMirror(type, doc2) {
    var key = ++keys2[type];
    var mount = function mount2(element) {
      if (liveRegions[type]) {
        elements[type][key] = element;
        renderAlerts();
      } else {
        var node3 = doc2.createElement("div");
        node3.setAttribute("data-reach-live-" + type, "true");
        liveRegions[type] = node3;
        doc2.body.appendChild(liveRegions[type]);
        mount2(element);
      }
    };
    var update = function update2(element) {
      elements[type][key] = element;
      renderAlerts();
    };
    var unmount = function unmount2() {
      delete elements[type][key];
      renderAlerts();
    };
    return {
      mount,
      update,
      unmount
    };
  }
  function renderAlerts() {
    if (renderTimer != null) {
      window.clearTimeout(renderTimer);
    }
    renderTimer = window.setTimeout(function() {
      Object.keys(elements).forEach(function(elementType) {
        var regionType = elementType;
        var container3 = liveRegions[regionType];
        if (container3) {
          (0, import_react_dom2.render)(/* @__PURE__ */ (0, import_react51.createElement)(VisuallyHidden2, {
            as: "div"
          }, /* @__PURE__ */ (0, import_react51.createElement)("div", {
            role: regionType === "assertive" ? "alert" : "status",
            "aria-live": regionType
          }, Object.keys(elements[regionType]).map(function(key) {
            return /* @__PURE__ */ (0, import_react51.cloneElement)(elements[regionType][key], {
              key,
              ref: null
            });
          }))), liveRegions[regionType]);
        }
      });
    }, 500);
  }
  function useMirrorEffects(regionType, element, ref) {
    var prevType = usePrevious(regionType);
    var mirror = (0, import_react51.useRef)(null);
    var mounted = (0, import_react51.useRef)(false);
    (0, import_react51.useEffect)(function() {
      var ownerDocument = getOwnerDocument2(ref.current);
      if (!mounted.current) {
        mounted.current = true;
        mirror.current = createMirror(regionType, ownerDocument);
        mirror.current.mount(element);
      } else if (prevType !== regionType) {
        mirror.current && mirror.current.unmount();
        mirror.current = createMirror(regionType, ownerDocument);
        mirror.current.mount(element);
      } else {
        mirror.current && mirror.current.update(element);
      }
    }, [element, regionType, prevType, ref]);
    (0, import_react51.useEffect)(function() {
      return function() {
        mirror.current && mirror.current.unmount();
      };
    }, []);
  }
  var reach_alert_esm_default = Alert2;

  // node_modules/@chakra-ui/toast/dist/chakra-ui-toast.esm.js
  function _extends19() {
    _extends19 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends19.apply(this, arguments);
  }
  function _setPrototypeOf3(o, p) {
    _setPrototypeOf3 = Object.setPrototypeOf || function _setPrototypeOf4(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf3(o, p);
  }
  function _inheritsLoose2(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf3(subClass, superClass);
  }
  function findToast(toasts, id2) {
    var position3 = getToastPosition(toasts, id2);
    var index = position3 ? toasts[position3].findIndex(function(toast2) {
      return toast2.id === id2;
    }) : -1;
    return {
      position: position3,
      index
    };
  }
  var getToastPosition = function getToastPosition2(toasts, id2) {
    var _Object$values$flat$f;
    return (_Object$values$flat$f = Object.values(toasts).flat().find(function(toast2) {
      return toast2.id === id2;
    })) == null ? void 0 : _Object$values$flat$f.position;
  };
  function getToastStyle(position3) {
    var isRighty = position3.includes("right");
    var isLefty = position3.includes("left");
    var alignItems = "center";
    if (isRighty)
      alignItems = "flex-end";
    if (isLefty)
      alignItems = "flex-start";
    return {
      display: "flex",
      flexDirection: "column",
      alignItems
    };
  }
  var toastMotionVariants = {
    initial: function initial2(props) {
      var _ref2;
      var position3 = props.position;
      var dir = ["top", "bottom"].includes(position3) ? "y" : "x";
      var factor = ["top-right", "bottom-right"].includes(position3) ? 1 : -1;
      if (position3 === "bottom")
        factor = 1;
      return _ref2 = {
        opacity: 0
      }, _ref2[dir] = factor * 24, _ref2;
    },
    animate: {
      opacity: 1,
      y: 0,
      x: 0,
      scale: 1,
      transition: {
        duration: 0.4,
        ease: [0.4, 0, 0.2, 1]
      }
    },
    exit: {
      opacity: 0,
      scale: 0.85,
      transition: {
        duration: 0.2,
        ease: [0.4, 0, 1, 1]
      }
    }
  };
  var Toast$1 = function Toast(props) {
    var id2 = props.id, message = props.message, onCloseComplete = props.onCloseComplete, onRequestRemove = props.onRequestRemove, _props$requestClose = props.requestClose, requestClose = _props$requestClose === void 0 ? false : _props$requestClose, _props$position = props.position, position3 = _props$position === void 0 ? "bottom" : _props$position, _props$duration = props.duration, duration = _props$duration === void 0 ? 5e3 : _props$duration, _props$containerStyle = props.containerStyle, containerStyle = _props$containerStyle === void 0 ? {} : _props$containerStyle;
    var _React$useState = React38.useState(duration), delay = _React$useState[0], setDelay = _React$useState[1];
    var isPresent2 = useIsPresent();
    useUpdateEffect(function() {
      if (!isPresent2) {
        onCloseComplete == null ? void 0 : onCloseComplete();
      }
    }, [isPresent2]);
    useUpdateEffect(function() {
      setDelay(duration);
    }, [duration]);
    var onMouseEnter = function onMouseEnter2() {
      return setDelay(null);
    };
    var onMouseLeave = function onMouseLeave2() {
      return setDelay(duration);
    };
    var close = function close2() {
      if (isPresent2)
        onRequestRemove();
    };
    React38.useEffect(function() {
      if (isPresent2 && requestClose) {
        onRequestRemove();
      }
    }, [isPresent2, requestClose, onRequestRemove]);
    useTimeout(close, delay);
    var style = React38.useMemo(function() {
      return getToastStyle(position3);
    }, [position3]);
    return /* @__PURE__ */ React38.createElement(motion.li, {
      layout: true,
      className: "chakra-toast",
      variants: toastMotionVariants,
      initial: "initial",
      animate: "animate",
      exit: "exit",
      onHoverStart: onMouseEnter,
      onHoverEnd: onMouseLeave,
      custom: {
        position: position3
      },
      style
    }, /* @__PURE__ */ React38.createElement(reach_alert_esm_default, {
      className: "chakra-toast__inner",
      style: _extends19({
        pointerEvents: "auto",
        maxWidth: 560,
        minWidth: 300,
        margin: "0.5rem"
      }, containerStyle)
    }, isFunction(message) ? message({
      id: id2,
      onClose: close
    }) : message));
  };
  if (__DEV__) {
    Toast$1.displayName = "Toast";
  }
  var ToastManager = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose2(ToastManager2, _React$Component);
    function ToastManager2(props) {
      var _this;
      _this = _React$Component.call(this, props) || this;
      _this.state = {
        top: [],
        "top-left": [],
        "top-right": [],
        "bottom-left": [],
        bottom: [],
        "bottom-right": []
      };
      _this.notify = function(message, options) {
        var toast2 = _this.createToast(message, options);
        var position3 = toast2.position, id2 = toast2.id;
        _this.setState(function(prevToasts) {
          var _extends22;
          var isTop = position3.includes("top");
          var toasts = isTop ? [toast2].concat(prevToasts[position3]) : [].concat(prevToasts[position3], [toast2]);
          return _extends19({}, prevToasts, (_extends22 = {}, _extends22[position3] = toasts, _extends22));
        });
        return id2;
      };
      _this.updateToast = function(id2, options) {
        _this.setState(function(prevState) {
          var nextState = _extends19({}, prevState);
          var _findToast = findToast(nextState, id2), position3 = _findToast.position, index = _findToast.index;
          if (position3 && index !== -1) {
            nextState[position3][index] = _extends19({}, nextState[position3][index], options);
          }
          return nextState;
        });
      };
      _this.closeAll = function(_temp) {
        var _ref2 = _temp === void 0 ? {} : _temp, positions = _ref2.positions;
        _this.setState(function(prev2) {
          var allPositions = ["bottom", "bottom-right", "bottom-left", "top", "top-left", "top-right"];
          var positionsToClose = positions != null ? positions : allPositions;
          return positionsToClose.reduce(function(acc, position3) {
            acc[position3] = prev2[position3].map(function(toast2) {
              return _extends19({}, toast2, {
                requestClose: true
              });
            });
            return acc;
          }, {});
        });
      };
      _this.createToast = function(message, options) {
        var _options$id, _options$position;
        ToastManager2.counter += 1;
        var id2 = (_options$id = options.id) != null ? _options$id : ToastManager2.counter;
        var position3 = (_options$position = options.position) != null ? _options$position : "top";
        return {
          id: id2,
          message,
          position: position3,
          duration: options.duration,
          onCloseComplete: options.onCloseComplete,
          onRequestRemove: function onRequestRemove() {
            return _this.removeToast(String(id2), position3);
          },
          status: options.status,
          requestClose: false,
          containerStyle: options.containerStyle
        };
      };
      _this.closeToast = function(id2) {
        _this.setState(function(prevState) {
          var _extends32;
          var position3 = getToastPosition(prevState, id2);
          if (!position3)
            return prevState;
          return _extends19({}, prevState, (_extends32 = {}, _extends32[position3] = prevState[position3].map(function(toast2) {
            if (toast2.id == id2) {
              return _extends19({}, toast2, {
                requestClose: true
              });
            }
            return toast2;
          }), _extends32));
        });
      };
      _this.removeToast = function(id2, position3) {
        _this.setState(function(prevState) {
          var _extends42;
          return _extends19({}, prevState, (_extends42 = {}, _extends42[position3] = prevState[position3].filter(function(toast2) {
            return toast2.id != id2;
          }), _extends42));
        });
      };
      _this.isVisible = function(id2) {
        var _findToast2 = findToast(_this.state, id2), position3 = _findToast2.position;
        return Boolean(position3);
      };
      _this.getStyle = function(position3) {
        var isTopOrBottom = position3 === "top" || position3 === "bottom";
        var margin = isTopOrBottom ? "0 auto" : void 0;
        var top = position3.includes("top") ? "env(safe-area-inset-top, 0px)" : void 0;
        var bottom = position3.includes("bottom") ? "env(safe-area-inset-bottom, 0px)" : void 0;
        var right = !position3.includes("left") ? "env(safe-area-inset-right, 0px)" : void 0;
        var left = !position3.includes("right") ? "env(safe-area-inset-left, 0px)" : void 0;
        return {
          position: "fixed",
          zIndex: 5500,
          pointerEvents: "none",
          display: "flex",
          flexDirection: "column",
          margin,
          top,
          bottom,
          right,
          left
        };
      };
      var methods = {
        notify: _this.notify,
        closeAll: _this.closeAll,
        close: _this.closeToast,
        update: _this.updateToast,
        isActive: _this.isVisible
      };
      props.notify(methods);
      return _this;
    }
    var _proto = ToastManager2.prototype;
    _proto.render = function render3() {
      var _this2 = this;
      return objectKeys(this.state).map(function(position3) {
        var toasts = _this2.state[position3];
        return /* @__PURE__ */ React38.createElement("ul", {
          key: position3,
          id: "chakra-toast-manager-" + position3,
          style: _this2.getStyle(position3)
        }, /* @__PURE__ */ React38.createElement(AnimatePresence, {
          initial: false
        }, toasts.map(function(toast2) {
          return /* @__PURE__ */ React38.createElement(Toast$1, _extends19({
            key: toast2.id
          }, toast2));
        })));
      });
    };
    return ToastManager2;
  }(React38.Component);
  ToastManager.counter = 0;
  var portalId = "chakra-toast-portal";
  var Toaster = function Toaster2() {
    var _this = this;
    this.createToast = void 0;
    this.removeAll = void 0;
    this.closeToast = void 0;
    this.updateToast = void 0;
    this.isToastActive = void 0;
    this.bindFunctions = function(methods) {
      _this.createToast = methods.notify;
      _this.removeAll = methods.closeAll;
      _this.closeToast = methods.close;
      _this.updateToast = methods.update;
      _this.isToastActive = methods.isActive;
    };
    this.notify = function(message, options) {
      if (options === void 0) {
        options = {};
      }
      return _this.createToast == null ? void 0 : _this.createToast(message, options);
    };
    this.close = function(id2) {
      _this.closeToast == null ? void 0 : _this.closeToast(id2);
    };
    this.closeAll = function(options) {
      _this.removeAll == null ? void 0 : _this.removeAll(options);
    };
    this.update = function(id2, options) {
      if (options === void 0) {
        options = {};
      }
      _this.updateToast == null ? void 0 : _this.updateToast(id2, options);
    };
    this.isActive = function(id2) {
      return _this.isToastActive == null ? void 0 : _this.isToastActive(id2);
    };
    if (!isBrowser2)
      return;
    var portal;
    var existingPortal = document.getElementById(portalId);
    if (existingPortal) {
      portal = existingPortal;
    } else {
      var _document$body;
      var div = document.createElement("div");
      div.id = portalId;
      (_document$body = document.body) == null ? void 0 : _document$body.appendChild(div);
      portal = div;
    }
    (0, import_react_dom3.render)(/* @__PURE__ */ React38.createElement(ToastManager, {
      notify: this.bindFunctions
    }), portal);
  };
  var toast = new Toaster();
  function getToastPlacement(position3, dir) {
    var _logical$dir;
    if (!position3)
      return;
    var logicals = {
      "top-start": {
        ltr: "top-left",
        rtl: "top-right"
      },
      "top-end": {
        ltr: "top-right",
        rtl: "top-left"
      },
      "bottom-start": {
        ltr: "bottom-left",
        rtl: "bottom-right"
      },
      "bottom-end": {
        ltr: "bottom-right",
        rtl: "bottom-left"
      }
    };
    var logical2 = logicals[position3];
    return (_logical$dir = logical2 == null ? void 0 : logical2[dir]) != null ? _logical$dir : position3;
  }
  var Toast2 = function Toast3(props) {
    var status = props.status, variant = props.variant, id2 = props.id, title = props.title, isClosable = props.isClosable, onClose = props.onClose, description = props.description;
    var alertTitleId = typeof id2 !== "undefined" ? "toast-" + id2 + "-title" : void 0;
    return /* @__PURE__ */ React38.createElement(Alert, {
      status,
      variant,
      id: id2,
      alignItems: "start",
      borderRadius: "md",
      boxShadow: "lg",
      paddingEnd: 8,
      textAlign: "start",
      width: "auto",
      "aria-labelledby": alertTitleId
    }, /* @__PURE__ */ React38.createElement(AlertIcon, null), /* @__PURE__ */ React38.createElement(chakra.div, {
      flex: "1",
      maxWidth: "100%"
    }, title && /* @__PURE__ */ React38.createElement(AlertTitle, {
      id: alertTitleId
    }, title), description && /* @__PURE__ */ React38.createElement(AlertDescription, {
      display: "block"
    }, description)), isClosable && /* @__PURE__ */ React38.createElement(CloseButton, {
      size: "sm",
      onClick: onClose,
      position: "absolute",
      insetEnd: 1,
      top: 1
    }));
  };
  var defaults = {
    duration: 5e3,
    position: "bottom",
    variant: "solid"
  };
  var defaultStandaloneParam = {
    theme,
    colorMode: "light",
    toggleColorMode: noop,
    setColorMode: noop,
    defaultOptions: defaults
  };
  function createStandaloneToast(_temp) {
    var _ref2 = _temp === void 0 ? defaultStandaloneParam : _temp, _ref$theme = _ref2.theme, theme3 = _ref$theme === void 0 ? defaultStandaloneParam.theme : _ref$theme, _ref$colorMode = _ref2.colorMode, colorMode = _ref$colorMode === void 0 ? defaultStandaloneParam.colorMode : _ref$colorMode, _ref$toggleColorMode = _ref2.toggleColorMode, toggleColorMode = _ref$toggleColorMode === void 0 ? defaultStandaloneParam.toggleColorMode : _ref$toggleColorMode, _ref$setColorMode = _ref2.setColorMode, setColorMode = _ref$setColorMode === void 0 ? defaultStandaloneParam.setColorMode : _ref$setColorMode, _ref$defaultOptions = _ref2.defaultOptions, defaultOptions = _ref$defaultOptions === void 0 ? defaultStandaloneParam.defaultOptions : _ref$defaultOptions;
    var renderWithProviders = function renderWithProviders2(props, options) {
      return /* @__PURE__ */ React38.createElement(ThemeProvider3, {
        theme: theme3
      }, /* @__PURE__ */ React38.createElement(ColorModeContext.Provider, {
        value: {
          colorMode,
          setColorMode,
          toggleColorMode
        }
      }, isFunction(options.render) ? options.render(props) : /* @__PURE__ */ React38.createElement(Toast2, _extends19({}, props, options))));
    };
    var toastImpl = function toastImpl2(options) {
      var opts = _extends19({}, defaultOptions, options);
      opts.position = getToastPlacement(opts.position, theme3.direction);
      var Message = function Message2(props) {
        return renderWithProviders(props, opts);
      };
      return toast.notify(Message, opts);
    };
    toastImpl.close = toast.close;
    toastImpl.closeAll = toast.closeAll;
    toastImpl.update = function(id2, options) {
      if (!id2)
        return;
      var opts = _extends19({}, defaultOptions, options);
      opts.position = getToastPlacement(opts.position, theme3.direction);
      toast.update(id2, _extends19({}, opts, {
        message: function message(props) {
          return renderWithProviders(props, opts);
        }
      }));
    };
    toastImpl.isActive = toast.isActive;
    return toastImpl;
  }
  function useToast(options) {
    var _useChakra = useChakra(), theme3 = _useChakra.theme, setColorMode = _useChakra.setColorMode, toggleColorMode = _useChakra.toggleColorMode, colorMode = _useChakra.colorMode;
    var toastOptions = useLatestRef(options);
    return React38.useMemo(function() {
      return createStandaloneToast({
        theme: theme3,
        colorMode,
        setColorMode,
        toggleColorMode,
        defaultOptions: _extends19({}, defaults, toastOptions.current)
      });
    }, [theme3, setColorMode, toggleColorMode, colorMode, toastOptions]);
  }

  // node_modules/@chakra-ui/react/dist/chakra-ui-react.esm.js
  var ChakraProvider3 = ChakraProvider;
  ChakraProvider3.defaultProps = {
    theme
  };
  function extendTheme() {
    for (var _len = arguments.length, extensions = new Array(_len), _key = 0; _key < _len; _key++) {
      extensions[_key] = arguments[_key];
    }
    var overrides = [].concat(extensions);
    var baseTheme = extensions[extensions.length - 1];
    if (isChakraTheme(baseTheme) && overrides.length > 1) {
      overrides = overrides.slice(0, overrides.length - 1);
    } else {
      baseTheme = theme;
    }
    return pipe.apply(void 0, overrides.map(function(extension) {
      return function(prevTheme) {
        return isFunction(extension) ? extension(prevTheme) : mergeThemeOverride(prevTheme, extension);
      };
    }))(baseTheme);
  }
  function mergeThemeOverride() {
    for (var _len2 = arguments.length, overrides = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      overrides[_key2] = arguments[_key2];
    }
    return import_lodash.default.apply(void 0, [{}].concat(overrides, [mergeThemeCustomizer]));
  }
  function mergeThemeCustomizer(source, override, key, object2) {
    if ((isFunction(source) || isFunction(override)) && Object.prototype.hasOwnProperty.call(object2, key)) {
      return function() {
        var sourceValue = isFunction(source) ? source.apply(void 0, arguments) : source;
        var overrideValue = isFunction(override) ? override.apply(void 0, arguments) : override;
        return (0, import_lodash.default)({}, sourceValue, overrideValue, mergeThemeCustomizer);
      };
    }
    return void 0;
  }

  // src/App.jsx
  var import_react72 = __toESM(require_react());

  // src/theme.js
  var theme2 = extendTheme({
    initialColorMode: "light",
    useSystemColorMode: false,
    fonts: {
      heading: "Open Sans, sans-serif",
      body: "Open Sans, sans-serif"
    }
  });
  var theme_default = theme2;

  // src/components/TitleBar.jsx
  var import_react55 = __toESM(require_react());

  // node_modules/react-icons/lib/esm/iconBase.js
  var import_react54 = __toESM(require_react());

  // node_modules/react-icons/lib/esm/iconContext.js
  var import_react53 = __toESM(require_react());
  var DefaultContext = {
    color: void 0,
    size: void 0,
    className: void 0,
    style: void 0,
    attr: void 0
  };
  var IconContext = import_react53.default.createContext && import_react53.default.createContext(DefaultContext);

  // node_modules/react-icons/lib/esm/iconBase.js
  var __assign4 = function() {
    __assign4 = Object.assign || function(t2) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t2[p] = s[p];
      }
      return t2;
    };
    return __assign4.apply(this, arguments);
  };
  var __rest4 = function(s, e) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  function Tree2Element(tree) {
    return tree && tree.map(function(node3, i) {
      return import_react54.default.createElement(node3.tag, __assign4({
        key: i
      }, node3.attr), Tree2Element(node3.child));
    });
  }
  function GenIcon(data) {
    return function(props) {
      return import_react54.default.createElement(IconBase, __assign4({
        attr: __assign4({}, data.attr)
      }, props), Tree2Element(data.child));
    };
  }
  function IconBase(props) {
    var elem = function(conf) {
      var attr = props.attr, size2 = props.size, title = props.title, svgProps = __rest4(props, ["attr", "size", "title"]);
      var computedSize = size2 || conf.size || "1em";
      var className;
      if (conf.className)
        className = conf.className;
      if (props.className)
        className = (className ? className + " " : "") + props.className;
      return import_react54.default.createElement("svg", __assign4({
        stroke: "currentColor",
        fill: "currentColor",
        strokeWidth: "0"
      }, conf.attr, attr, svgProps, {
        className,
        style: __assign4(__assign4({
          color: props.color || conf.color
        }, conf.style), props.style),
        height: computedSize,
        width: computedSize,
        xmlns: "http://www.w3.org/2000/svg"
      }), title && import_react54.default.createElement("title", null, title), props.children);
    };
    return IconContext !== void 0 ? import_react54.default.createElement(IconContext.Consumer, null, function(conf) {
      return elem(conf);
    }) : elem(DefaultContext);
  }

  // node_modules/react-icons/fa/index.esm.js
  function FaSun(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z" } }] })(props);
  }
  function FaRegMoon(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M279.135 512c78.756 0 150.982-35.804 198.844-94.775 28.27-34.831-2.558-85.722-46.249-77.401-82.348 15.683-158.272-47.268-158.272-130.792 0-48.424 26.06-92.292 67.434-115.836 38.745-22.05 28.999-80.788-15.022-88.919A257.936 257.936 0 0 0 279.135 0c-141.36 0-256 114.575-256 256 0 141.36 114.576 256 256 256zm0-464c12.985 0 25.689 1.201 38.016 3.478-54.76 31.163-91.693 90.042-91.693 157.554 0 113.848 103.641 199.2 215.252 177.944C402.574 433.964 344.366 464 279.135 464c-114.875 0-208-93.125-208-208s93.125-208 208-208z" } }] })(props);
  }

  // src/components/TitleBar.jsx
  function TitleBar({ gameMode, setGameMode, correctGuessCount }) {
    const { colorMode, toggleColorMode } = useColorMode();
    return /* @__PURE__ */ import_react55.default.createElement(HStack, {
      height: "5em",
      position: "fixed",
      top: "0"
    }, /* @__PURE__ */ import_react55.default.createElement(Heading, null, "Wordle"), /* @__PURE__ */ import_react55.default.createElement(Button, {
      onClick: toggleColorMode
    }, colorMode === "light" ? /* @__PURE__ */ import_react55.default.createElement(Icon, {
      as: FaRegMoon
    }) : /* @__PURE__ */ import_react55.default.createElement(Icon, {
      as: FaSun
    })), /* @__PURE__ */ import_react55.default.createElement(Text, null, correctGuessCount, "/2"));
  }

  // src/components/GameBoard.jsx
  var import_react70 = __toESM(require_react());

  // src/hooks/useEventListener.js
  var import_react57 = __toESM(require_react());
  function useEventListener2(eventName, handler, element = window) {
    const savedHandler = (0, import_react57.useRef)();
    (0, import_react57.useEffect)(() => {
      savedHandler.current = handler;
    }, [handler]);
    (0, import_react57.useEffect)(() => {
      const isSupported = element && element.addEventListener;
      if (!isSupported)
        return;
      const eventListener = (event) => savedHandler.current(event);
      element.addEventListener(eventName, eventListener);
      return () => element.removeEventListener(eventName, eventListener);
    }, [eventName, element]);
  }

  // src/hooks/useWindowSize.js
  var import_react58 = __toESM(require_react());
  function useWindowSize() {
    const [windowSize, setWindowSize] = (0, import_react58.useState)({
      width: void 0,
      height: void 0
    });
    (0, import_react58.useEffect)(() => {
      function handleResize() {
        setWindowSize({
          width: window.innerWidth,
          height: window.innerHeight
        });
      }
      window.addEventListener("resize", handleResize);
      handleResize();
      return () => window.removeEventListener("resize", handleResize);
    }, []);
    return windowSize;
  }

  // src/hooks/useLocalStorage.js
  var import_react59 = __toESM(require_react());
  function useLocalStorage(key, initialValue) {
    const [storedValue, setStoredValue] = (0, import_react59.useState)(() => {
      if (typeof window === "undefined") {
        return initialValue;
      }
      try {
        const item = window.localStorage.getItem(key);
        return item ? JSON.parse(item) : initialValue;
      } catch (error2) {
        return initialValue;
      }
    });
    const setValue = (value) => {
      try {
        const valueToStore = value instanceof Function ? value(storedValue) : value;
        setStoredValue(valueToStore);
        if (typeof window !== "undefined") {
          window.localStorage.setItem(key, JSON.stringify(valueToStore));
        }
      } catch (error2) {
      }
    };
    return [storedValue, setValue];
  }

  // src/components/Keyboard.jsx
  var import_react62 = __toESM(require_react());

  // node_modules/react-icons/bs/index.esm.js
  function BsBackspace(props) {
    return GenIcon({ "tag": "svg", "attr": { "fill": "currentColor", "viewBox": "0 0 16 16" }, "child": [{ "tag": "path", "attr": { "d": "M5.83 5.146a.5.5 0 0 0 0 .708L7.975 8l-2.147 2.146a.5.5 0 0 0 .707.708l2.147-2.147 2.146 2.147a.5.5 0 0 0 .707-.708L9.39 8l2.146-2.146a.5.5 0 0 0-.707-.708L8.683 7.293 6.536 5.146a.5.5 0 0 0-.707 0z" } }, { "tag": "path", "attr": { "d": "M13.683 1a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-7.08a2 2 0 0 1-1.519-.698L.241 8.65a1 1 0 0 1 0-1.302L5.084 1.7A2 2 0 0 1 6.603 1h7.08zm-7.08 1a1 1 0 0 0-.76.35L1 8l4.844 5.65a1 1 0 0 0 .759.35h7.08a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1h-7.08z" } }] })(props);
  }

  // node_modules/react-icons/ai/index.esm.js
  function AiOutlineEnter(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 1024 1024" }, "child": [{ "tag": "path", "attr": { "d": "M864 170h-60c-4.4 0-8 3.6-8 8v518H310v-73c0-6.7-7.8-10.5-13-6.3l-141.9 112a8 8 0 0 0 0 12.6l141.9 112c5.3 4.2 13 .4 13-6.3v-75h498c35.3 0 64-28.7 64-64V178c0-4.4-3.6-8-8-8z" } }] })(props);
  }

  // src/components/Key.jsx
  var import_react60 = __toESM(require_react());
  function getKeyColour(colorMode, used) {
    if (used) {
      return colorMode === "light" ? "#787C7E" : "#3A3A3C";
    }
    return colorMode === "light" ? "#D3D6DA" : "#818384";
  }
  function Key({ onClick, used, char: char2 }) {
    const { colorMode } = useColorMode();
    return /* @__PURE__ */ import_react60.default.createElement(Flex, {
      _hover: { cursor: "pointer" },
      color: colorMode === "light" && used ? "white" : void 0,
      backgroundColor: getKeyColour(colorMode, used),
      onClick,
      width: "8vw",
      height: "8vw",
      maxWidth: "3em",
      maxHeight: "3em",
      alignItems: "center",
      textAlign: "center"
    }, /* @__PURE__ */ import_react60.default.createElement(Text, {
      width: "100%"
    }, char2));
  }

  // src/components/Keyboard.jsx
  var enterIcon = /* @__PURE__ */ import_react62.default.createElement(Icon, {
    as: AiOutlineEnter
  });
  var backSpaceIcon = /* @__PURE__ */ import_react62.default.createElement(Icon, {
    as: BsBackspace
  });
  var keyboardRows = [
    ["Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P"],
    ["A", "S", "D", "F", "G", "H", "J", "K", "L"],
    [enterIcon, "Z", "X", "C", "V", "B", "N", "M", backSpaceIcon]
  ];
  function Keyboard(props) {
    const {
      usedLetters,
      tryAddLetterToCurrentGuessWord,
      trySubmitCurrentGuessWord,
      tryBackspaceCurrentGuessWord
    } = props;
    return /* @__PURE__ */ import_react62.default.createElement(VStack, {
      margin: "1em 0"
    }, keyboardRows.map((row, i) => /* @__PURE__ */ import_react62.default.createElement(HStack, {
      key: i
    }, row.map((letter, j) => /* @__PURE__ */ import_react62.default.createElement(Key, {
      key: `${i}-${j}`,
      onClick: letter === enterIcon ? trySubmitCurrentGuessWord : letter === backSpaceIcon ? tryBackspaceCurrentGuessWord : () => tryAddLetterToCurrentGuessWord(letter),
      char: letter,
      used: usedLetters.includes(letter)
    })))));
  }

  // src/components/Wordle.jsx
  var import_react68 = __toESM(require_react());

  // src/components/Guess.jsx
  var import_react66 = __toESM(require_react());

  // src/components/Letter.jsx
  var import_react64 = __toESM(require_react());
  function Letter({ char: char2, colour }) {
    return /* @__PURE__ */ import_react64.default.createElement(Flex, {
      backgroundColor: colour,
      borderWidth: "1px",
      width: "2.75em",
      height: "2.75em",
      justify: "center"
    }, /* @__PURE__ */ import_react64.default.createElement(Center, null, /* @__PURE__ */ import_react64.default.createElement(Text, {
      color: colour !== void 0 ? "white" : void 0
    }, char2)));
  }

  // src/components/Guess.jsx
  function Guess({
    letters,
    colours,
    refProp
  }) {
    return /* @__PURE__ */ import_react66.default.createElement(HStack, {
      ref: refProp
    }, letters.concat(Array(5 - letters.length).fill("")).map((l, i) => /* @__PURE__ */ import_react66.default.createElement(Letter, {
      key: i,
      char: l,
      colour: colours[i]
    })));
  }

  // src/components/Wordle.jsx
  var COLOUR_GREEN = "#538D4E";
  var COLOUR_GREY = "#787C7E";
  var COLOUR_YELLOW = "#C9B458";
  function getColoursFromGuess(guess, target) {
    const guessLetters = guess.split("");
    const targetLetters = target.split("");
    const colours = ["", "", "", "", ""];
    guessLetters.forEach((guessLetter, i) => {
      if (guessLetter === targetLetters[i]) {
        colours[i] = COLOUR_GREEN;
      } else {
        colours[i] = COLOUR_GREY;
      }
    });
    guessLetters.forEach((guessLetter, i) => {
      if (colours[i] !== COLOUR_GREEN && targetLetters.includes(guessLetter)) {
        let guessOccurrences = 0;
        let targetOccurrences = 0;
        for (let j = 0; j < guessLetters.length; j++) {
          if (guessLetters[j] === guessLetter && (colours[j] === COLOUR_GREEN || colours[j] === COLOUR_YELLOW)) {
            guessOccurrences += 1;
          }
          if (targetLetters[j] === guessLetter) {
            targetOccurrences += 1;
          }
        }
        if (targetOccurrences - guessOccurrences > 0) {
          colours[i] = COLOUR_YELLOW;
        }
      }
    });
    return colours;
  }
  function Wordle({
    index,
    currentGuessWord,
    guessedWords,
    targetWord,
    handleWordleStateChange
  }) {
    const wordleRef = (0, import_react68.useRef)(null);
    const renderCurrentGuess = !guessedWords.includes(targetWord) && guessedWords.length < 10;
    const correctGuessIndex = guessedWords.indexOf(targetWord);
    const currentGuessRef = (0, import_react68.useCallback)((node3) => {
      if (renderCurrentGuess && node3 !== null) {
        const rect = node3.getBoundingClientRect();
        node3.parentNode.scrollTop = node3.offsetTop - node3.parentNode.offsetTop - node3.parentNode.getBoundingClientRect().height + rect.height;
      }
    }, [currentGuessWord]);
    let currentGuess;
    if (renderCurrentGuess) {
      currentGuess = /* @__PURE__ */ import_react68.default.createElement(Guess, {
        refProp: currentGuessRef,
        letters: currentGuessWord.split(""),
        colours: []
      });
    }
    (0, import_react68.useEffect)(() => {
      if (!renderCurrentGuess) {
        handleWordleStateChange(index, correctGuessIndex);
      }
    }, [guessedWords]);
    return /* @__PURE__ */ import_react68.default.createElement(VStack, {
      height: "100%",
      ref: wordleRef,
      overflowY: "scroll",
      scrollBehavior: "smooth",
      sx: { scrollbarWidth: "thin" },
      opacity: !renderCurrentGuess ? 0.5 : 1
    }, guessedWords.map((g, i) => {
      if (correctGuessIndex !== -1 && i > correctGuessIndex) {
        return /* @__PURE__ */ import_react68.default.createElement(Guess, {
          key: i,
          letters: [],
          colours: []
        });
      }
      const colours = getColoursFromGuess(g, targetWord);
      return /* @__PURE__ */ import_react68.default.createElement(Guess, {
        key: i,
        letters: g.split(""),
        colours
      });
    }), renderCurrentGuess && currentGuess, guessedWords.length < 10 && [...Array(10 - guessedWords.length - (renderCurrentGuess ? 1 : 0)).keys()].map((_, i) => /* @__PURE__ */ import_react68.default.createElement(Guess, {
      key: i,
      letters: [],
      colours: []
    })));
  }

  // src/wordle/validguesses.js
  var VALID_GUESSES = [
    "AAHED",
    "AALII",
    "AARGH",
    "AARTI",
    "ABACA",
    "ABACI",
    "ABACS",
    "ABAFT",
    "ABAKA",
    "ABAMP",
    "ABAND",
    "ABASH",
    "ABASK",
    "ABAYA",
    "ABBAS",
    "ABBED",
    "ABBES",
    "ABCEE",
    "ABEAM",
    "ABEAR",
    "ABELE",
    "ABERS",
    "ABETS",
    "ABIES",
    "ABLER",
    "ABLES",
    "ABLET",
    "ABLOW",
    "ABMHO",
    "ABOHM",
    "ABOIL",
    "ABOMA",
    "ABOON",
    "ABORD",
    "ABORE",
    "ABRAM",
    "ABRAY",
    "ABRIM",
    "ABRIN",
    "ABRIS",
    "ABSEY",
    "ABSIT",
    "ABUNA",
    "ABUNE",
    "ABUTS",
    "ABUZZ",
    "ABYES",
    "ABYSM",
    "ACAIS",
    "ACARI",
    "ACCAS",
    "ACCOY",
    "ACERB",
    "ACERS",
    "ACETA",
    "ACHAR",
    "ACHED",
    "ACHES",
    "ACHOO",
    "ACIDS",
    "ACIDY",
    "ACING",
    "ACINI",
    "ACKEE",
    "ACKER",
    "ACMES",
    "ACMIC",
    "ACNED",
    "ACNES",
    "ACOCK",
    "ACOLD",
    "ACRED",
    "ACRES",
    "ACROS",
    "ACTED",
    "ACTIN",
    "ACTON",
    "ACYLS",
    "ADAWS",
    "ADAYS",
    "ADBOT",
    "ADDAX",
    "ADDED",
    "ADDER",
    "ADDIO",
    "ADDLE",
    "ADEEM",
    "ADHAN",
    "ADIEU",
    "ADIOS",
    "ADITS",
    "ADMAN",
    "ADMEN",
    "ADMIX",
    "ADOBO",
    "ADOWN",
    "ADOZE",
    "ADRAD",
    "ADRED",
    "ADSUM",
    "ADUKI",
    "ADUNC",
    "ADUST",
    "ADVEW",
    "ADYTA",
    "ADZED",
    "ADZES",
    "AECIA",
    "AEDES",
    "AEGIS",
    "AEONS",
    "AERIE",
    "AEROS",
    "AESIR",
    "AFALD",
    "AFARA",
    "AFARS",
    "AFEAR",
    "AFLAJ",
    "AFORE",
    "AFRIT",
    "AFROS",
    "AGAMA",
    "AGAMI",
    "AGARS",
    "AGAST",
    "AGAVE",
    "AGAZE",
    "AGENE",
    "AGERS",
    "AGGER",
    "AGGIE",
    "AGGRI",
    "AGGRO",
    "AGGRY",
    "AGHAS",
    "AGILA",
    "AGIOS",
    "AGISM",
    "AGIST",
    "AGITA",
    "AGLEE",
    "AGLET",
    "AGLEY",
    "AGLOO",
    "AGLUS",
    "AGMAS",
    "AGOGE",
    "AGONE",
    "AGONS",
    "AGOOD",
    "AGRIA",
    "AGRIN",
    "AGROS",
    "AGUED",
    "AGUES",
    "AGUNA",
    "AGUTI",
    "AHEAP",
    "AHENT",
    "AHIGH",
    "AHIND",
    "AHING",
    "AHINT",
    "AHOLD",
    "AHULL",
    "AHURU",
    "AIDAS",
    "AIDED",
    "AIDES",
    "AIDOI",
    "AIDOS",
    "AIERY",
    "AIGAS",
    "AIGHT",
    "AILED",
    "AIMED",
    "AIMER",
    "AINEE",
    "AINGA",
    "AIOLI",
    "AIRED",
    "AIRER",
    "AIRNS",
    "AIRTH",
    "AIRTS",
    "AITCH",
    "AITUS",
    "AIVER",
    "AIYEE",
    "AIZLE",
    "AJIES",
    "AJIVA",
    "AJUGA",
    "AJWAN",
    "AKEES",
    "AKELA",
    "AKENE",
    "AKING",
    "AKITA",
    "AKKAS",
    "ALAAP",
    "ALACK",
    "ALAMO",
    "ALAND",
    "ALANE",
    "ALANG",
    "ALANS",
    "ALANT",
    "ALAPA",
    "ALAPS",
    "ALARY",
    "ALATE",
    "ALAYS",
    "ALBAS",
    "ALBEE",
    "ALCID",
    "ALCOS",
    "ALDEA",
    "ALDER",
    "ALDOL",
    "ALECK",
    "ALECS",
    "ALEFS",
    "ALEFT",
    "ALEPH",
    "ALEWS",
    "ALEYE",
    "ALFAS",
    "ALGAL",
    "ALGAS",
    "ALGID",
    "ALGIN",
    "ALGOR",
    "ALGUM",
    "ALIAS",
    "ALIFS",
    "ALINE",
    "ALIST",
    "ALIYA",
    "ALKIE",
    "ALKOS",
    "ALKYD",
    "ALKYL",
    "ALLEE",
    "ALLEL",
    "ALLIS",
    "ALLOD",
    "ALLYL",
    "ALMAH",
    "ALMAS",
    "ALMEH",
    "ALMES",
    "ALMUD",
    "ALMUG",
    "ALODS",
    "ALOED",
    "ALOES",
    "ALOHA",
    "ALOIN",
    "ALOOS",
    "ALOWE",
    "ALTHO",
    "ALTOS",
    "ALULA",
    "ALUMS",
    "ALURE",
    "ALVAR",
    "ALWAY",
    "AMAHS",
    "AMAIN",
    "AMATE",
    "AMAUT",
    "AMBAN",
    "AMBIT",
    "AMBOS",
    "AMBRY",
    "AMEBA",
    "AMEER",
    "AMENE",
    "AMENS",
    "AMENT",
    "AMIAS",
    "AMICE",
    "AMICI",
    "AMIDE",
    "AMIDO",
    "AMIDS",
    "AMIES",
    "AMIGA",
    "AMIGO",
    "AMINE",
    "AMINO",
    "AMINS",
    "AMIRS",
    "AMLAS",
    "AMMAN",
    "AMMON",
    "AMMOS",
    "AMNIA",
    "AMNIC",
    "AMNIO",
    "AMOKS",
    "AMOLE",
    "AMORT",
    "AMOUR",
    "AMOVE",
    "AMOWT",
    "AMPED",
    "AMPUL",
    "AMRIT",
    "AMUCK",
    "AMYLS",
    "ANANA",
    "ANATA",
    "ANCHO",
    "ANCLE",
    "ANCON",
    "ANDRO",
    "ANEAR",
    "ANELE",
    "ANENT",
    "ANGAS",
    "ANGLO",
    "ANIGH",
    "ANILE",
    "ANILS",
    "ANIMA",
    "ANIMI",
    "ANION",
    "ANISE",
    "ANKER",
    "ANKHS",
    "ANKUS",
    "ANLAS",
    "ANNAL",
    "ANNAS",
    "ANNAT",
    "ANOAS",
    "ANOLE",
    "ANOMY",
    "ANSAE",
    "ANTAE",
    "ANTAR",
    "ANTAS",
    "ANTED",
    "ANTES",
    "ANTIS",
    "ANTRA",
    "ANTRE",
    "ANTSY",
    "ANURA",
    "ANYON",
    "APACE",
    "APAGE",
    "APAID",
    "APAYD",
    "APAYS",
    "APEAK",
    "APEEK",
    "APERS",
    "APERT",
    "APERY",
    "APGAR",
    "APHIS",
    "APIAN",
    "APIOL",
    "APISH",
    "APISM",
    "APODE",
    "APODS",
    "APOOP",
    "APORT",
    "APPAL",
    "APPAY",
    "APPEL",
    "APPRO",
    "APPUI",
    "APPUY",
    "APRES",
    "APSES",
    "APSIS",
    "APSOS",
    "APTED",
    "APTER",
    "AQUAE",
    "AQUAS",
    "ARABA",
    "ARAKS",
    "ARAME",
    "ARARS",
    "ARBAS",
    "ARCED",
    "ARCHI",
    "ARCOS",
    "ARCUS",
    "ARDEB",
    "ARDRI",
    "AREAD",
    "AREAE",
    "AREAL",
    "AREAR",
    "AREAS",
    "ARECA",
    "AREDD",
    "AREDE",
    "AREFY",
    "AREIC",
    "ARENE",
    "AREPA",
    "ARERE",
    "ARETE",
    "ARETS",
    "ARETT",
    "ARGAL",
    "ARGAN",
    "ARGIL",
    "ARGLE",
    "ARGOL",
    "ARGON",
    "ARGOT",
    "ARGUS",
    "ARHAT",
    "ARIAS",
    "ARIEL",
    "ARIKI",
    "ARILS",
    "ARIOT",
    "ARISH",
    "ARKED",
    "ARLED",
    "ARLES",
    "ARMED",
    "ARMER",
    "ARMET",
    "ARMIL",
    "ARNAS",
    "ARNUT",
    "AROBA",
    "AROHA",
    "AROID",
    "ARPAS",
    "ARPEN",
    "ARRAH",
    "ARRAS",
    "ARRET",
    "ARRIS",
    "ARROZ",
    "ARSED",
    "ARSES",
    "ARSEY",
    "ARSIS",
    "ARTAL",
    "ARTEL",
    "ARTIC",
    "ARTIS",
    "ARUHE",
    "ARUMS",
    "ARVAL",
    "ARVEE",
    "ARVOS",
    "ARYLS",
    "ASANA",
    "ASCON",
    "ASCUS",
    "ASDIC",
    "ASHED",
    "ASHES",
    "ASHET",
    "ASKED",
    "ASKER",
    "ASKOI",
    "ASKOS",
    "ASPEN",
    "ASPER",
    "ASPIC",
    "ASPIE",
    "ASPIS",
    "ASPRO",
    "ASSAI",
    "ASSAM",
    "ASSES",
    "ASSEZ",
    "ASSOT",
    "ASTER",
    "ASTIR",
    "ASTUN",
    "ASURA",
    "ASWAY",
    "ASWIM",
    "ASYLA",
    "ATAPS",
    "ATAXY",
    "ATIGI",
    "ATILT",
    "ATIMY",
    "ATLAS",
    "ATMAN",
    "ATMAS",
    "ATMOS",
    "ATOCS",
    "ATOKE",
    "ATOKS",
    "ATOMS",
    "ATOMY",
    "ATONY",
    "ATOPY",
    "ATRIA",
    "ATRIP",
    "ATTAP",
    "ATTAR",
    "ATUAS",
    "AUDAD",
    "AUGER",
    "AUGHT",
    "AULAS",
    "AULIC",
    "AULOI",
    "AULOS",
    "AUMIL",
    "AUNES",
    "AUNTS",
    "AURAE",
    "AURAL",
    "AURAR",
    "AURAS",
    "AUREI",
    "AURES",
    "AURIC",
    "AURIS",
    "AURUM",
    "AUTOS",
    "AUXIN",
    "AVALE",
    "AVANT",
    "AVAST",
    "AVELS",
    "AVENS",
    "AVERS",
    "AVGAS",
    "AVINE",
    "AVION",
    "AVISE",
    "AVISO",
    "AVIZE",
    "AVOWS",
    "AVYZE",
    "AWARN",
    "AWATO",
    "AWAVE",
    "AWAYS",
    "AWDLS",
    "AWEEL",
    "AWETO",
    "AWING",
    "AWMRY",
    "AWNED",
    "AWNER",
    "AWOLS",
    "AWORK",
    "AXELS",
    "AXILE",
    "AXILS",
    "AXING",
    "AXITE",
    "AXLED",
    "AXLES",
    "AXMAN",
    "AXMEN",
    "AXOID",
    "AXONE",
    "AXONS",
    "AYAHS",
    "AYAYA",
    "AYELP",
    "AYGRE",
    "AYINS",
    "AYONT",
    "AYRES",
    "AYRIE",
    "AZANS",
    "AZIDE",
    "AZIDO",
    "AZINE",
    "AZLON",
    "AZOIC",
    "AZOLE",
    "AZONS",
    "AZOTE",
    "AZOTH",
    "AZUKI",
    "AZURN",
    "AZURY",
    "AZYGY",
    "AZYME",
    "AZYMS",
    "BAAED",
    "BAALS",
    "BABAS",
    "BABEL",
    "BABES",
    "BABKA",
    "BABOO",
    "BABUL",
    "BABUS",
    "BACCA",
    "BACCO",
    "BACCY",
    "BACHA",
    "BACHS",
    "BACKS",
    "BADDY",
    "BAELS",
    "BAFFS",
    "BAFFY",
    "BAFTS",
    "BAGHS",
    "BAGIE",
    "BAHTS",
    "BAHUS",
    "BAHUT",
    "BAILS",
    "BAIRN",
    "BAISA",
    "BAITH",
    "BAITS",
    "BAIZA",
    "BAIZE",
    "BAJAN",
    "BAJRA",
    "BAJRI",
    "BAJUS",
    "BAKED",
    "BAKEN",
    "BAKES",
    "BAKRA",
    "BALAS",
    "BALDS",
    "BALDY",
    "BALED",
    "BALES",
    "BALKS",
    "BALKY",
    "BALLS",
    "BALLY",
    "BALMS",
    "BALOO",
    "BALSA",
    "BALTI",
    "BALUN",
    "BALUS",
    "BAMBI",
    "BANAK",
    "BANCO",
    "BANCS",
    "BANDA",
    "BANDH",
    "BANDS",
    "BANDY",
    "BANED",
    "BANES",
    "BANGS",
    "BANIA",
    "BANKS",
    "BANNS",
    "BANTS",
    "BANTU",
    "BANTY",
    "BANYA",
    "BAPUS",
    "BARBE",
    "BARBS",
    "BARBY",
    "BARCA",
    "BARDE",
    "BARDO",
    "BARDS",
    "BARDY",
    "BARED",
    "BARER",
    "BARES",
    "BARFI",
    "BARFS",
    "BARIC",
    "BARKS",
    "BARKY",
    "BARMS",
    "BARMY",
    "BARNS",
    "BARNY",
    "BARPS",
    "BARRA",
    "BARRE",
    "BARRO",
    "BARRY",
    "BARYE",
    "BASAN",
    "BASED",
    "BASEN",
    "BASER",
    "BASES",
    "BASHO",
    "BASIJ",
    "BASKS",
    "BASON",
    "BASSE",
    "BASSI",
    "BASSO",
    "BASSY",
    "BASTA",
    "BASTI",
    "BASTO",
    "BASTS",
    "BATED",
    "BATES",
    "BATHS",
    "BATIK",
    "BATTA",
    "BATTS",
    "BATTU",
    "BAUDS",
    "BAUKS",
    "BAULK",
    "BAURS",
    "BAVIN",
    "BAWDS",
    "BAWKS",
    "BAWLS",
    "BAWNS",
    "BAWRS",
    "BAWTY",
    "BAYED",
    "BAYER",
    "BAYES",
    "BAYLE",
    "BAYTS",
    "BAZAR",
    "BAZOO",
    "BEADS",
    "BEAKS",
    "BEAKY",
    "BEALS",
    "BEAMS",
    "BEAMY",
    "BEANO",
    "BEANS",
    "BEANY",
    "BEARE",
    "BEARS",
    "BEATH",
    "BEATS",
    "BEATY",
    "BEAUS",
    "BEAUT",
    "BEAUX",
    "BEBOP",
    "BECAP",
    "BECKE",
    "BECKS",
    "BEDAD",
    "BEDEL",
    "BEDES",
    "BEDEW",
    "BEDIM",
    "BEDYE",
    "BEEDI",
    "BEEFS",
    "BEEPS",
    "BEERS",
    "BEERY",
    "BEETS",
    "BEFOG",
    "BEGAD",
    "BEGAR",
    "BEGEM",
    "BEGOT",
    "BEGUM",
    "BEIGE",
    "BEIGY",
    "BEINS",
    "BEKAH",
    "BELAH",
    "BELAR",
    "BELAY",
    "BELEE",
    "BELGA",
    "BELLS",
    "BELON",
    "BELTS",
    "BEMAD",
    "BEMAS",
    "BEMIX",
    "BEMUD",
    "BENDS",
    "BENDY",
    "BENES",
    "BENET",
    "BENGA",
    "BENIS",
    "BENNE",
    "BENNI",
    "BENNY",
    "BENTO",
    "BENTS",
    "BENTY",
    "BEPAT",
    "BERAY",
    "BERES",
    "BERGS",
    "BERKO",
    "BERKS",
    "BERME",
    "BERMS",
    "BEROB",
    "BERYL",
    "BESAT",
    "BESAW",
    "BESEE",
    "BESES",
    "BESIT",
    "BESOM",
    "BESOT",
    "BESTI",
    "BESTS",
    "BETAS",
    "BETED",
    "BETES",
    "BETHS",
    "BETID",
    "BETON",
    "BETTA",
    "BETTY",
    "BEVER",
    "BEVOR",
    "BEVUE",
    "BEVVY",
    "BEWET",
    "BEWIG",
    "BEZES",
    "BEZIL",
    "BEZZY",
    "BHAIS",
    "BHAJI",
    "BHANG",
    "BHATS",
    "BHELS",
    "BHOOT",
    "BHUNA",
    "BHUTS",
    "BIACH",
    "BIALI",
    "BIALY",
    "BIBBS",
    "BIBES",
    "BICCY",
    "BICES",
    "BIDED",
    "BIDER",
    "BIDES",
    "BIDET",
    "BIDIS",
    "BIDON",
    "BIELD",
    "BIERS",
    "BIFFO",
    "BIFFS",
    "BIFFY",
    "BIFID",
    "BIGAE",
    "BIGGS",
    "BIGGY",
    "BIGHA",
    "BIGHT",
    "BIGLY",
    "BIGOS",
    "BIJOU",
    "BIKED",
    "BIKER",
    "BIKES",
    "BIKIE",
    "BILBO",
    "BILBY",
    "BILED",
    "BILES",
    "BILGY",
    "BILKS",
    "BILLS",
    "BIMAH",
    "BIMAS",
    "BIMBO",
    "BINAL",
    "BINDI",
    "BINDS",
    "BINER",
    "BINES",
    "BINGS",
    "BINGY",
    "BINIT",
    "BINKS",
    "BINTS",
    "BIOGS",
    "BIONT",
    "BIOTA",
    "BIPED",
    "BIPOD",
    "BIRDS",
    "BIRKS",
    "BIRLE",
    "BIRLS",
    "BIROS",
    "BIRRS",
    "BIRSE",
    "BIRSY",
    "BISES",
    "BISKS",
    "BISOM",
    "BITER",
    "BITES",
    "BITOS",
    "BITOU",
    "BITSY",
    "BITTE",
    "BITTS",
    "BIVIA",
    "BIVVY",
    "BIZES",
    "BIZZO",
    "BIZZY",
    "BLABS",
    "BLADS",
    "BLADY",
    "BLAER",
    "BLAES",
    "BLAFF",
    "BLAGS",
    "BLAHS",
    "BLAIN",
    "BLAMS",
    "BLART",
    "BLASE",
    "BLASH",
    "BLATE",
    "BLATS",
    "BLATT",
    "BLAUD",
    "BLAWN",
    "BLAWS",
    "BLAYS",
    "BLEAR",
    "BLEBS",
    "BLECH",
    "BLEES",
    "BLENT",
    "BLERT",
    "BLEST",
    "BLETS",
    "BLEYS",
    "BLIMY",
    "BLING",
    "BLINI",
    "BLINS",
    "BLINY",
    "BLIPS",
    "BLIST",
    "BLITE",
    "BLITS",
    "BLIVE",
    "BLOBS",
    "BLOCS",
    "BLOGS",
    "BLOOK",
    "BLOOP",
    "BLORE",
    "BLOTS",
    "BLOWS",
    "BLOWY",
    "BLUBS",
    "BLUDE",
    "BLUDS",
    "BLUDY",
    "BLUED",
    "BLUES",
    "BLUET",
    "BLUEY",
    "BLUID",
    "BLUME",
    "BLUNK",
    "BLURS",
    "BLYPE",
    "BOABS",
    "BOAKS",
    "BOARS",
    "BOART",
    "BOATS",
    "BOBAC",
    "BOBAK",
    "BOBAS",
    "BOBOL",
    "BOBOS",
    "BOCCA",
    "BOCCE",
    "BOCCI",
    "BOCHE",
    "BOCKS",
    "BODED",
    "BODES",
    "BODGE",
    "BODHI",
    "BODLE",
    "BOEPS",
    "BOETS",
    "BOEUF",
    "BOFFO",
    "BOFFS",
    "BOGAN",
    "BOGEY",
    "BOGGY",
    "BOGIE",
    "BOGLE",
    "BOGUE",
    "BOGUS",
    "BOHEA",
    "BOHOS",
    "BOILS",
    "BOING",
    "BOINK",
    "BOITE",
    "BOKED",
    "BOKEH",
    "BOKES",
    "BOKOS",
    "BOLAR",
    "BOLAS",
    "BOLDS",
    "BOLES",
    "BOLIX",
    "BOLLS",
    "BOLOS",
    "BOLTS",
    "BOLUS",
    "BOMAS",
    "BOMBE",
    "BOMBO",
    "BOMBS",
    "BONCE",
    "BONDS",
    "BONED",
    "BONER",
    "BONES",
    "BONGS",
    "BONIE",
    "BONKS",
    "BONNE",
    "BONNY",
    "BONZA",
    "BONZE",
    "BOOAI",
    "BOOAY",
    "BOOBS",
    "BOODY",
    "BOOED",
    "BOOFY",
    "BOOGY",
    "BOOHS",
    "BOOKS",
    "BOOKY",
    "BOOLS",
    "BOOMS",
    "BOOMY",
    "BOONG",
    "BOONS",
    "BOORD",
    "BOORS",
    "BOOSE",
    "BOOTS",
    "BOPPY",
    "BORAK",
    "BORAL",
    "BORAS",
    "BORDE",
    "BORDS",
    "BORED",
    "BOREE",
    "BOREL",
    "BORER",
    "BORES",
    "BORGO",
    "BORIC",
    "BORKS",
    "BORMS",
    "BORNA",
    "BORON",
    "BORTS",
    "BORTY",
    "BORTZ",
    "BOSIE",
    "BOSKS",
    "BOSKY",
    "BOSON",
    "BOSUN",
    "BOTAS",
    "BOTEL",
    "BOTES",
    "BOTHY",
    "BOTTE",
    "BOTTS",
    "BOTTY",
    "BOUGE",
    "BOUKS",
    "BOULT",
    "BOUNS",
    "BOURD",
    "BOURG",
    "BOURN",
    "BOUSE",
    "BOUSY",
    "BOUTS",
    "BOVID",
    "BOWAT",
    "BOWED",
    "BOWER",
    "BOWES",
    "BOWET",
    "BOWIE",
    "BOWLS",
    "BOWNE",
    "BOWRS",
    "BOWSE",
    "BOXED",
    "BOXEN",
    "BOXES",
    "BOXLA",
    "BOXTY",
    "BOYAR",
    "BOYAU",
    "BOYED",
    "BOYFS",
    "BOYGS",
    "BOYLA",
    "BOYOS",
    "BOYSY",
    "BOZOS",
    "BRAAI",
    "BRACH",
    "BRACK",
    "BRACT",
    "BRADS",
    "BRAES",
    "BRAGS",
    "BRAIL",
    "BRAKS",
    "BRAKY",
    "BRAME",
    "BRANE",
    "BRANK",
    "BRANS",
    "BRANT",
    "BRAST",
    "BRATS",
    "BRAVA",
    "BRAVI",
    "BRAWS",
    "BRAXY",
    "BRAYS",
    "BRAZA",
    "BRAZE",
    "BREAM",
    "BREDE",
    "BREDS",
    "BREEM",
    "BREER",
    "BREES",
    "BREID",
    "BREIS",
    "BREME",
    "BRENS",
    "BRENT",
    "BRERE",
    "BRERS",
    "BREVE",
    "BREWS",
    "BREYS",
    "BRIER",
    "BRIES",
    "BRIGS",
    "BRIKI",
    "BRIKS",
    "BRILL",
    "BRIMS",
    "BRINS",
    "BRIOS",
    "BRISE",
    "BRISS",
    "BRITH",
    "BRITS",
    "BRITT",
    "BRIZE",
    "BROCH",
    "BROCK",
    "BRODS",
    "BROGH",
    "BROGS",
    "BROME",
    "BROMO",
    "BRONC",
    "BROND",
    "BROOL",
    "BROOS",
    "BROSE",
    "BROSY",
    "BROWS",
    "BRUGH",
    "BRUIN",
    "BRUIT",
    "BRULE",
    "BRUME",
    "BRUNG",
    "BRUSK",
    "BRUST",
    "BRUTS",
    "BUATS",
    "BUAZE",
    "BUBAL",
    "BUBAS",
    "BUBBA",
    "BUBBE",
    "BUBBY",
    "BUBUS",
    "BUCHU",
    "BUCKO",
    "BUCKS",
    "BUCKU",
    "BUDAS",
    "BUDIS",
    "BUDOS",
    "BUFFA",
    "BUFFE",
    "BUFFI",
    "BUFFO",
    "BUFFS",
    "BUFFY",
    "BUFOS",
    "BUFTY",
    "BUHLS",
    "BUHRS",
    "BUIKS",
    "BUIST",
    "BUKES",
    "BULBS",
    "BULGY",
    "BULKS",
    "BULLA",
    "BULLS",
    "BULSE",
    "BUMBO",
    "BUMFS",
    "BUMPH",
    "BUMPS",
    "BUMPY",
    "BUNAS",
    "BUNCE",
    "BUNCO",
    "BUNDE",
    "BUNDH",
    "BUNDS",
    "BUNDT",
    "BUNDU",
    "BUNDY",
    "BUNGS",
    "BUNGY",
    "BUNIA",
    "BUNJE",
    "BUNJY",
    "BUNKO",
    "BUNKS",
    "BUNNS",
    "BUNTS",
    "BUNTY",
    "BUNYA",
    "BUOYS",
    "BUPPY",
    "BURAN",
    "BURAS",
    "BURBS",
    "BURDS",
    "BURET",
    "BURFI",
    "BURGH",
    "BURGS",
    "BURIN",
    "BURKA",
    "BURKE",
    "BURKS",
    "BURLS",
    "BURNS",
    "BUROO",
    "BURPS",
    "BURQA",
    "BURRO",
    "BURRS",
    "BURRY",
    "BURSA",
    "BURSE",
    "BUSBY",
    "BUSES",
    "BUSKS",
    "BUSKY",
    "BUSSU",
    "BUSTI",
    "BUSTS",
    "BUSTY",
    "BUTEO",
    "BUTES",
    "BUTLE",
    "BUTOH",
    "BUTTS",
    "BUTTY",
    "BUTUT",
    "BUTYL",
    "BUZZY",
    "BWANA",
    "BWAZI",
    "BYDED",
    "BYDES",
    "BYKED",
    "BYKES",
    "BYRES",
    "BYRLS",
    "BYSSI",
    "BYTES",
    "BYWAY",
    "CAAED",
    "CABAS",
    "CABER",
    "CABOB",
    "CABOC",
    "CABRE",
    "CACAS",
    "CACKS",
    "CACKY",
    "CADEE",
    "CADES",
    "CADGE",
    "CADGY",
    "CADIE",
    "CADIS",
    "CADRE",
    "CAECA",
    "CAESE",
    "CAFES",
    "CAFFS",
    "CAGED",
    "CAGER",
    "CAGES",
    "CAGOT",
    "CAHOW",
    "CAIDS",
    "CAINS",
    "CAIRD",
    "CAJON",
    "CAJUN",
    "CAKED",
    "CAKES",
    "CAKEY",
    "CALFS",
    "CALID",
    "CALIF",
    "CALIX",
    "CALKS",
    "CALLA",
    "CALLS",
    "CALMS",
    "CALMY",
    "CALOS",
    "CALPA",
    "CALPS",
    "CALVE",
    "CALYX",
    "CAMAN",
    "CAMAS",
    "CAMES",
    "CAMIS",
    "CAMOS",
    "CAMPI",
    "CAMPO",
    "CAMPS",
    "CAMPY",
    "CAMUS",
    "CANED",
    "CANEH",
    "CANER",
    "CANES",
    "CANGS",
    "CANID",
    "CANNA",
    "CANNS",
    "CANSO",
    "CANST",
    "CANTO",
    "CANTS",
    "CANTY",
    "CAPAS",
    "CAPED",
    "CAPES",
    "CAPEX",
    "CAPHS",
    "CAPIZ",
    "CAPLE",
    "CAPON",
    "CAPOS",
    "CAPOT",
    "CAPRI",
    "CAPUL",
    "CARAP",
    "CARBO",
    "CARBS",
    "CARBY",
    "CARDI",
    "CARDS",
    "CARDY",
    "CARED",
    "CARER",
    "CARES",
    "CARET",
    "CAREX",
    "CARKS",
    "CARLE",
    "CARLS",
    "CARNS",
    "CARNY",
    "CAROB",
    "CAROM",
    "CARON",
    "CARPI",
    "CARPS",
    "CARRS",
    "CARSE",
    "CARTA",
    "CARTE",
    "CARTS",
    "CARVY",
    "CASAS",
    "CASCO",
    "CASED",
    "CASES",
    "CASKS",
    "CASKY",
    "CASTS",
    "CASUS",
    "CATES",
    "CAUDA",
    "CAUKS",
    "CAULD",
    "CAULS",
    "CAUMS",
    "CAUPS",
    "CAURI",
    "CAUSA",
    "CAVAS",
    "CAVED",
    "CAVEL",
    "CAVER",
    "CAVES",
    "CAVIE",
    "CAWED",
    "CAWKS",
    "CAXON",
    "CEAZE",
    "CEBID",
    "CECAL",
    "CECUM",
    "CEDED",
    "CEDER",
    "CEDES",
    "CEDIS",
    "CEIBA",
    "CEILI",
    "CEILS",
    "CELEB",
    "CELLA",
    "CELLI",
    "CELLS",
    "CELOM",
    "CELTS",
    "CENSE",
    "CENTO",
    "CENTS",
    "CENTU",
    "CEORL",
    "CEPES",
    "CERCI",
    "CERED",
    "CERES",
    "CERGE",
    "CERIA",
    "CERIC",
    "CERNE",
    "CEROC",
    "CEROS",
    "CERTS",
    "CERTY",
    "CESSE",
    "CESTA",
    "CESTI",
    "CETES",
    "CETYL",
    "CEZVE",
    "CHACE",
    "CHACK",
    "CHACO",
    "CHADO",
    "CHADS",
    "CHAFT",
    "CHAIS",
    "CHALS",
    "CHAMS",
    "CHANA",
    "CHANG",
    "CHANK",
    "CHAPE",
    "CHAPS",
    "CHAPT",
    "CHARA",
    "CHARE",
    "CHARK",
    "CHARR",
    "CHARS",
    "CHARY",
    "CHATS",
    "CHAVE",
    "CHAVS",
    "CHAWK",
    "CHAWS",
    "CHAYA",
    "CHAYS",
    "CHEEP",
    "CHEFS",
    "CHEKA",
    "CHELA",
    "CHELP",
    "CHEMO",
    "CHEMS",
    "CHERE",
    "CHERT",
    "CHETH",
    "CHEVY",
    "CHEWS",
    "CHEWY",
    "CHIAO",
    "CHIAS",
    "CHIBS",
    "CHICA",
    "CHICH",
    "CHICO",
    "CHICS",
    "CHIEL",
    "CHIKS",
    "CHILE",
    "CHIMB",
    "CHIMO",
    "CHIMP",
    "CHINE",
    "CHING",
    "CHINO",
    "CHINS",
    "CHIPS",
    "CHIRK",
    "CHIRL",
    "CHIRM",
    "CHIRO",
    "CHIRR",
    "CHIRT",
    "CHIRU",
    "CHITS",
    "CHIVE",
    "CHIVS",
    "CHIVY",
    "CHIZZ",
    "CHOCO",
    "CHOCS",
    "CHODE",
    "CHOGS",
    "CHOIL",
    "CHOKO",
    "CHOKY",
    "CHOLA",
    "CHOLI",
    "CHOLO",
    "CHOMP",
    "CHONS",
    "CHOOF",
    "CHOOK",
    "CHOOM",
    "CHOON",
    "CHOPS",
    "CHOTA",
    "CHOTT",
    "CHOUT",
    "CHOUX",
    "CHOWK",
    "CHOWS",
    "CHUBS",
    "CHUFA",
    "CHUFF",
    "CHUGS",
    "CHUMS",
    "CHURL",
    "CHURR",
    "CHUSE",
    "CHUTS",
    "CHYLE",
    "CHYME",
    "CHYND",
    "CIBOL",
    "CIDED",
    "CIDES",
    "CIELS",
    "CIGGY",
    "CILIA",
    "CILLS",
    "CIMAR",
    "CIMEX",
    "CINCT",
    "CINES",
    "CINQS",
    "CIONS",
    "CIPPI",
    "CIRCS",
    "CIRES",
    "CIRLS",
    "CIRRI",
    "CISCO",
    "CISSY",
    "CISTS",
    "CITAL",
    "CITED",
    "CITER",
    "CITES",
    "CIVES",
    "CIVET",
    "CIVIE",
    "CIVVY",
    "CLACH",
    "CLADE",
    "CLADS",
    "CLAES",
    "CLAGS",
    "CLAME",
    "CLAMS",
    "CLANS",
    "CLAPS",
    "CLAPT",
    "CLARO",
    "CLART",
    "CLARY",
    "CLAST",
    "CLATS",
    "CLAUT",
    "CLAVE",
    "CLAVI",
    "CLAWS",
    "CLAYS",
    "CLECK",
    "CLEEK",
    "CLEEP",
    "CLEFS",
    "CLEGS",
    "CLEIK",
    "CLEMS",
    "CLEPE",
    "CLEPT",
    "CLEVE",
    "CLEWS",
    "CLIED",
    "CLIES",
    "CLIFT",
    "CLIME",
    "CLINE",
    "CLINT",
    "CLIPE",
    "CLIPS",
    "CLIPT",
    "CLITS",
    "CLOAM",
    "CLODS",
    "CLOFF",
    "CLOGS",
    "CLOKE",
    "CLOMB",
    "CLOMP",
    "CLONK",
    "CLONS",
    "CLOOP",
    "CLOOT",
    "CLOPS",
    "CLOTE",
    "CLOTS",
    "CLOUR",
    "CLOUS",
    "CLOWS",
    "CLOYE",
    "CLOYS",
    "CLOZE",
    "CLUBS",
    "CLUES",
    "CLUEY",
    "CLUNK",
    "CLYPE",
    "CNIDA",
    "COACT",
    "COADY",
    "COALA",
    "COALS",
    "COALY",
    "COAPT",
    "COARB",
    "COATE",
    "COATI",
    "COATS",
    "COBBS",
    "COBBY",
    "COBIA",
    "COBLE",
    "COBZA",
    "COCAS",
    "COCCI",
    "COCCO",
    "COCKS",
    "COCKY",
    "COCOS",
    "CODAS",
    "CODEC",
    "CODED",
    "CODEN",
    "CODER",
    "CODES",
    "CODEX",
    "CODON",
    "COEDS",
    "COFFS",
    "COGIE",
    "COGON",
    "COGUE",
    "COHAB",
    "COHEN",
    "COHOE",
    "COHOG",
    "COHOS",
    "COIFS",
    "COIGN",
    "COILS",
    "COINS",
    "COIRS",
    "COITS",
    "COKED",
    "COKES",
    "COLAS",
    "COLBY",
    "COLDS",
    "COLED",
    "COLES",
    "COLEY",
    "COLIC",
    "COLIN",
    "COLLS",
    "COLLY",
    "COLOG",
    "COLTS",
    "COLZA",
    "COMAE",
    "COMAL",
    "COMAS",
    "COMBE",
    "COMBI",
    "COMBO",
    "COMBS",
    "COMBY",
    "COMER",
    "COMES",
    "COMIX",
    "COMMO",
    "COMMS",
    "COMMY",
    "COMPO",
    "COMPS",
    "COMPT",
    "COMTE",
    "COMUS",
    "CONED",
    "CONES",
    "CONEY",
    "CONFS",
    "CONGA",
    "CONGE",
    "CONGO",
    "CONIA",
    "CONIN",
    "CONKS",
    "CONKY",
    "CONNE",
    "CONNS",
    "CONTE",
    "CONTO",
    "CONUS",
    "CONVO",
    "COOCH",
    "COOED",
    "COOEE",
    "COOER",
    "COOEY",
    "COOFS",
    "COOKS",
    "COOKY",
    "COOLS",
    "COOLY",
    "COOMB",
    "COOMS",
    "COOMY",
    "COOPS",
    "COOPT",
    "COOST",
    "COOTS",
    "COOZE",
    "COPAL",
    "COPAY",
    "COPED",
    "COPEN",
    "COPER",
    "COPES",
    "COPPY",
    "COPRA",
    "COPSY",
    "COQUI",
    "CORAM",
    "CORBE",
    "CORBY",
    "CORDS",
    "CORED",
    "CORES",
    "COREY",
    "CORGI",
    "CORIA",
    "CORKS",
    "CORKY",
    "CORMS",
    "CORNI",
    "CORNO",
    "CORNS",
    "CORNU",
    "CORPS",
    "CORSE",
    "CORSO",
    "COSEC",
    "COSED",
    "COSES",
    "COSET",
    "COSEY",
    "COSIE",
    "COSTA",
    "COSTE",
    "COSTS",
    "COTAN",
    "COTED",
    "COTES",
    "COTHS",
    "COTTA",
    "COTTS",
    "COUDE",
    "COUPS",
    "COURB",
    "COURD",
    "COURE",
    "COURS",
    "COUTA",
    "COUTH",
    "COVED",
    "COVES",
    "COVIN",
    "COWAL",
    "COWAN",
    "COWED",
    "COWKS",
    "COWLS",
    "COWPS",
    "COWRY",
    "COXAE",
    "COXAL",
    "COXED",
    "COXES",
    "COXIB",
    "COYAU",
    "COYED",
    "COYER",
    "COYPU",
    "COZED",
    "COZEN",
    "COZES",
    "COZEY",
    "COZIE",
    "CRAAL",
    "CRABS",
    "CRAGS",
    "CRAIC",
    "CRAIG",
    "CRAKE",
    "CRAME",
    "CRAMS",
    "CRANS",
    "CRAPE",
    "CRAPS",
    "CRAPY",
    "CRARE",
    "CRAWS",
    "CRAYS",
    "CREDS",
    "CREEL",
    "CREES",
    "CREMS",
    "CRENA",
    "CREPS",
    "CREPY",
    "CREWE",
    "CREWS",
    "CRIAS",
    "CRIBS",
    "CRIES",
    "CRIMS",
    "CRINE",
    "CRIOS",
    "CRIPE",
    "CRIPS",
    "CRISE",
    "CRITH",
    "CRITS",
    "CROCI",
    "CROCS",
    "CROFT",
    "CROGS",
    "CROMB",
    "CROME",
    "CRONK",
    "CRONS",
    "CROOL",
    "CROON",
    "CROPS",
    "CRORE",
    "CROST",
    "CROUT",
    "CROWS",
    "CROZE",
    "CRUCK",
    "CRUDO",
    "CRUDS",
    "CRUDY",
    "CRUES",
    "CRUET",
    "CRUFT",
    "CRUNK",
    "CRUOR",
    "CRURA",
    "CRUSE",
    "CRUSY",
    "CRUVE",
    "CRWTH",
    "CRYER",
    "CTENE",
    "CUBBY",
    "CUBEB",
    "CUBED",
    "CUBER",
    "CUBES",
    "CUBIT",
    "CUDDY",
    "CUFFO",
    "CUFFS",
    "CUIFS",
    "CUING",
    "CUISH",
    "CUITS",
    "CUKES",
    "CULCH",
    "CULET",
    "CULEX",
    "CULLS",
    "CULLY",
    "CULMS",
    "CULPA",
    "CULTI",
    "CULTS",
    "CULTY",
    "CUMEC",
    "CUNDY",
    "CUNEI",
    "CUNIT",
    "CUNTS",
    "CUPEL",
    "CUPID",
    "CUPPA",
    "CUPPY",
    "CURAT",
    "CURBS",
    "CURCH",
    "CURDS",
    "CURDY",
    "CURED",
    "CURER",
    "CURES",
    "CURET",
    "CURFS",
    "CURIA",
    "CURIE",
    "CURLI",
    "CURLS",
    "CURNS",
    "CURNY",
    "CURRS",
    "CURSI",
    "CURST",
    "CUSEC",
    "CUSHY",
    "CUSKS",
    "CUSPS",
    "CUSPY",
    "CUSSO",
    "CUSUM",
    "CUTCH",
    "CUTER",
    "CUTES",
    "CUTEY",
    "CUTIN",
    "CUTIS",
    "CUTTO",
    "CUTTY",
    "CUTUP",
    "CUVEE",
    "CUZES",
    "CWTCH",
    "CYANO",
    "CYANS",
    "CYCAD",
    "CYCAS",
    "CYCLO",
    "CYDER",
    "CYLIX",
    "CYMAE",
    "CYMAR",
    "CYMAS",
    "CYMES",
    "CYMOL",
    "CYSTS",
    "CYTES",
    "CYTON",
    "CZARS",
    "DAALS",
    "DABBA",
    "DACES",
    "DACHA",
    "DACKS",
    "DADAH",
    "DADAS",
    "DADOS",
    "DAFFS",
    "DAFFY",
    "DAGGA",
    "DAGGY",
    "DAGOS",
    "DAHLS",
    "DAIKO",
    "DAINE",
    "DAINT",
    "DAKER",
    "DALED",
    "DALES",
    "DALIS",
    "DALLE",
    "DALTS",
    "DAMAN",
    "DAMAR",
    "DAMES",
    "DAMME",
    "DAMNS",
    "DAMPS",
    "DAMPY",
    "DANCY",
    "DANGS",
    "DANIO",
    "DANKS",
    "DANNY",
    "DANTS",
    "DARAF",
    "DARBS",
    "DARCY",
    "DARED",
    "DARER",
    "DARES",
    "DARGA",
    "DARGS",
    "DARIC",
    "DARIS",
    "DARKS",
    "DARNS",
    "DARRE",
    "DARTS",
    "DARZI",
    "DASHI",
    "DASHY",
    "DATAL",
    "DATED",
    "DATER",
    "DATES",
    "DATOS",
    "DATTO",
    "DAUBE",
    "DAUBS",
    "DAUBY",
    "DAUDS",
    "DAULT",
    "DAURS",
    "DAUTS",
    "DAVEN",
    "DAVIT",
    "DAWAH",
    "DAWDS",
    "DAWED",
    "DAWEN",
    "DAWKS",
    "DAWNS",
    "DAWTS",
    "DAYAN",
    "DAYCH",
    "DAYNT",
    "DAZED",
    "DAZER",
    "DAZES",
    "DEADS",
    "DEAIR",
    "DEALS",
    "DEANS",
    "DEARE",
    "DEARN",
    "DEARS",
    "DEARY",
    "DEASH",
    "DEAVE",
    "DEAWS",
    "DEAWY",
    "DEBAG",
    "DEBBY",
    "DEBEL",
    "DEBES",
    "DEBTS",
    "DEBUD",
    "DEBUR",
    "DEBUS",
    "DEBYE",
    "DECAD",
    "DECAF",
    "DECAN",
    "DECKO",
    "DECKS",
    "DECOS",
    "DEDAL",
    "DEEDS",
    "DEEDY",
    "DEELY",
    "DEEMS",
    "DEENS",
    "DEEPS",
    "DEERE",
    "DEERS",
    "DEETS",
    "DEEVE",
    "DEEVS",
    "DEFAT",
    "DEFFO",
    "DEFIS",
    "DEFOG",
    "DEGAS",
    "DEGUM",
    "DEGUS",
    "DEICE",
    "DEIDS",
    "DEIFY",
    "DEILS",
    "DEISM",
    "DEIST",
    "DEKED",
    "DEKES",
    "DEKKO",
    "DELED",
    "DELES",
    "DELFS",
    "DELFT",
    "DELIS",
    "DELLS",
    "DELLY",
    "DELOS",
    "DELPH",
    "DELTS",
    "DEMAN",
    "DEMES",
    "DEMIC",
    "DEMIT",
    "DEMOB",
    "DEMOI",
    "DEMOS",
    "DEMPT",
    "DENAR",
    "DENAY",
    "DENCH",
    "DENES",
    "DENET",
    "DENIS",
    "DENTS",
    "DEOXY",
    "DERAT",
    "DERAY",
    "DERED",
    "DERES",
    "DERIG",
    "DERMA",
    "DERMS",
    "DERNS",
    "DERNY",
    "DEROS",
    "DERRO",
    "DERRY",
    "DERTH",
    "DERVS",
    "DESEX",
    "DESHI",
    "DESIS",
    "DESKS",
    "DESSE",
    "DEVAS",
    "DEVEL",
    "DEVIS",
    "DEVON",
    "DEVOS",
    "DEVOT",
    "DEWAN",
    "DEWAR",
    "DEWAX",
    "DEWED",
    "DEXES",
    "DEXIE",
    "DHABA",
    "DHAKS",
    "DHALS",
    "DHIKR",
    "DHOBI",
    "DHOLE",
    "DHOLL",
    "DHOLS",
    "DHOTI",
    "DHOWS",
    "DHUTI",
    "DIACT",
    "DIALS",
    "DIANE",
    "DIAZO",
    "DIBBS",
    "DICED",
    "DICER",
    "DICES",
    "DICHT",
    "DICKS",
    "DICKY",
    "DICOT",
    "DICTA",
    "DICTS",
    "DICTY",
    "DIDDY",
    "DIDIE",
    "DIDOS",
    "DIDST",
    "DIEBS",
    "DIELS",
    "DIENE",
    "DIETS",
    "DIFFS",
    "DIGHT",
    "DIKAS",
    "DIKED",
    "DIKER",
    "DIKES",
    "DIKEY",
    "DILDO",
    "DILLI",
    "DILLS",
    "DIMBO",
    "DIMER",
    "DIMES",
    "DIMPS",
    "DINAR",
    "DINED",
    "DINES",
    "DINGE",
    "DINGS",
    "DINIC",
    "DINKS",
    "DINKY",
    "DINNA",
    "DINOS",
    "DINTS",
    "DIOLS",
    "DIOTA",
    "DIPPY",
    "DIPSO",
    "DIRAM",
    "DIRER",
    "DIRKE",
    "DIRKS",
    "DIRLS",
    "DIRTS",
    "DISAS",
    "DISCI",
    "DISCS",
    "DISHY",
    "DISKS",
    "DISME",
    "DITAL",
    "DITAS",
    "DITED",
    "DITES",
    "DITSY",
    "DITTS",
    "DITZY",
    "DIVAN",
    "DIVAS",
    "DIVED",
    "DIVES",
    "DIVIS",
    "DIVNA",
    "DIVOS",
    "DIVOT",
    "DIVVY",
    "DIWAN",
    "DIXIE",
    "DIXIT",
    "DIYAS",
    "DIZEN",
    "DJINN",
    "DJINS",
    "DOABS",
    "DOATS",
    "DOBBY",
    "DOBES",
    "DOBIE",
    "DOBLA",
    "DOBRA",
    "DOBRO",
    "DOCHT",
    "DOCKS",
    "DOCOS",
    "DOCUS",
    "DODDY",
    "DODOS",
    "DOEKS",
    "DOERS",
    "DOEST",
    "DOETH",
    "DOFFS",
    "DOGAN",
    "DOGES",
    "DOGEY",
    "DOGGO",
    "DOGGY",
    "DOGIE",
    "DOHYO",
    "DOILT",
    "DOILY",
    "DOITS",
    "DOJOS",
    "DOLCE",
    "DOLCI",
    "DOLED",
    "DOLES",
    "DOLIA",
    "DOLLS",
    "DOLMA",
    "DOLOR",
    "DOLOS",
    "DOLTS",
    "DOMAL",
    "DOMED",
    "DOMES",
    "DOMIC",
    "DONAH",
    "DONAS",
    "DONEE",
    "DONER",
    "DONGA",
    "DONGS",
    "DONKO",
    "DONNA",
    "DONNE",
    "DONNY",
    "DONSY",
    "DOOBS",
    "DOOCE",
    "DOODY",
    "DOOKS",
    "DOOLE",
    "DOOLS",
    "DOOLY",
    "DOOMS",
    "DOOMY",
    "DOONA",
    "DOORN",
    "DOORS",
    "DOOZY",
    "DOPAS",
    "DOPED",
    "DOPER",
    "DOPES",
    "DORAD",
    "DORBA",
    "DORBS",
    "DOREE",
    "DORES",
    "DORIC",
    "DORIS",
    "DORKS",
    "DORKY",
    "DORMS",
    "DORMY",
    "DORPS",
    "DORRS",
    "DORSA",
    "DORSE",
    "DORTS",
    "DORTY",
    "DOSAI",
    "DOSAS",
    "DOSED",
    "DOSEH",
    "DOSER",
    "DOSES",
    "DOSHA",
    "DOTAL",
    "DOTED",
    "DOTER",
    "DOTES",
    "DOTTY",
    "DOUAR",
    "DOUCE",
    "DOUCS",
    "DOUKS",
    "DOULA",
    "DOUMA",
    "DOUMS",
    "DOUPS",
    "DOURA",
    "DOUSE",
    "DOUTS",
    "DOVED",
    "DOVEN",
    "DOVER",
    "DOVES",
    "DOVIE",
    "DOWAR",
    "DOWDS",
    "DOWED",
    "DOWER",
    "DOWIE",
    "DOWLE",
    "DOWLS",
    "DOWLY",
    "DOWNA",
    "DOWNS",
    "DOWPS",
    "DOWSE",
    "DOWTS",
    "DOXED",
    "DOXES",
    "DOXIE",
    "DOYEN",
    "DOYLY",
    "DOZED",
    "DOZER",
    "DOZES",
    "DRABS",
    "DRACK",
    "DRACO",
    "DRAFF",
    "DRAGS",
    "DRAIL",
    "DRAMS",
    "DRANT",
    "DRAPS",
    "DRATS",
    "DRAVE",
    "DRAWS",
    "DRAYS",
    "DREAR",
    "DRECK",
    "DREED",
    "DREER",
    "DREES",
    "DREGS",
    "DREKS",
    "DRENT",
    "DRERE",
    "DREST",
    "DREYS",
    "DRIBS",
    "DRICE",
    "DRIES",
    "DRILY",
    "DRIPS",
    "DRIPT",
    "DROID",
    "DROIL",
    "DROKE",
    "DROLE",
    "DROME",
    "DRONY",
    "DROOB",
    "DROOG",
    "DROOK",
    "DROPS",
    "DROPT",
    "DROUK",
    "DROWS",
    "DRUBS",
    "DRUGS",
    "DRUMS",
    "DRUPE",
    "DRUSE",
    "DRUSY",
    "DRUXY",
    "DRYAD",
    "DRYAS",
    "DSOBO",
    "DSOMO",
    "DUADS",
    "DUALS",
    "DUANS",
    "DUARS",
    "DUBBO",
    "DUCAL",
    "DUCAT",
    "DUCES",
    "DUCKS",
    "DUCKY",
    "DUCTS",
    "DUDDY",
    "DUDED",
    "DUDES",
    "DUELS",
    "DUETS",
    "DUETT",
    "DUFFS",
    "DUFUS",
    "DUING",
    "DUITS",
    "DUKAS",
    "DUKED",
    "DUKES",
    "DUKKA",
    "DULCE",
    "DULES",
    "DULIA",
    "DULLS",
    "DULSE",
    "DUMAS",
    "DUMBO",
    "DUMBS",
    "DUMKA",
    "DUMKY",
    "DUMPS",
    "DUNAM",
    "DUNCH",
    "DUNES",
    "DUNGS",
    "DUNGY",
    "DUNKS",
    "DUNNO",
    "DUNNY",
    "DUNSH",
    "DUNTS",
    "DUOMI",
    "DUOMO",
    "DUPED",
    "DUPER",
    "DUPES",
    "DUPLE",
    "DUPLY",
    "DUPPY",
    "DURAL",
    "DURAS",
    "DURED",
    "DURES",
    "DURGY",
    "DURNS",
    "DUROC",
    "DUROS",
    "DUROY",
    "DURRA",
    "DURRS",
    "DURRY",
    "DURST",
    "DURUM",
    "DURZI",
    "DUSKS",
    "DUSTS",
    "DUXES",
    "DWAAL",
    "DWALE",
    "DWALM",
    "DWAMS",
    "DWANG",
    "DWAUM",
    "DWEEB",
    "DWILE",
    "DWINE",
    "DYADS",
    "DYERS",
    "DYKON",
    "DYNEL",
    "DYNES",
    "DZHOS",
    "EAGRE",
    "EALED",
    "EALES",
    "EANED",
    "EARDS",
    "EARED",
    "EARLS",
    "EARNS",
    "EARNT",
    "EARST",
    "EASED",
    "EASER",
    "EASES",
    "EASLE",
    "EASTS",
    "EATHE",
    "EAVED",
    "EAVES",
    "EBBED",
    "EBBET",
    "EBONS",
    "EBOOK",
    "ECADS",
    "ECHED",
    "ECHES",
    "ECHOS",
    "ECRUS",
    "EDEMA",
    "EDGED",
    "EDGER",
    "EDGES",
    "EDILE",
    "EDITS",
    "EDUCE",
    "EDUCT",
    "EEJIT",
    "EENSY",
    "EEVEN",
    "EEVNS",
    "EFFED",
    "EGADS",
    "EGERS",
    "EGEST",
    "EGGAR",
    "EGGED",
    "EGGER",
    "EGMAS",
    "EHING",
    "EIDER",
    "EIDOS",
    "EIGNE",
    "EIKED",
    "EIKON",
    "EILDS",
    "EISEL",
    "EJIDO",
    "EKKAS",
    "ELAIN",
    "ELAND",
    "ELANS",
    "ELCHI",
    "ELDIN",
    "ELEMI",
    "ELFED",
    "ELIAD",
    "ELINT",
    "ELMEN",
    "ELOGE",
    "ELOGY",
    "ELOIN",
    "ELOPS",
    "ELPEE",
    "ELSIN",
    "ELUTE",
    "ELVAN",
    "ELVEN",
    "ELVER",
    "ELVES",
    "EMACS",
    "EMBAR",
    "EMBAY",
    "EMBOG",
    "EMBOW",
    "EMBOX",
    "EMBUS",
    "EMEER",
    "EMEND",
    "EMERG",
    "EMERY",
    "EMEUS",
    "EMICS",
    "EMIRS",
    "EMITS",
    "EMMAS",
    "EMMER",
    "EMMET",
    "EMMEW",
    "EMMYS",
    "EMOJI",
    "EMONG",
    "EMOTE",
    "EMOVE",
    "EMPTS",
    "EMULE",
    "EMURE",
    "EMYDE",
    "EMYDS",
    "ENARM",
    "ENATE",
    "ENDED",
    "ENDER",
    "ENDEW",
    "ENDUE",
    "ENEWS",
    "ENFIX",
    "ENIAC",
    "ENLIT",
    "ENMEW",
    "ENNOG",
    "ENOKI",
    "ENOLS",
    "ENORM",
    "ENOWS",
    "ENROL",
    "ENSEW",
    "ENSKY",
    "ENTIA",
    "ENURE",
    "ENURN",
    "ENVOI",
    "ENZYM",
    "EORLS",
    "EOSIN",
    "EPACT",
    "EPEES",
    "EPHAH",
    "EPHAS",
    "EPHOD",
    "EPHOR",
    "EPICS",
    "EPODE",
    "EPOPT",
    "EPRIS",
    "EQUES",
    "EQUID",
    "ERBIA",
    "EREVS",
    "ERGON",
    "ERGOS",
    "ERGOT",
    "ERHUS",
    "ERICA",
    "ERICK",
    "ERICS",
    "ERING",
    "ERNED",
    "ERNES",
    "EROSE",
    "ERRED",
    "ERSES",
    "ERUCT",
    "ERUGO",
    "ERUVS",
    "ERVEN",
    "ERVIL",
    "ESCAR",
    "ESCOT",
    "ESILE",
    "ESKAR",
    "ESKER",
    "ESNES",
    "ESSES",
    "ESTOC",
    "ESTOP",
    "ESTRO",
    "ETAGE",
    "ETAPE",
    "ETATS",
    "ETENS",
    "ETHAL",
    "ETHNE",
    "ETHYL",
    "ETICS",
    "ETNAS",
    "ETTIN",
    "ETTLE",
    "ETUIS",
    "ETWEE",
    "ETYMA",
    "EUGHS",
    "EUKED",
    "EUPAD",
    "EUROS",
    "EUSOL",
    "EVENS",
    "EVERT",
    "EVETS",
    "EVHOE",
    "EVILS",
    "EVITE",
    "EVOHE",
    "EWERS",
    "EWEST",
    "EWHOW",
    "EWKED",
    "EXAMS",
    "EXEAT",
    "EXECS",
    "EXEEM",
    "EXEME",
    "EXFIL",
    "EXIES",
    "EXINE",
    "EXING",
    "EXITS",
    "EXODE",
    "EXOME",
    "EXONS",
    "EXPAT",
    "EXPOS",
    "EXUDE",
    "EXULS",
    "EXURB",
    "EYASS",
    "EYERS",
    "EYOTS",
    "EYRAS",
    "EYRES",
    "EYRIE",
    "EYRIR",
    "EZINE",
    "FABBY",
    "FACED",
    "FACER",
    "FACES",
    "FACIA",
    "FACTA",
    "FACTS",
    "FADDY",
    "FADED",
    "FADER",
    "FADES",
    "FADGE",
    "FADOS",
    "FAENA",
    "FAERY",
    "FAFFS",
    "FAFFY",
    "FAGIN",
    "FAIKS",
    "FAILS",
    "FAINE",
    "FAINS",
    "FAIRS",
    "FAKED",
    "FAKER",
    "FAKES",
    "FAKEY",
    "FAKIE",
    "FAKIR",
    "FALAJ",
    "FALLS",
    "FAMED",
    "FAMES",
    "FANAL",
    "FANDS",
    "FANES",
    "FANGA",
    "FANGO",
    "FANGS",
    "FANKS",
    "FANON",
    "FANOS",
    "FANUM",
    "FAQIR",
    "FARAD",
    "FARCI",
    "FARCY",
    "FARDS",
    "FARED",
    "FARER",
    "FARES",
    "FARLE",
    "FARLS",
    "FARMS",
    "FAROS",
    "FARRO",
    "FARSE",
    "FARTS",
    "FASCI",
    "FASTI",
    "FASTS",
    "FATED",
    "FATES",
    "FATLY",
    "FATSO",
    "FATWA",
    "FAUGH",
    "FAULD",
    "FAUNS",
    "FAURD",
    "FAUTS",
    "FAUVE",
    "FAVAS",
    "FAVEL",
    "FAVER",
    "FAVES",
    "FAVUS",
    "FAWNS",
    "FAWNY",
    "FAXED",
    "FAXES",
    "FAYED",
    "FAYER",
    "FAYNE",
    "FAYRE",
    "FAZED",
    "FAZES",
    "FEALS",
    "FEARE",
    "FEARS",
    "FEART",
    "FEASE",
    "FEATS",
    "FEAZE",
    "FECES",
    "FECHT",
    "FECIT",
    "FECKS",
    "FEDEX",
    "FEEBS",
    "FEEDS",
    "FEELS",
    "FEENS",
    "FEERS",
    "FEESE",
    "FEEZE",
    "FEHME",
    "FEINT",
    "FEIST",
    "FELCH",
    "FELID",
    "FELLS",
    "FELLY",
    "FELTS",
    "FELTY",
    "FEMAL",
    "FEMES",
    "FEMMY",
    "FENDS",
    "FENDY",
    "FENIS",
    "FENKS",
    "FENNY",
    "FENTS",
    "FEODS",
    "FEOFF",
    "FERER",
    "FERES",
    "FERIA",
    "FERLY",
    "FERMI",
    "FERMS",
    "FERNS",
    "FERNY",
    "FESSE",
    "FESTA",
    "FESTS",
    "FESTY",
    "FETAS",
    "FETED",
    "FETES",
    "FETOR",
    "FETTA",
    "FETTS",
    "FETWA",
    "FEUAR",
    "FEUDS",
    "FEUED",
    "FEYED",
    "FEYER",
    "FEYLY",
    "FEZES",
    "FEZZY",
    "FIARS",
    "FIATS",
    "FIBRO",
    "FICES",
    "FICHE",
    "FICHU",
    "FICIN",
    "FICOS",
    "FIDES",
    "FIDGE",
    "FIDOS",
    "FIEFS",
    "FIENT",
    "FIERE",
    "FIERS",
    "FIEST",
    "FIFED",
    "FIFER",
    "FIFES",
    "FIFIS",
    "FIGGY",
    "FIGOS",
    "FIKED",
    "FIKES",
    "FILAR",
    "FILCH",
    "FILED",
    "FILES",
    "FILII",
    "FILKS",
    "FILLE",
    "FILLO",
    "FILLS",
    "FILMI",
    "FILMS",
    "FILOS",
    "FILUM",
    "FINCA",
    "FINDS",
    "FINED",
    "FINES",
    "FINIS",
    "FINKS",
    "FINNY",
    "FINOS",
    "FIORD",
    "FIQHS",
    "FIQUE",
    "FIRED",
    "FIRER",
    "FIRES",
    "FIRIE",
    "FIRKS",
    "FIRMS",
    "FIRNS",
    "FIRRY",
    "FIRTH",
    "FISCS",
    "FISKS",
    "FISTS",
    "FISTY",
    "FITCH",
    "FITLY",
    "FITNA",
    "FITTE",
    "FITTS",
    "FIVER",
    "FIVES",
    "FIXED",
    "FIXES",
    "FIXIT",
    "FJELD",
    "FLABS",
    "FLAFF",
    "FLAGS",
    "FLAKS",
    "FLAMM",
    "FLAMS",
    "FLAMY",
    "FLANE",
    "FLANS",
    "FLAPS",
    "FLARY",
    "FLATS",
    "FLAVA",
    "FLAWN",
    "FLAWS",
    "FLAWY",
    "FLAXY",
    "FLAYS",
    "FLEAM",
    "FLEAS",
    "FLEEK",
    "FLEER",
    "FLEES",
    "FLEGS",
    "FLEME",
    "FLEUR",
    "FLEWS",
    "FLEXI",
    "FLEXO",
    "FLEYS",
    "FLICS",
    "FLIED",
    "FLIES",
    "FLIMP",
    "FLIMS",
    "FLIPS",
    "FLIRS",
    "FLISK",
    "FLITE",
    "FLITS",
    "FLITT",
    "FLOBS",
    "FLOCS",
    "FLOES",
    "FLOGS",
    "FLONG",
    "FLOPS",
    "FLORS",
    "FLORY",
    "FLOSH",
    "FLOTA",
    "FLOTE",
    "FLOWS",
    "FLUBS",
    "FLUED",
    "FLUES",
    "FLUEY",
    "FLUKY",
    "FLUMP",
    "FLUOR",
    "FLURR",
    "FLUTY",
    "FLUYT",
    "FLYBY",
    "FLYPE",
    "FLYTE",
    "FOALS",
    "FOAMS",
    "FOEHN",
    "FOGEY",
    "FOGIE",
    "FOGLE",
    "FOGOU",
    "FOHNS",
    "FOIDS",
    "FOILS",
    "FOINS",
    "FOLDS",
    "FOLEY",
    "FOLIA",
    "FOLIC",
    "FOLIE",
    "FOLKS",
    "FOLKY",
    "FOMES",
    "FONDA",
    "FONDS",
    "FONDU",
    "FONES",
    "FONLY",
    "FONTS",
    "FOODS",
    "FOODY",
    "FOOLS",
    "FOOTS",
    "FOOTY",
    "FORAM",
    "FORBS",
    "FORBY",
    "FORDO",
    "FORDS",
    "FOREL",
    "FORES",
    "FOREX",
    "FORKS",
    "FORKY",
    "FORME",
    "FORMS",
    "FORTS",
    "FORZA",
    "FORZE",
    "FOSSA",
    "FOSSE",
    "FOUAT",
    "FOUDS",
    "FOUER",
    "FOUET",
    "FOULE",
    "FOULS",
    "FOUNT",
    "FOURS",
    "FOUTH",
    "FOVEA",
    "FOWLS",
    "FOWTH",
    "FOXED",
    "FOXES",
    "FOXIE",
    "FOYLE",
    "FOYNE",
    "FRABS",
    "FRACK",
    "FRACT",
    "FRAGS",
    "FRAIM",
    "FRANC",
    "FRAPE",
    "FRAPS",
    "FRASS",
    "FRATE",
    "FRATI",
    "FRATS",
    "FRAUS",
    "FRAYS",
    "FREES",
    "FREET",
    "FREIT",
    "FREMD",
    "FRENA",
    "FREON",
    "FRERE",
    "FRETS",
    "FRIBS",
    "FRIER",
    "FRIES",
    "FRIGS",
    "FRISE",
    "FRIST",
    "FRITH",
    "FRITS",
    "FRITT",
    "FRIZE",
    "FRIZZ",
    "FROES",
    "FROGS",
    "FRONS",
    "FRORE",
    "FRORN",
    "FRORY",
    "FROSH",
    "FROWS",
    "FROWY",
    "FRUGS",
    "FRUMP",
    "FRUSH",
    "FRUST",
    "FRYER",
    "FUBAR",
    "FUBBY",
    "FUBSY",
    "FUCKS",
    "FUCUS",
    "FUDDY",
    "FUDGY",
    "FUELS",
    "FUERO",
    "FUFFS",
    "FUFFY",
    "FUGAL",
    "FUGGY",
    "FUGIE",
    "FUGIO",
    "FUGLE",
    "FUGLY",
    "FUGUS",
    "FUJIS",
    "FULLS",
    "FUMED",
    "FUMER",
    "FUMES",
    "FUMET",
    "FUNDI",
    "FUNDS",
    "FUNDY",
    "FUNGO",
    "FUNGS",
    "FUNKS",
    "FURAL",
    "FURAN",
    "FURCA",
    "FURLS",
    "FUROL",
    "FURRS",
    "FURTH",
    "FURZE",
    "FURZY",
    "FUSED",
    "FUSEE",
    "FUSEL",
    "FUSES",
    "FUSIL",
    "FUSKS",
    "FUSTS",
    "FUSTY",
    "FUTON",
    "FUZED",
    "FUZEE",
    "FUZES",
    "FUZIL",
    "FYCES",
    "FYKED",
    "FYKES",
    "FYLES",
    "FYRDS",
    "FYTTE",
    "GABBA",
    "GABBY",
    "GABLE",
    "GADDI",
    "GADES",
    "GADGE",
    "GADID",
    "GADIS",
    "GADJE",
    "GADJO",
    "GADSO",
    "GAFFS",
    "GAGED",
    "GAGER",
    "GAGES",
    "GAIDS",
    "GAINS",
    "GAIRS",
    "GAITA",
    "GAITS",
    "GAITT",
    "GAJOS",
    "GALAH",
    "GALAS",
    "GALAX",
    "GALEA",
    "GALED",
    "GALES",
    "GALLS",
    "GALLY",
    "GALOP",
    "GALUT",
    "GALVO",
    "GAMAS",
    "GAMAY",
    "GAMBA",
    "GAMBE",
    "GAMBO",
    "GAMBS",
    "GAMED",
    "GAMES",
    "GAMEY",
    "GAMIC",
    "GAMIN",
    "GAMME",
    "GAMMY",
    "GAMPS",
    "GANCH",
    "GANDY",
    "GANEF",
    "GANEV",
    "GANGS",
    "GANJA",
    "GANOF",
    "GANTS",
    "GAOLS",
    "GAPED",
    "GAPER",
    "GAPES",
    "GAPOS",
    "GAPPY",
    "GARBE",
    "GARBO",
    "GARBS",
    "GARDA",
    "GARES",
    "GARIS",
    "GARMS",
    "GARNI",
    "GARRE",
    "GARTH",
    "GARUM",
    "GASES",
    "GASPS",
    "GASPY",
    "GASTS",
    "GATCH",
    "GATED",
    "GATER",
    "GATES",
    "GATHS",
    "GATOR",
    "GAUCH",
    "GAUCY",
    "GAUDS",
    "GAUJE",
    "GAULT",
    "GAUMS",
    "GAUMY",
    "GAUPS",
    "GAURS",
    "GAUSS",
    "GAUZY",
    "GAVOT",
    "GAWCY",
    "GAWDS",
    "GAWKS",
    "GAWPS",
    "GAWSY",
    "GAYAL",
    "GAZAL",
    "GAZAR",
    "GAZED",
    "GAZES",
    "GAZON",
    "GAZOO",
    "GEALS",
    "GEANS",
    "GEARE",
    "GEARS",
    "GEATS",
    "GEBUR",
    "GECKS",
    "GEEKS",
    "GEEPS",
    "GEEST",
    "GEIST",
    "GEITS",
    "GELDS",
    "GELEE",
    "GELID",
    "GELLY",
    "GELTS",
    "GEMEL",
    "GEMMA",
    "GEMMY",
    "GEMOT",
    "GENAL",
    "GENAS",
    "GENES",
    "GENET",
    "GENIC",
    "GENII",
    "GENIP",
    "GENNY",
    "GENOA",
    "GENOM",
    "GENRO",
    "GENTS",
    "GENTY",
    "GENUA",
    "GENUS",
    "GEODE",
    "GEOID",
    "GERAH",
    "GERBE",
    "GERES",
    "GERLE",
    "GERMS",
    "GERMY",
    "GERNE",
    "GESSE",
    "GESSO",
    "GESTE",
    "GESTS",
    "GETAS",
    "GETUP",
    "GEUMS",
    "GEYAN",
    "GEYER",
    "GHAST",
    "GHATS",
    "GHAUT",
    "GHAZI",
    "GHEES",
    "GHEST",
    "GHYLL",
    "GIBED",
    "GIBEL",
    "GIBER",
    "GIBES",
    "GIBLI",
    "GIBUS",
    "GIFTS",
    "GIGAS",
    "GIGHE",
    "GIGOT",
    "GIGUE",
    "GILAS",
    "GILDS",
    "GILET",
    "GILLS",
    "GILLY",
    "GILPY",
    "GILTS",
    "GIMEL",
    "GIMME",
    "GIMPS",
    "GIMPY",
    "GINCH",
    "GINGE",
    "GINGS",
    "GINKS",
    "GINNY",
    "GINZO",
    "GIPON",
    "GIPPO",
    "GIPPY",
    "GIRDS",
    "GIRLS",
    "GIRNS",
    "GIRON",
    "GIROS",
    "GIRRS",
    "GIRSH",
    "GIRTS",
    "GISMO",
    "GISMS",
    "GISTS",
    "GITCH",
    "GITES",
    "GIUST",
    "GIVED",
    "GIVES",
    "GIZMO",
    "GLACE",
    "GLADS",
    "GLADY",
    "GLAIK",
    "GLAIR",
    "GLAMS",
    "GLANS",
    "GLARY",
    "GLAUM",
    "GLAUR",
    "GLAZY",
    "GLEBA",
    "GLEBE",
    "GLEBY",
    "GLEDE",
    "GLEDS",
    "GLEED",
    "GLEEK",
    "GLEES",
    "GLEET",
    "GLEIS",
    "GLENS",
    "GLENT",
    "GLEYS",
    "GLIAL",
    "GLIAS",
    "GLIBS",
    "GLIFF",
    "GLIFT",
    "GLIKE",
    "GLIME",
    "GLIMS",
    "GLISK",
    "GLITS",
    "GLITZ",
    "GLOAM",
    "GLOBI",
    "GLOBS",
    "GLOBY",
    "GLODE",
    "GLOGG",
    "GLOMS",
    "GLOOP",
    "GLOPS",
    "GLOST",
    "GLOUT",
    "GLOWS",
    "GLOZE",
    "GLUED",
    "GLUER",
    "GLUES",
    "GLUEY",
    "GLUGS",
    "GLUME",
    "GLUMS",
    "GLUON",
    "GLUTE",
    "GLUTS",
    "GNARL",
    "GNARR",
    "GNARS",
    "GNATS",
    "GNAWN",
    "GNAWS",
    "GNOWS",
    "GOADS",
    "GOAFS",
    "GOALS",
    "GOARY",
    "GOATS",
    "GOATY",
    "GOBAN",
    "GOBAR",
    "GOBBI",
    "GOBBO",
    "GOBBY",
    "GOBIS",
    "GOBOS",
    "GODET",
    "GODSO",
    "GOELS",
    "GOERS",
    "GOEST",
    "GOETH",
    "GOETY",
    "GOFER",
    "GOFFS",
    "GOGGA",
    "GOGOS",
    "GOIER",
    "GOJIS",
    "GOLDS",
    "GOLDY",
    "GOLES",
    "GOLFS",
    "GOLPE",
    "GOLPS",
    "GOMBO",
    "GOMER",
    "GOMPA",
    "GONCH",
    "GONEF",
    "GONGS",
    "GONIA",
    "GONIF",
    "GONKS",
    "GONNA",
    "GONOF",
    "GONYS",
    "GONZO",
    "GOOBY",
    "GOODS",
    "GOOFS",
    "GOOGS",
    "GOOKY",
    "GOOLD",
    "GOOLS",
    "GOOLY",
    "GOONS",
    "GOONY",
    "GOOPS",
    "GOOPY",
    "GOORS",
    "GOORY",
    "GOOSY",
    "GOPAK",
    "GOPIK",
    "GORAL",
    "GORAS",
    "GORED",
    "GORES",
    "GORIS",
    "GORMS",
    "GORMY",
    "GORPS",
    "GORSE",
    "GORSY",
    "GOSHT",
    "GOSSE",
    "GOTCH",
    "GOTHS",
    "GOTHY",
    "GOTTA",
    "GOUCH",
    "GOUKS",
    "GOURA",
    "GOUTS",
    "GOUTY",
    "GOWAN",
    "GOWDS",
    "GOWFS",
    "GOWKS",
    "GOWLS",
    "GOWNS",
    "GOXES",
    "GOYIM",
    "GOYLE",
    "GRAAL",
    "GRABS",
    "GRADS",
    "GRAFF",
    "GRAIP",
    "GRAMA",
    "GRAME",
    "GRAMP",
    "GRAMS",
    "GRANA",
    "GRANS",
    "GRAPY",
    "GRAVS",
    "GRAYS",
    "GREBE",
    "GREBO",
    "GRECE",
    "GREEK",
    "GREES",
    "GREGE",
    "GREGO",
    "GREIN",
    "GRENS",
    "GRESE",
    "GREVE",
    "GREWS",
    "GREYS",
    "GRICE",
    "GRIDE",
    "GRIDS",
    "GRIFF",
    "GRIFT",
    "GRIGS",
    "GRIKE",
    "GRINS",
    "GRIOT",
    "GRIPS",
    "GRIPT",
    "GRIPY",
    "GRISE",
    "GRIST",
    "GRISY",
    "GRITH",
    "GRITS",
    "GRIZE",
    "GROAT",
    "GRODY",
    "GROGS",
    "GROKS",
    "GROMA",
    "GRONE",
    "GROOF",
    "GROSZ",
    "GROTS",
    "GROUF",
    "GROVY",
    "GROWS",
    "GRRLS",
    "GRRRL",
    "GRUBS",
    "GRUED",
    "GRUES",
    "GRUFE",
    "GRUME",
    "GRUMP",
    "GRUND",
    "GRYCE",
    "GRYDE",
    "GRYKE",
    "GRYPE",
    "GRYPT",
    "GUACO",
    "GUANA",
    "GUANO",
    "GUANS",
    "GUARS",
    "GUCKS",
    "GUCKY",
    "GUDES",
    "GUFFS",
    "GUGAS",
    "GUIDS",
    "GUIMP",
    "GUIRO",
    "GULAG",
    "GULAR",
    "GULAS",
    "GULES",
    "GULET",
    "GULFS",
    "GULFY",
    "GULLS",
    "GULPH",
    "GULPS",
    "GULPY",
    "GUMMA",
    "GUMMI",
    "GUMPS",
    "GUNDY",
    "GUNGE",
    "GUNGY",
    "GUNKS",
    "GUNKY",
    "GUNNY",
    "GUQIN",
    "GURDY",
    "GURGE",
    "GURLS",
    "GURLY",
    "GURNS",
    "GURRY",
    "GURSH",
    "GURUS",
    "GUSHY",
    "GUSLA",
    "GUSLE",
    "GUSLI",
    "GUSSY",
    "GUSTS",
    "GUTSY",
    "GUTTA",
    "GUTTY",
    "GUYED",
    "GUYLE",
    "GUYOT",
    "GUYSE",
    "GWINE",
    "GYALS",
    "GYANS",
    "GYBED",
    "GYBES",
    "GYELD",
    "GYMPS",
    "GYNAE",
    "GYNIE",
    "GYNNY",
    "GYNOS",
    "GYOZA",
    "GYPOS",
    "GYPPO",
    "GYPPY",
    "GYRAL",
    "GYRED",
    "GYRES",
    "GYRON",
    "GYROS",
    "GYRUS",
    "GYTES",
    "GYVED",
    "GYVES",
    "HAAFS",
    "HAARS",
    "HABLE",
    "HABUS",
    "HACEK",
    "HACKS",
    "HADAL",
    "HADED",
    "HADES",
    "HADJI",
    "HADST",
    "HAEMS",
    "HAETS",
    "HAFFS",
    "HAFIZ",
    "HAFTS",
    "HAGGS",
    "HAHAS",
    "HAICK",
    "HAIKA",
    "HAIKS",
    "HAIKU",
    "HAILS",
    "HAILY",
    "HAINS",
    "HAINT",
    "HAIRS",
    "HAITH",
    "HAJES",
    "HAJIS",
    "HAJJI",
    "HAKAM",
    "HAKAS",
    "HAKEA",
    "HAKES",
    "HAKIM",
    "HAKUS",
    "HALAL",
    "HALED",
    "HALER",
    "HALES",
    "HALFA",
    "HALFS",
    "HALID",
    "HALLO",
    "HALLS",
    "HALMA",
    "HALMS",
    "HALON",
    "HALOS",
    "HALSE",
    "HALTS",
    "HALVA",
    "HALWA",
    "HAMAL",
    "HAMBA",
    "HAMED",
    "HAMES",
    "HAMMY",
    "HAMZA",
    "HANAP",
    "HANCE",
    "HANCH",
    "HANDS",
    "HANGI",
    "HANGS",
    "HANKS",
    "HANKY",
    "HANSA",
    "HANSE",
    "HANTS",
    "HAOLE",
    "HAOMA",
    "HAPAX",
    "HAPLY",
    "HAPPI",
    "HAPUS",
    "HARAM",
    "HARDS",
    "HARED",
    "HARES",
    "HARIM",
    "HARKS",
    "HARLS",
    "HARMS",
    "HARNS",
    "HAROS",
    "HARPS",
    "HARTS",
    "HASHY",
    "HASKS",
    "HASPS",
    "HASTA",
    "HATED",
    "HATES",
    "HATHA",
    "HAUDS",
    "HAUFS",
    "HAUGH",
    "HAULD",
    "HAULM",
    "HAULS",
    "HAULT",
    "HAUNS",
    "HAUSE",
    "HAVER",
    "HAVES",
    "HAWED",
    "HAWKS",
    "HAWMS",
    "HAWSE",
    "HAYED",
    "HAYER",
    "HAYEY",
    "HAYLE",
    "HAZAN",
    "HAZED",
    "HAZER",
    "HAZES",
    "HEADS",
    "HEALD",
    "HEALS",
    "HEAME",
    "HEAPS",
    "HEAPY",
    "HEARE",
    "HEARS",
    "HEAST",
    "HEATS",
    "HEBEN",
    "HEBES",
    "HECHT",
    "HECKS",
    "HEDER",
    "HEDGY",
    "HEEDS",
    "HEEDY",
    "HEELS",
    "HEEZE",
    "HEFTE",
    "HEFTS",
    "HEIDS",
    "HEIGH",
    "HEILS",
    "HEIRS",
    "HEJAB",
    "HEJRA",
    "HELED",
    "HELES",
    "HELIO",
    "HELLS",
    "HELMS",
    "HELOS",
    "HELOT",
    "HELPS",
    "HELVE",
    "HEMAL",
    "HEMES",
    "HEMIC",
    "HEMIN",
    "HEMPS",
    "HEMPY",
    "HENCH",
    "HENDS",
    "HENGE",
    "HENNA",
    "HENNY",
    "HENRY",
    "HENTS",
    "HEPAR",
    "HERBS",
    "HERBY",
    "HERDS",
    "HERES",
    "HERLS",
    "HERMA",
    "HERMS",
    "HERNS",
    "HEROS",
    "HERRY",
    "HERSE",
    "HERTZ",
    "HERYE",
    "HESPS",
    "HESTS",
    "HETES",
    "HETHS",
    "HEUCH",
    "HEUGH",
    "HEVEA",
    "HEWED",
    "HEWER",
    "HEWGH",
    "HEXAD",
    "HEXED",
    "HEXER",
    "HEXES",
    "HEXYL",
    "HEYED",
    "HIANT",
    "HICKS",
    "HIDED",
    "HIDER",
    "HIDES",
    "HIEMS",
    "HIGHS",
    "HIGHT",
    "HIJAB",
    "HIJRA",
    "HIKED",
    "HIKER",
    "HIKES",
    "HIKOI",
    "HILAR",
    "HILCH",
    "HILLO",
    "HILLS",
    "HILTS",
    "HILUM",
    "HILUS",
    "HIMBO",
    "HINAU",
    "HINDS",
    "HINGS",
    "HINKY",
    "HINNY",
    "HINTS",
    "HIOIS",
    "HIPLY",
    "HIRED",
    "HIREE",
    "HIRER",
    "HIRES",
    "HISSY",
    "HISTS",
    "HITHE",
    "HIVED",
    "HIVER",
    "HIVES",
    "HIZEN",
    "HOAED",
    "HOAGY",
    "HOARS",
    "HOARY",
    "HOAST",
    "HOBOS",
    "HOCKS",
    "HOCUS",
    "HODAD",
    "HODJA",
    "HOERS",
    "HOGAN",
    "HOGEN",
    "HOGGS",
    "HOGHS",
    "HOHED",
    "HOICK",
    "HOIED",
    "HOIKS",
    "HOING",
    "HOISE",
    "HOKAS",
    "HOKED",
    "HOKES",
    "HOKEY",
    "HOKIS",
    "HOKKU",
    "HOKUM",
    "HOLDS",
    "HOLED",
    "HOLES",
    "HOLEY",
    "HOLKS",
    "HOLLA",
    "HOLLO",
    "HOLME",
    "HOLMS",
    "HOLON",
    "HOLOS",
    "HOLTS",
    "HOMAS",
    "HOMED",
    "HOMES",
    "HOMEY",
    "HOMIE",
    "HOMME",
    "HONAN",
    "HONDA",
    "HONDS",
    "HONED",
    "HONER",
    "HONES",
    "HONGI",
    "HONGS",
    "HONKS",
    "HONKY",
    "HOOCH",
    "HOODS",
    "HOODY",
    "HOOEY",
    "HOOFS",
    "HOOKA",
    "HOOKS",
    "HOOKY",
    "HOOLY",
    "HOONS",
    "HOOPS",
    "HOORD",
    "HOORS",
    "HOOSH",
    "HOOTS",
    "HOOTY",
    "HOOVE",
    "HOPAK",
    "HOPED",
    "HOPER",
    "HOPES",
    "HOPPY",
    "HORAH",
    "HORAL",
    "HORAS",
    "HORIS",
    "HORKS",
    "HORME",
    "HORNS",
    "HORST",
    "HORSY",
    "HOSED",
    "HOSEL",
    "HOSEN",
    "HOSER",
    "HOSES",
    "HOSEY",
    "HOSTA",
    "HOSTS",
    "HOTCH",
    "HOTEN",
    "HOTTY",
    "HOUFF",
    "HOUFS",
    "HOUGH",
    "HOURI",
    "HOURS",
    "HOUTS",
    "HOVEA",
    "HOVED",
    "HOVEN",
    "HOVES",
    "HOWBE",
    "HOWES",
    "HOWFF",
    "HOWFS",
    "HOWKS",
    "HOWLS",
    "HOWRE",
    "HOWSO",
    "HOXED",
    "HOXES",
    "HOYAS",
    "HOYED",
    "HOYLE",
    "HUBBY",
    "HUCKS",
    "HUDNA",
    "HUDUD",
    "HUERS",
    "HUFFS",
    "HUFFY",
    "HUGER",
    "HUGGY",
    "HUHUS",
    "HUIAS",
    "HULAS",
    "HULES",
    "HULKS",
    "HULKY",
    "HULLO",
    "HULLS",
    "HULLY",
    "HUMAS",
    "HUMFS",
    "HUMIC",
    "HUMPS",
    "HUMPY",
    "HUNKS",
    "HUNTS",
    "HURDS",
    "HURLS",
    "HURLY",
    "HURRA",
    "HURST",
    "HURTS",
    "HUSHY",
    "HUSKS",
    "HUSOS",
    "HUTIA",
    "HUZZA",
    "HUZZY",
    "HWYLS",
    "HYDRA",
    "HYENS",
    "HYGGE",
    "HYING",
    "HYKES",
    "HYLAS",
    "HYLEG",
    "HYLES",
    "HYLIC",
    "HYMNS",
    "HYNDE",
    "HYOID",
    "HYPED",
    "HYPES",
    "HYPHA",
    "HYPHY",
    "HYPOS",
    "HYRAX",
    "HYSON",
    "HYTHE",
    "IAMBI",
    "IAMBS",
    "IBRIK",
    "ICERS",
    "ICHED",
    "ICHES",
    "ICHOR",
    "ICIER",
    "ICKER",
    "ICKLE",
    "ICONS",
    "ICTAL",
    "ICTIC",
    "ICTUS",
    "IDANT",
    "IDEAS",
    "IDEES",
    "IDENT",
    "IDLED",
    "IDLES",
    "IDOLA",
    "IDOLS",
    "IDYLS",
    "IFTAR",
    "IGAPO",
    "IGGED",
    "IGLUS",
    "IHRAM",
    "IKANS",
    "IKATS",
    "IKONS",
    "ILEAC",
    "ILEAL",
    "ILEUM",
    "ILEUS",
    "ILIAD",
    "ILIAL",
    "ILIUM",
    "ILLER",
    "ILLTH",
    "IMAGO",
    "IMAMS",
    "IMARI",
    "IMAUM",
    "IMBAR",
    "IMBED",
    "IMIDE",
    "IMIDO",
    "IMIDS",
    "IMINE",
    "IMINO",
    "IMMEW",
    "IMMIT",
    "IMMIX",
    "IMPED",
    "IMPIS",
    "IMPOT",
    "IMPRO",
    "IMSHI",
    "IMSHY",
    "INAPT",
    "INARM",
    "INBYE",
    "INCEL",
    "INCLE",
    "INCOG",
    "INCUS",
    "INCUT",
    "INDEW",
    "INDIA",
    "INDIE",
    "INDOL",
    "INDOW",
    "INDRI",
    "INDUE",
    "INERM",
    "INFIX",
    "INFOS",
    "INFRA",
    "INGAN",
    "INGLE",
    "INION",
    "INKED",
    "INKER",
    "INKLE",
    "INNED",
    "INNIT",
    "INORB",
    "INRUN",
    "INSET",
    "INSPO",
    "INTEL",
    "INTIL",
    "INTIS",
    "INTRA",
    "INULA",
    "INURE",
    "INURN",
    "INUST",
    "INVAR",
    "INWIT",
    "IODIC",
    "IODID",
    "IODIN",
    "IOTAS",
    "IPPON",
    "IRADE",
    "IRIDS",
    "IRING",
    "IRKED",
    "IROKO",
    "IRONE",
    "IRONS",
    "ISBAS",
    "ISHES",
    "ISLED",
    "ISLES",
    "ISNAE",
    "ISSEI",
    "ISTLE",
    "ITEMS",
    "ITHER",
    "IVIED",
    "IVIES",
    "IXIAS",
    "IXNAY",
    "IXORA",
    "IXTLE",
    "IZARD",
    "IZARS",
    "IZZAT",
    "JAAPS",
    "JABOT",
    "JACAL",
    "JACKS",
    "JACKY",
    "JADED",
    "JADES",
    "JAFAS",
    "JAFFA",
    "JAGAS",
    "JAGER",
    "JAGGS",
    "JAGGY",
    "JAGIR",
    "JAGRA",
    "JAILS",
    "JAKER",
    "JAKES",
    "JAKEY",
    "JALAP",
    "JALOP",
    "JAMBE",
    "JAMBO",
    "JAMBS",
    "JAMBU",
    "JAMES",
    "JAMMY",
    "JAMON",
    "JANES",
    "JANNS",
    "JANNY",
    "JANTY",
    "JAPAN",
    "JAPED",
    "JAPER",
    "JAPES",
    "JARKS",
    "JARLS",
    "JARPS",
    "JARTA",
    "JARUL",
    "JASEY",
    "JASPE",
    "JASPS",
    "JATOS",
    "JAUKS",
    "JAUPS",
    "JAVAS",
    "JAVEL",
    "JAWAN",
    "JAWED",
    "JAXIE",
    "JEANS",
    "JEATS",
    "JEBEL",
    "JEDIS",
    "JEELS",
    "JEELY",
    "JEEPS",
    "JEERS",
    "JEEZE",
    "JEFES",
    "JEFFS",
    "JEHAD",
    "JEHUS",
    "JELAB",
    "JELLO",
    "JELLS",
    "JEMBE",
    "JEMMY",
    "JENNY",
    "JEONS",
    "JERID",
    "JERKS",
    "JERRY",
    "JESSE",
    "JESTS",
    "JESUS",
    "JETES",
    "JETON",
    "JEUNE",
    "JEWED",
    "JEWIE",
    "JHALA",
    "JIAOS",
    "JIBBA",
    "JIBBS",
    "JIBED",
    "JIBER",
    "JIBES",
    "JIFFS",
    "JIGGY",
    "JIGOT",
    "JIHAD",
    "JILLS",
    "JILTS",
    "JIMMY",
    "JIMPY",
    "JINGO",
    "JINKS",
    "JINNE",
    "JINNI",
    "JINNS",
    "JIRDS",
    "JIRGA",
    "JIRRE",
    "JISMS",
    "JIVED",
    "JIVER",
    "JIVES",
    "JIVEY",
    "JNANA",
    "JOBED",
    "JOBES",
    "JOCKO",
    "JOCKS",
    "JOCKY",
    "JOCOS",
    "JODEL",
    "JOEYS",
    "JOHNS",
    "JOINS",
    "JOKED",
    "JOKES",
    "JOKEY",
    "JOKOL",
    "JOLED",
    "JOLES",
    "JOLLS",
    "JOLTS",
    "JOLTY",
    "JOMON",
    "JOMOS",
    "JONES",
    "JONGS",
    "JONTY",
    "JOOKS",
    "JORAM",
    "JORUM",
    "JOTAS",
    "JOTTY",
    "JOTUN",
    "JOUAL",
    "JOUGS",
    "JOUKS",
    "JOULE",
    "JOURS",
    "JOWAR",
    "JOWED",
    "JOWLS",
    "JOWLY",
    "JOYED",
    "JUBAS",
    "JUBES",
    "JUCOS",
    "JUDAS",
    "JUDGY",
    "JUDOS",
    "JUGAL",
    "JUGUM",
    "JUJUS",
    "JUKED",
    "JUKES",
    "JUKUS",
    "JULEP",
    "JUMAR",
    "JUMBY",
    "JUMPS",
    "JUNCO",
    "JUNKS",
    "JUNKY",
    "JUPES",
    "JUPON",
    "JURAL",
    "JURAT",
    "JUREL",
    "JURES",
    "JUSTS",
    "JUTES",
    "JUTTY",
    "JUVES",
    "JUVIE",
    "KAAMA",
    "KABAB",
    "KABAR",
    "KABOB",
    "KACHA",
    "KACKS",
    "KADAI",
    "KADES",
    "KADIS",
    "KAFIR",
    "KAGOS",
    "KAGUS",
    "KAHAL",
    "KAIAK",
    "KAIDS",
    "KAIES",
    "KAIFS",
    "KAIKA",
    "KAIKS",
    "KAILS",
    "KAIMS",
    "KAING",
    "KAINS",
    "KAKAS",
    "KAKIS",
    "KALAM",
    "KALES",
    "KALIF",
    "KALIS",
    "KALPA",
    "KAMAS",
    "KAMES",
    "KAMIK",
    "KAMIS",
    "KAMME",
    "KANAE",
    "KANAS",
    "KANDY",
    "KANEH",
    "KANES",
    "KANGA",
    "KANGS",
    "KANJI",
    "KANTS",
    "KANZU",
    "KAONS",
    "KAPAS",
    "KAPHS",
    "KAPOK",
    "KAPOW",
    "KAPUS",
    "KAPUT",
    "KARAS",
    "KARAT",
    "KARKS",
    "KARNS",
    "KAROO",
    "KAROS",
    "KARRI",
    "KARST",
    "KARSY",
    "KARTS",
    "KARZY",
    "KASHA",
    "KASME",
    "KATAL",
    "KATAS",
    "KATIS",
    "KATTI",
    "KAUGH",
    "KAURI",
    "KAURU",
    "KAURY",
    "KAVAL",
    "KAVAS",
    "KAWAS",
    "KAWAU",
    "KAWED",
    "KAYLE",
    "KAYOS",
    "KAZIS",
    "KAZOO",
    "KBARS",
    "KEBAR",
    "KEBOB",
    "KECKS",
    "KEDGE",
    "KEDGY",
    "KEECH",
    "KEEFS",
    "KEEKS",
    "KEELS",
    "KEEMA",
    "KEENO",
    "KEENS",
    "KEEPS",
    "KEETS",
    "KEEVE",
    "KEFIR",
    "KEHUA",
    "KEIRS",
    "KELEP",
    "KELIM",
    "KELLS",
    "KELLY",
    "KELPS",
    "KELPY",
    "KELTS",
    "KELTY",
    "KEMBO",
    "KEMBS",
    "KEMPS",
    "KEMPT",
    "KEMPY",
    "KENAF",
    "KENCH",
    "KENDO",
    "KENOS",
    "KENTE",
    "KENTS",
    "KEPIS",
    "KERBS",
    "KEREL",
    "KERFS",
    "KERKY",
    "KERMA",
    "KERNE",
    "KERNS",
    "KEROS",
    "KERRY",
    "KERVE",
    "KESAR",
    "KESTS",
    "KETAS",
    "KETCH",
    "KETES",
    "KETOL",
    "KEVEL",
    "KEVIL",
    "KEXES",
    "KEYED",
    "KEYER",
    "KHADI",
    "KHAFS",
    "KHANS",
    "KHAPH",
    "KHATS",
    "KHAYA",
    "KHAZI",
    "KHEDA",
    "KHETH",
    "KHETS",
    "KHOJA",
    "KHORS",
    "KHOUM",
    "KHUDS",
    "KIAAT",
    "KIACK",
    "KIANG",
    "KIBBE",
    "KIBBI",
    "KIBEI",
    "KIBES",
    "KIBLA",
    "KICKS",
    "KICKY",
    "KIDDO",
    "KIDDY",
    "KIDEL",
    "KIDGE",
    "KIEFS",
    "KIERS",
    "KIEVE",
    "KIEVS",
    "KIGHT",
    "KIKOI",
    "KILEY",
    "KILIM",
    "KILLS",
    "KILNS",
    "KILOS",
    "KILPS",
    "KILTS",
    "KILTY",
    "KIMBO",
    "KINAS",
    "KINDA",
    "KINDS",
    "KINDY",
    "KINES",
    "KINGS",
    "KININ",
    "KINKS",
    "KINOS",
    "KIORE",
    "KIPES",
    "KIPPA",
    "KIPPS",
    "KIRBY",
    "KIRKS",
    "KIRNS",
    "KIRRI",
    "KISAN",
    "KISSY",
    "KISTS",
    "KITED",
    "KITER",
    "KITES",
    "KITHE",
    "KITHS",
    "KITUL",
    "KIVAS",
    "KIWIS",
    "KLANG",
    "KLAPS",
    "KLETT",
    "KLICK",
    "KLIEG",
    "KLIKS",
    "KLONG",
    "KLOOF",
    "KLUGE",
    "KLUTZ",
    "KNAGS",
    "KNAPS",
    "KNARL",
    "KNARS",
    "KNAUR",
    "KNAWE",
    "KNEES",
    "KNELL",
    "KNISH",
    "KNITS",
    "KNIVE",
    "KNOBS",
    "KNOPS",
    "KNOSP",
    "KNOTS",
    "KNOUT",
    "KNOWE",
    "KNOWS",
    "KNUBS",
    "KNURL",
    "KNURR",
    "KNURS",
    "KNUTS",
    "KOANS",
    "KOAPS",
    "KOBAN",
    "KOBOS",
    "KOELS",
    "KOFFS",
    "KOFTA",
    "KOGAL",
    "KOHAS",
    "KOHEN",
    "KOHLS",
    "KOINE",
    "KOJIS",
    "KOKAM",
    "KOKAS",
    "KOKER",
    "KOKRA",
    "KOKUM",
    "KOLAS",
    "KOLOS",
    "KOMBU",
    "KONBU",
    "KONDO",
    "KONKS",
    "KOOKS",
    "KOOKY",
    "KOORI",
    "KOPEK",
    "KOPHS",
    "KOPJE",
    "KOPPA",
    "KORAI",
    "KORAS",
    "KORAT",
    "KORES",
    "KORMA",
    "KOROS",
    "KORUN",
    "KORUS",
    "KOSES",
    "KOTCH",
    "KOTOS",
    "KOTOW",
    "KOURA",
    "KRAAL",
    "KRABS",
    "KRAFT",
    "KRAIS",
    "KRAIT",
    "KRANG",
    "KRANS",
    "KRANZ",
    "KRAUT",
    "KRAYS",
    "KREEP",
    "KRENG",
    "KREWE",
    "KRONA",
    "KRONE",
    "KROON",
    "KRUBI",
    "KRUNK",
    "KSARS",
    "KUBIE",
    "KUDOS",
    "KUDUS",
    "KUDZU",
    "KUFIS",
    "KUGEL",
    "KUIAS",
    "KUKRI",
    "KUKUS",
    "KULAK",
    "KULAN",
    "KULAS",
    "KULFI",
    "KUMIS",
    "KUMYS",
    "KURIS",
    "KURRE",
    "KURTA",
    "KURUS",
    "KUSSO",
    "KUTAS",
    "KUTCH",
    "KUTIS",
    "KUTUS",
    "KUZUS",
    "KVASS",
    "KVELL",
    "KWELA",
    "KYACK",
    "KYAKS",
    "KYANG",
    "KYARS",
    "KYATS",
    "KYBOS",
    "KYDST",
    "KYLES",
    "KYLIE",
    "KYLIN",
    "KYLIX",
    "KYLOE",
    "KYNDE",
    "KYNDS",
    "KYPES",
    "KYRIE",
    "KYTES",
    "KYTHE",
    "LAARI",
    "LABDA",
    "LABIA",
    "LABIS",
    "LABRA",
    "LACED",
    "LACER",
    "LACES",
    "LACET",
    "LACEY",
    "LACKS",
    "LADDY",
    "LADED",
    "LADER",
    "LADES",
    "LAERS",
    "LAEVO",
    "LAGAN",
    "LAHAL",
    "LAHAR",
    "LAICH",
    "LAICS",
    "LAIDS",
    "LAIGH",
    "LAIKA",
    "LAIKS",
    "LAIRD",
    "LAIRS",
    "LAIRY",
    "LAITH",
    "LAITY",
    "LAKED",
    "LAKER",
    "LAKES",
    "LAKHS",
    "LAKIN",
    "LAKSA",
    "LALDY",
    "LALLS",
    "LAMAS",
    "LAMBS",
    "LAMBY",
    "LAMED",
    "LAMER",
    "LAMES",
    "LAMIA",
    "LAMMY",
    "LAMPS",
    "LANAI",
    "LANAS",
    "LANCH",
    "LANDE",
    "LANDS",
    "LANES",
    "LANKS",
    "LANTS",
    "LAPIN",
    "LAPIS",
    "LAPJE",
    "LARCH",
    "LARDS",
    "LARDY",
    "LAREE",
    "LARES",
    "LARGO",
    "LARIS",
    "LARKS",
    "LARKY",
    "LARNS",
    "LARNT",
    "LARUM",
    "LASED",
    "LASER",
    "LASES",
    "LASSI",
    "LASSU",
    "LASSY",
    "LASTS",
    "LATAH",
    "LATED",
    "LATEN",
    "LATEX",
    "LATHI",
    "LATHS",
    "LATHY",
    "LATKE",
    "LATUS",
    "LAUAN",
    "LAUCH",
    "LAUDS",
    "LAUFS",
    "LAUND",
    "LAURA",
    "LAVAL",
    "LAVAS",
    "LAVED",
    "LAVER",
    "LAVES",
    "LAVRA",
    "LAVVY",
    "LAWED",
    "LAWER",
    "LAWIN",
    "LAWKS",
    "LAWNS",
    "LAWNY",
    "LAXED",
    "LAXER",
    "LAXES",
    "LAXLY",
    "LAYED",
    "LAYIN",
    "LAYUP",
    "LAZAR",
    "LAZED",
    "LAZES",
    "LAZOS",
    "LAZZI",
    "LAZZO",
    "LEADS",
    "LEADY",
    "LEAFS",
    "LEAKS",
    "LEAMS",
    "LEANS",
    "LEANY",
    "LEAPS",
    "LEARE",
    "LEARS",
    "LEARY",
    "LEATS",
    "LEAVY",
    "LEAZE",
    "LEBEN",
    "LECCY",
    "LEDES",
    "LEDGY",
    "LEDUM",
    "LEEAR",
    "LEEKS",
    "LEEPS",
    "LEERS",
    "LEESE",
    "LEETS",
    "LEEZE",
    "LEFTE",
    "LEFTS",
    "LEGER",
    "LEGES",
    "LEGGE",
    "LEGGO",
    "LEGIT",
    "LEHRS",
    "LEHUA",
    "LEIRS",
    "LEISH",
    "LEMAN",
    "LEMED",
    "LEMEL",
    "LEMES",
    "LEMMA",
    "LEMME",
    "LENDS",
    "LENES",
    "LENGS",
    "LENIS",
    "LENOS",
    "LENSE",
    "LENTI",
    "LENTO",
    "LEONE",
    "LEPID",
    "LEPRA",
    "LEPTA",
    "LERED",
    "LERES",
    "LERPS",
    "LESES",
    "LESTS",
    "LETCH",
    "LETHE",
    "LETUP",
    "LEUCH",
    "LEUCO",
    "LEUDS",
    "LEUGH",
    "LEVAS",
    "LEVEE",
    "LEVES",
    "LEVIN",
    "LEVIS",
    "LEWIS",
    "LEXES",
    "LEXIS",
    "LEZES",
    "LEZZA",
    "LEZZY",
    "LIANA",
    "LIANE",
    "LIANG",
    "LIARD",
    "LIARS",
    "LIART",
    "LIBER",
    "LIBRA",
    "LIBRI",
    "LICHI",
    "LICHT",
    "LICIT",
    "LICKS",
    "LIDAR",
    "LIDOS",
    "LIEFS",
    "LIENS",
    "LIERS",
    "LIEUS",
    "LIEVE",
    "LIFER",
    "LIFES",
    "LIFTS",
    "LIGAN",
    "LIGER",
    "LIGGE",
    "LIGNE",
    "LIKED",
    "LIKER",
    "LIKES",
    "LIKIN",
    "LILLS",
    "LILOS",
    "LILTS",
    "LIMAN",
    "LIMAS",
    "LIMAX",
    "LIMBA",
    "LIMBI",
    "LIMBS",
    "LIMBY",
    "LIMED",
    "LIMEN",
    "LIMES",
    "LIMEY",
    "LIMMA",
    "LIMNS",
    "LIMOS",
    "LIMPA",
    "LIMPS",
    "LINAC",
    "LINCH",
    "LINDS",
    "LINDY",
    "LINED",
    "LINES",
    "LINEY",
    "LINGA",
    "LINGS",
    "LINGY",
    "LININ",
    "LINKS",
    "LINKY",
    "LINNS",
    "LINNY",
    "LINOS",
    "LINTS",
    "LINTY",
    "LINUM",
    "LINUX",
    "LIONS",
    "LIPAS",
    "LIPES",
    "LIPIN",
    "LIPOS",
    "LIPPY",
    "LIRAS",
    "LIRKS",
    "LIROT",
    "LISKS",
    "LISLE",
    "LISPS",
    "LISTS",
    "LITAI",
    "LITAS",
    "LITED",
    "LITER",
    "LITES",
    "LITHO",
    "LITHS",
    "LITRE",
    "LIVED",
    "LIVEN",
    "LIVES",
    "LIVOR",
    "LIVRE",
    "LLANO",
    "LOACH",
    "LOADS",
    "LOAFS",
    "LOAMS",
    "LOANS",
    "LOAST",
    "LOAVE",
    "LOBAR",
    "LOBED",
    "LOBES",
    "LOBOS",
    "LOBUS",
    "LOCHE",
    "LOCHS",
    "LOCIE",
    "LOCIS",
    "LOCKS",
    "LOCOS",
    "LOCUM",
    "LODEN",
    "LODES",
    "LOESS",
    "LOFTS",
    "LOGAN",
    "LOGES",
    "LOGGY",
    "LOGIA",
    "LOGIE",
    "LOGOI",
    "LOGON",
    "LOGOS",
    "LOHAN",
    "LOIDS",
    "LOINS",
    "LOIPE",
    "LOIRS",
    "LOKES",
    "LOLLS",
    "LOLLY",
    "LOLOG",
    "LOMAS",
    "LOMED",
    "LOMES",
    "LONER",
    "LONGA",
    "LONGE",
    "LONGS",
    "LOOBY",
    "LOOED",
    "LOOEY",
    "LOOFA",
    "LOOFS",
    "LOOIE",
    "LOOKS",
    "LOOKY",
    "LOOMS",
    "LOONS",
    "LOONY",
    "LOOPS",
    "LOORD",
    "LOOTS",
    "LOPED",
    "LOPER",
    "LOPES",
    "LOPPY",
    "LORAL",
    "LORAN",
    "LORDS",
    "LORDY",
    "LOREL",
    "LORES",
    "LORIC",
    "LORIS",
    "LOSED",
    "LOSEL",
    "LOSEN",
    "LOSES",
    "LOSSY",
    "LOTAH",
    "LOTAS",
    "LOTES",
    "LOTIC",
    "LOTOS",
    "LOTSA",
    "LOTTA",
    "LOTTE",
    "LOTTO",
    "LOTUS",
    "LOUED",
    "LOUGH",
    "LOUIE",
    "LOUIS",
    "LOUMA",
    "LOUND",
    "LOUNS",
    "LOUPE",
    "LOUPS",
    "LOURE",
    "LOURS",
    "LOURY",
    "LOUTS",
    "LOVAT",
    "LOVED",
    "LOVES",
    "LOVEY",
    "LOVIE",
    "LOWAN",
    "LOWED",
    "LOWES",
    "LOWND",
    "LOWNE",
    "LOWNS",
    "LOWPS",
    "LOWRY",
    "LOWSE",
    "LOWTS",
    "LOXED",
    "LOXES",
    "LOZEN",
    "LUACH",
    "LUAUS",
    "LUBED",
    "LUBES",
    "LUBRA",
    "LUCES",
    "LUCKS",
    "LUCRE",
    "LUDES",
    "LUDIC",
    "LUDOS",
    "LUFFA",
    "LUFFS",
    "LUGED",
    "LUGER",
    "LUGES",
    "LULLS",
    "LULUS",
    "LUMAS",
    "LUMBI",
    "LUMME",
    "LUMMY",
    "LUMPS",
    "LUNAS",
    "LUNES",
    "LUNET",
    "LUNGI",
    "LUNGS",
    "LUNKS",
    "LUNTS",
    "LUPIN",
    "LURED",
    "LURER",
    "LURES",
    "LUREX",
    "LURGI",
    "LURGY",
    "LURKS",
    "LURRY",
    "LURVE",
    "LUSER",
    "LUSHY",
    "LUSKS",
    "LUSTS",
    "LUSUS",
    "LUTEA",
    "LUTED",
    "LUTER",
    "LUTES",
    "LUVVY",
    "LUXED",
    "LUXER",
    "LUXES",
    "LWEIS",
    "LYAMS",
    "LYARD",
    "LYART",
    "LYASE",
    "LYCEA",
    "LYCEE",
    "LYCRA",
    "LYMES",
    "LYNES",
    "LYRES",
    "LYSED",
    "LYSES",
    "LYSIN",
    "LYSIS",
    "LYSOL",
    "LYSSA",
    "LYTED",
    "LYTES",
    "LYTHE",
    "LYTIC",
    "LYTTA",
    "MAAED",
    "MAARE",
    "MAARS",
    "MABES",
    "MACAS",
    "MACED",
    "MACER",
    "MACES",
    "MACHE",
    "MACHI",
    "MACHS",
    "MACKS",
    "MACLE",
    "MACON",
    "MADGE",
    "MADID",
    "MADRE",
    "MAERL",
    "MAFIC",
    "MAGES",
    "MAGGS",
    "MAGOT",
    "MAGUS",
    "MAHOE",
    "MAHUA",
    "MAHWA",
    "MAIDS",
    "MAIKO",
    "MAIKS",
    "MAILE",
    "MAILL",
    "MAILS",
    "MAIMS",
    "MAINS",
    "MAIRE",
    "MAIRS",
    "MAISE",
    "MAIST",
    "MAKAR",
    "MAKES",
    "MAKIS",
    "MAKOS",
    "MALAM",
    "MALAR",
    "MALAS",
    "MALAX",
    "MALES",
    "MALIC",
    "MALIK",
    "MALIS",
    "MALLS",
    "MALMS",
    "MALMY",
    "MALTS",
    "MALTY",
    "MALUS",
    "MALVA",
    "MALWA",
    "MAMAS",
    "MAMBA",
    "MAMEE",
    "MAMEY",
    "MAMIE",
    "MANAS",
    "MANAT",
    "MANDI",
    "MANEB",
    "MANED",
    "MANEH",
    "MANES",
    "MANET",
    "MANGS",
    "MANIS",
    "MANKY",
    "MANNA",
    "MANOS",
    "MANSE",
    "MANTA",
    "MANTO",
    "MANTY",
    "MANUL",
    "MANUS",
    "MAPAU",
    "MAQUI",
    "MARAE",
    "MARAH",
    "MARAS",
    "MARCS",
    "MARDY",
    "MARES",
    "MARGE",
    "MARGS",
    "MARIA",
    "MARID",
    "MARKA",
    "MARKS",
    "MARLE",
    "MARLS",
    "MARLY",
    "MARMS",
    "MARON",
    "MAROR",
    "MARRA",
    "MARRI",
    "MARSE",
    "MARTS",
    "MARVY",
    "MASAS",
    "MASED",
    "MASER",
    "MASES",
    "MASHY",
    "MASKS",
    "MASSA",
    "MASSY",
    "MASTS",
    "MASTY",
    "MASUS",
    "MATAI",
    "MATED",
    "MATER",
    "MATES",
    "MATHS",
    "MATIN",
    "MATLO",
    "MATTE",
    "MATTS",
    "MATZA",
    "MATZO",
    "MAUBY",
    "MAUDS",
    "MAULS",
    "MAUND",
    "MAURI",
    "MAUSY",
    "MAUTS",
    "MAUZY",
    "MAVEN",
    "MAVIE",
    "MAVIN",
    "MAVIS",
    "MAWED",
    "MAWKS",
    "MAWKY",
    "MAWNS",
    "MAWRS",
    "MAXED",
    "MAXES",
    "MAXIS",
    "MAYAN",
    "MAYAS",
    "MAYED",
    "MAYOS",
    "MAYST",
    "MAZED",
    "MAZER",
    "MAZES",
    "MAZEY",
    "MAZUT",
    "MBIRA",
    "MEADS",
    "MEALS",
    "MEANE",
    "MEANS",
    "MEANY",
    "MEARE",
    "MEASE",
    "MEATH",
    "MEATS",
    "MEBOS",
    "MECHS",
    "MECKS",
    "MEDII",
    "MEDLE",
    "MEEDS",
    "MEERS",
    "MEETS",
    "MEFFS",
    "MEINS",
    "MEINT",
    "MEINY",
    "MEITH",
    "MEKKA",
    "MELAS",
    "MELBA",
    "MELDS",
    "MELIC",
    "MELIK",
    "MELLS",
    "MELTS",
    "MELTY",
    "MEMES",
    "MEMOS",
    "MENAD",
    "MENDS",
    "MENED",
    "MENES",
    "MENGE",
    "MENGS",
    "MENSA",
    "MENSE",
    "MENSH",
    "MENTA",
    "MENTO",
    "MENUS",
    "MEOUS",
    "MEOWS",
    "MERCH",
    "MERCS",
    "MERDE",
    "MERED",
    "MEREL",
    "MERER",
    "MERES",
    "MERIL",
    "MERIS",
    "MERKS",
    "MERLE",
    "MERLS",
    "MERSE",
    "MESAL",
    "MESAS",
    "MESEL",
    "MESES",
    "MESHY",
    "MESIC",
    "MESNE",
    "MESON",
    "MESSY",
    "MESTO",
    "METED",
    "METES",
    "METHO",
    "METHS",
    "METIC",
    "METIF",
    "METIS",
    "METOL",
    "METRE",
    "MEUSE",
    "MEVED",
    "MEVES",
    "MEWED",
    "MEWLS",
    "MEYNT",
    "MEZES",
    "MEZZE",
    "MEZZO",
    "MHORR",
    "MIAOU",
    "MIAOW",
    "MIASM",
    "MIAUL",
    "MICAS",
    "MICHE",
    "MICHT",
    "MICKS",
    "MICKY",
    "MICOS",
    "MICRA",
    "MIDDY",
    "MIDGY",
    "MIDIS",
    "MIENS",
    "MIEVE",
    "MIFFS",
    "MIFFY",
    "MIFTY",
    "MIGGS",
    "MIHAS",
    "MIHIS",
    "MIKED",
    "MIKES",
    "MIKRA",
    "MIKVA",
    "MILCH",
    "MILDS",
    "MILER",
    "MILES",
    "MILFS",
    "MILIA",
    "MILKO",
    "MILKS",
    "MILLE",
    "MILLS",
    "MILOR",
    "MILOS",
    "MILPA",
    "MILTS",
    "MILTY",
    "MILTZ",
    "MIMED",
    "MIMEO",
    "MIMER",
    "MIMES",
    "MIMSY",
    "MINAE",
    "MINAR",
    "MINAS",
    "MINCY",
    "MINDS",
    "MINED",
    "MINES",
    "MINGE",
    "MINGS",
    "MINGY",
    "MINIS",
    "MINKE",
    "MINKS",
    "MINNY",
    "MINOS",
    "MINTS",
    "MIRED",
    "MIRES",
    "MIREX",
    "MIRID",
    "MIRIN",
    "MIRKS",
    "MIRKY",
    "MIRLY",
    "MIROS",
    "MIRVS",
    "MIRZA",
    "MISCH",
    "MISDO",
    "MISES",
    "MISGO",
    "MISOS",
    "MISSA",
    "MISTS",
    "MISTY",
    "MITCH",
    "MITER",
    "MITES",
    "MITIS",
    "MITRE",
    "MITTS",
    "MIXED",
    "MIXEN",
    "MIXER",
    "MIXES",
    "MIXTE",
    "MIXUP",
    "MIZEN",
    "MIZZY",
    "MNEME",
    "MOANS",
    "MOATS",
    "MOBBY",
    "MOBES",
    "MOBEY",
    "MOBIE",
    "MOBLE",
    "MOCHI",
    "MOCHS",
    "MOCHY",
    "MOCKS",
    "MODER",
    "MODES",
    "MODGE",
    "MODII",
    "MODUS",
    "MOERS",
    "MOFOS",
    "MOGGY",
    "MOHEL",
    "MOHOS",
    "MOHRS",
    "MOHUA",
    "MOHUR",
    "MOILE",
    "MOILS",
    "MOIRA",
    "MOIRE",
    "MOITS",
    "MOJOS",
    "MOKES",
    "MOKIS",
    "MOKOS",
    "MOLAL",
    "MOLAS",
    "MOLDS",
    "MOLED",
    "MOLES",
    "MOLLA",
    "MOLLS",
    "MOLLY",
    "MOLTO",
    "MOLTS",
    "MOLYS",
    "MOMES",
    "MOMMA",
    "MOMMY",
    "MOMUS",
    "MONAD",
    "MONAL",
    "MONAS",
    "MONDE",
    "MONDO",
    "MONER",
    "MONGO",
    "MONGS",
    "MONIC",
    "MONIE",
    "MONKS",
    "MONOS",
    "MONTE",
    "MONTY",
    "MOOBS",
    "MOOCH",
    "MOODS",
    "MOOED",
    "MOOKS",
    "MOOLA",
    "MOOLI",
    "MOOLS",
    "MOOLY",
    "MOONG",
    "MOONS",
    "MOONY",
    "MOOPS",
    "MOORS",
    "MOORY",
    "MOOTS",
    "MOOVE",
    "MOPED",
    "MOPER",
    "MOPES",
    "MOPEY",
    "MOPPY",
    "MOPSY",
    "MOPUS",
    "MORAE",
    "MORAS",
    "MORAT",
    "MORAY",
    "MOREL",
    "MORES",
    "MORIA",
    "MORNE",
    "MORNS",
    "MORRA",
    "MORRO",
    "MORSE",
    "MORTS",
    "MOSED",
    "MOSES",
    "MOSEY",
    "MOSKS",
    "MOSSO",
    "MOSTE",
    "MOSTS",
    "MOTED",
    "MOTEN",
    "MOTES",
    "MOTET",
    "MOTEY",
    "MOTHS",
    "MOTHY",
    "MOTIS",
    "MOTTE",
    "MOTTS",
    "MOTTY",
    "MOTUS",
    "MOTZA",
    "MOUCH",
    "MOUES",
    "MOULD",
    "MOULS",
    "MOUPS",
    "MOUST",
    "MOUSY",
    "MOVED",
    "MOVES",
    "MOWAS",
    "MOWED",
    "MOWRA",
    "MOXAS",
    "MOXIE",
    "MOYAS",
    "MOYLE",
    "MOYLS",
    "MOZED",
    "MOZES",
    "MOZOS",
    "MPRET",
    "MUCHO",
    "MUCIC",
    "MUCID",
    "MUCIN",
    "MUCKS",
    "MUCOR",
    "MUCRO",
    "MUDGE",
    "MUDIR",
    "MUDRA",
    "MUFFS",
    "MUFTI",
    "MUGGA",
    "MUGGS",
    "MUGGY",
    "MUHLY",
    "MUIDS",
    "MUILS",
    "MUIRS",
    "MUIST",
    "MUJIK",
    "MULCT",
    "MULED",
    "MULES",
    "MULEY",
    "MULGA",
    "MULIE",
    "MULLA",
    "MULLS",
    "MULSE",
    "MULSH",
    "MUMMS",
    "MUMPS",
    "MUMSY",
    "MUMUS",
    "MUNGA",
    "MUNGE",
    "MUNGO",
    "MUNGS",
    "MUNIS",
    "MUNTS",
    "MUNTU",
    "MUONS",
    "MURAS",
    "MURED",
    "MURES",
    "MUREX",
    "MURID",
    "MURKS",
    "MURLS",
    "MURLY",
    "MURRA",
    "MURRE",
    "MURRI",
    "MURRS",
    "MURRY",
    "MURTI",
    "MURVA",
    "MUSAR",
    "MUSCA",
    "MUSED",
    "MUSER",
    "MUSES",
    "MUSET",
    "MUSHA",
    "MUSIT",
    "MUSKS",
    "MUSOS",
    "MUSSE",
    "MUSSY",
    "MUSTH",
    "MUSTS",
    "MUTCH",
    "MUTED",
    "MUTER",
    "MUTES",
    "MUTHA",
    "MUTIS",
    "MUTON",
    "MUTTS",
    "MUXED",
    "MUXES",
    "MUZAK",
    "MUZZY",
    "MVULE",
    "MYALL",
    "MYLAR",
    "MYNAH",
    "MYNAS",
    "MYOID",
    "MYOMA",
    "MYOPE",
    "MYOPS",
    "MYOPY",
    "MYSID",
    "MYTHI",
    "MYTHS",
    "MYTHY",
    "MYXOS",
    "MZEES",
    "NAAMS",
    "NAANS",
    "NABES",
    "NABIS",
    "NABKS",
    "NABLA",
    "NABOB",
    "NACHE",
    "NACHO",
    "NACRE",
    "NADAS",
    "NAEVE",
    "NAEVI",
    "NAFFS",
    "NAGAS",
    "NAGGY",
    "NAGOR",
    "NAHAL",
    "NAIAD",
    "NAIFS",
    "NAIKS",
    "NAILS",
    "NAIRA",
    "NAIRU",
    "NAKED",
    "NAKER",
    "NAKFA",
    "NALAS",
    "NALED",
    "NALLA",
    "NAMED",
    "NAMER",
    "NAMES",
    "NAMMA",
    "NAMUS",
    "NANAS",
    "NANCE",
    "NANCY",
    "NANDU",
    "NANNA",
    "NANOS",
    "NANUA",
    "NAPAS",
    "NAPED",
    "NAPES",
    "NAPOO",
    "NAPPA",
    "NAPPE",
    "NAPPY",
    "NARAS",
    "NARCO",
    "NARCS",
    "NARDS",
    "NARES",
    "NARIC",
    "NARIS",
    "NARKS",
    "NARKY",
    "NARRE",
    "NASHI",
    "NATCH",
    "NATES",
    "NATIS",
    "NATTY",
    "NAUCH",
    "NAUNT",
    "NAVAR",
    "NAVES",
    "NAVEW",
    "NAVVY",
    "NAWAB",
    "NAZES",
    "NAZIR",
    "NAZIS",
    "NDUJA",
    "NEAFE",
    "NEALS",
    "NEAPS",
    "NEARS",
    "NEATH",
    "NEATS",
    "NEBEK",
    "NEBEL",
    "NECKS",
    "NEDDY",
    "NEEDS",
    "NEELD",
    "NEELE",
    "NEEMB",
    "NEEMS",
    "NEEPS",
    "NEESE",
    "NEEZE",
    "NEGRO",
    "NEGUS",
    "NEIFS",
    "NEIST",
    "NEIVE",
    "NELIS",
    "NELLY",
    "NEMAS",
    "NEMNS",
    "NEMPT",
    "NENES",
    "NEONS",
    "NEPER",
    "NEPIT",
    "NERAL",
    "NERDS",
    "NERKA",
    "NERKS",
    "NEROL",
    "NERTS",
    "NERTZ",
    "NERVY",
    "NESTS",
    "NETES",
    "NETOP",
    "NETTS",
    "NETTY",
    "NEUKS",
    "NEUME",
    "NEUMS",
    "NEVEL",
    "NEVES",
    "NEVUS",
    "NEWBS",
    "NEWED",
    "NEWEL",
    "NEWIE",
    "NEWSY",
    "NEWTS",
    "NEXTS",
    "NEXUS",
    "NGAIO",
    "NGANA",
    "NGATI",
    "NGOMA",
    "NGWEE",
    "NICAD",
    "NICHT",
    "NICKS",
    "NICOL",
    "NIDAL",
    "NIDED",
    "NIDES",
    "NIDOR",
    "NIDUS",
    "NIEFS",
    "NIEVE",
    "NIFES",
    "NIFFS",
    "NIFFY",
    "NIFTY",
    "NIGER",
    "NIGHS",
    "NIHIL",
    "NIKAB",
    "NIKAH",
    "NIKAU",
    "NILLS",
    "NIMBI",
    "NIMBS",
    "NIMPS",
    "NINER",
    "NINES",
    "NINON",
    "NIPAS",
    "NIPPY",
    "NIQAB",
    "NIRLS",
    "NIRLY",
    "NISEI",
    "NISSE",
    "NISUS",
    "NITER",
    "NITES",
    "NITID",
    "NITON",
    "NITRE",
    "NITRO",
    "NITRY",
    "NITTY",
    "NIVAL",
    "NIXED",
    "NIXER",
    "NIXES",
    "NIXIE",
    "NIZAM",
    "NKOSI",
    "NOAHS",
    "NOBBY",
    "NOCKS",
    "NODAL",
    "NODDY",
    "NODES",
    "NODUS",
    "NOELS",
    "NOGGS",
    "NOHOW",
    "NOILS",
    "NOILY",
    "NOINT",
    "NOIRS",
    "NOLES",
    "NOLLS",
    "NOLOS",
    "NOMAS",
    "NOMEN",
    "NOMES",
    "NOMIC",
    "NOMOI",
    "NOMOS",
    "NONAS",
    "NONCE",
    "NONES",
    "NONET",
    "NONGS",
    "NONIS",
    "NONNY",
    "NONYL",
    "NOOBS",
    "NOOIT",
    "NOOKS",
    "NOOKY",
    "NOONS",
    "NOOPS",
    "NOPAL",
    "NORIA",
    "NORIS",
    "NORKS",
    "NORMA",
    "NORMS",
    "NOSED",
    "NOSER",
    "NOSES",
    "NOTAL",
    "NOTED",
    "NOTER",
    "NOTES",
    "NOTUM",
    "NOULD",
    "NOULE",
    "NOULS",
    "NOUNS",
    "NOUNY",
    "NOUPS",
    "NOVAE",
    "NOVAS",
    "NOVUM",
    "NOWAY",
    "NOWED",
    "NOWLS",
    "NOWTS",
    "NOWTY",
    "NOXAL",
    "NOXES",
    "NOYAU",
    "NOYED",
    "NOYES",
    "NUBBY",
    "NUBIA",
    "NUCHA",
    "NUDDY",
    "NUDER",
    "NUDES",
    "NUDIE",
    "NUDZH",
    "NUFFS",
    "NUGAE",
    "NUKED",
    "NUKES",
    "NULLA",
    "NULLS",
    "NUMBS",
    "NUMEN",
    "NUMMY",
    "NUNNY",
    "NURDS",
    "NURDY",
    "NURLS",
    "NURRS",
    "NUTSO",
    "NUTSY",
    "NYAFF",
    "NYALA",
    "NYING",
    "NYSSA",
    "OAKED",
    "OAKER",
    "OAKUM",
    "OARED",
    "OASES",
    "OASIS",
    "OASTS",
    "OATEN",
    "OATER",
    "OATHS",
    "OAVES",
    "OBANG",
    "OBEAH",
    "OBELI",
    "OBEYS",
    "OBIAS",
    "OBIED",
    "OBIIT",
    "OBITS",
    "OBJET",
    "OBOES",
    "OBOLE",
    "OBOLI",
    "OBOLS",
    "OCCAM",
    "OCHER",
    "OCHES",
    "OCHRE",
    "OCHRY",
    "OCKER",
    "OCREA",
    "OCTAD",
    "OCTAN",
    "OCTAS",
    "OCTYL",
    "OCULI",
    "ODAHS",
    "ODALS",
    "ODEON",
    "ODEUM",
    "ODISM",
    "ODIST",
    "ODIUM",
    "ODORS",
    "ODOUR",
    "ODYLE",
    "ODYLS",
    "OFAYS",
    "OFFED",
    "OFFIE",
    "OFLAG",
    "OFTER",
    "OGAMS",
    "OGEED",
    "OGEES",
    "OGGIN",
    "OGHAM",
    "OGIVE",
    "OGLED",
    "OGLER",
    "OGLES",
    "OGMIC",
    "OGRES",
    "OHIAS",
    "OHING",
    "OHMIC",
    "OHONE",
    "OIDIA",
    "OILED",
    "OILER",
    "OINKS",
    "OINTS",
    "OJIME",
    "OKAPI",
    "OKAYS",
    "OKEHS",
    "OKRAS",
    "OKTAS",
    "OLDIE",
    "OLEIC",
    "OLEIN",
    "OLENT",
    "OLEOS",
    "OLEUM",
    "OLIOS",
    "OLLAS",
    "OLLAV",
    "OLLER",
    "OLLIE",
    "OLOGY",
    "OLPAE",
    "OLPES",
    "OMASA",
    "OMBER",
    "OMBUS",
    "OMENS",
    "OMERS",
    "OMITS",
    "OMLAH",
    "OMOVS",
    "OMRAH",
    "ONCER",
    "ONCES",
    "ONCET",
    "ONCUS",
    "ONELY",
    "ONERS",
    "ONERY",
    "ONIUM",
    "ONKUS",
    "ONLAY",
    "ONNED",
    "ONTIC",
    "OOBIT",
    "OOHED",
    "OOMPH",
    "OONTS",
    "OOPED",
    "OORIE",
    "OOSES",
    "OOTID",
    "OOZED",
    "OOZES",
    "OPAHS",
    "OPALS",
    "OPENS",
    "OPEPE",
    "OPING",
    "OPPOS",
    "OPSIN",
    "OPTED",
    "OPTER",
    "ORACH",
    "ORACY",
    "ORALS",
    "ORANG",
    "ORANT",
    "ORATE",
    "ORBED",
    "ORCAS",
    "ORCIN",
    "ORDOS",
    "OREAD",
    "ORFES",
    "ORGIA",
    "ORGIC",
    "ORGUE",
    "ORIBI",
    "ORIEL",
    "ORIXA",
    "ORLES",
    "ORLON",
    "ORLOP",
    "ORMER",
    "ORNIS",
    "ORPIN",
    "ORRIS",
    "ORTHO",
    "ORVAL",
    "ORZOS",
    "OSCAR",
    "OSHAC",
    "OSIER",
    "OSMIC",
    "OSMOL",
    "OSSIA",
    "OSTIA",
    "OTAKU",
    "OTARY",
    "OTTAR",
    "OTTOS",
    "OUBIT",
    "OUCHT",
    "OUENS",
    "OUIJA",
    "OULKS",
    "OUMAS",
    "OUNDY",
    "OUPAS",
    "OUPED",
    "OUPHE",
    "OUPHS",
    "OURIE",
    "OUSEL",
    "OUSTS",
    "OUTBY",
    "OUTED",
    "OUTRE",
    "OUTRO",
    "OUTTA",
    "OUZEL",
    "OUZOS",
    "OVALS",
    "OVELS",
    "OVENS",
    "OVERS",
    "OVIST",
    "OVOLI",
    "OVOLO",
    "OVULE",
    "OWCHE",
    "OWIES",
    "OWLED",
    "OWLER",
    "OWLET",
    "OWNED",
    "OWRES",
    "OWRIE",
    "OWSEN",
    "OXBOW",
    "OXERS",
    "OXEYE",
    "OXIDS",
    "OXIES",
    "OXIME",
    "OXIMS",
    "OXLIP",
    "OXTER",
    "OYERS",
    "OZEKI",
    "OZZIE",
    "PAALS",
    "PAANS",
    "PACAS",
    "PACED",
    "PACER",
    "PACES",
    "PACEY",
    "PACHA",
    "PACKS",
    "PACOS",
    "PACTA",
    "PACTS",
    "PADIS",
    "PADLE",
    "PADMA",
    "PADRE",
    "PADRI",
    "PAEAN",
    "PAEDO",
    "PAEON",
    "PAGED",
    "PAGER",
    "PAGES",
    "PAGLE",
    "PAGOD",
    "PAGRI",
    "PAIKS",
    "PAILS",
    "PAINS",
    "PAIRE",
    "PAIRS",
    "PAISA",
    "PAISE",
    "PAKKA",
    "PALAS",
    "PALAY",
    "PALEA",
    "PALED",
    "PALES",
    "PALET",
    "PALIS",
    "PALKI",
    "PALLA",
    "PALLS",
    "PALLY",
    "PALMS",
    "PALMY",
    "PALPI",
    "PALPS",
    "PALSA",
    "PAMPA",
    "PANAX",
    "PANCE",
    "PANDA",
    "PANDS",
    "PANDY",
    "PANED",
    "PANES",
    "PANGA",
    "PANGS",
    "PANIM",
    "PANKO",
    "PANNE",
    "PANNI",
    "PANTO",
    "PANTS",
    "PANTY",
    "PAOLI",
    "PAOLO",
    "PAPAS",
    "PAPAW",
    "PAPES",
    "PAPPI",
    "PAPPY",
    "PARAE",
    "PARAS",
    "PARCH",
    "PARDI",
    "PARDS",
    "PARDY",
    "PARED",
    "PAREN",
    "PAREO",
    "PARES",
    "PAREU",
    "PAREV",
    "PARGE",
    "PARGO",
    "PARIS",
    "PARKI",
    "PARKS",
    "PARKY",
    "PARLE",
    "PARLY",
    "PARMA",
    "PAROL",
    "PARPS",
    "PARRA",
    "PARRS",
    "PARTI",
    "PARTS",
    "PARVE",
    "PARVO",
    "PASEO",
    "PASES",
    "PASHA",
    "PASHM",
    "PASKA",
    "PASPY",
    "PASSE",
    "PASTS",
    "PATED",
    "PATEN",
    "PATER",
    "PATES",
    "PATHS",
    "PATIN",
    "PATKA",
    "PATLY",
    "PATTE",
    "PATUS",
    "PAUAS",
    "PAULS",
    "PAVAN",
    "PAVED",
    "PAVEN",
    "PAVER",
    "PAVES",
    "PAVID",
    "PAVIN",
    "PAVIS",
    "PAWAS",
    "PAWAW",
    "PAWED",
    "PAWER",
    "PAWKS",
    "PAWKY",
    "PAWLS",
    "PAWNS",
    "PAXES",
    "PAYED",
    "PAYOR",
    "PAYSD",
    "PEAGE",
    "PEAGS",
    "PEAKS",
    "PEAKY",
    "PEALS",
    "PEANS",
    "PEARE",
    "PEARS",
    "PEART",
    "PEASE",
    "PEATS",
    "PEATY",
    "PEAVY",
    "PEAZE",
    "PEBAS",
    "PECHS",
    "PECKE",
    "PECKS",
    "PECKY",
    "PEDES",
    "PEDIS",
    "PEDRO",
    "PEECE",
    "PEEKS",
    "PEELS",
    "PEENS",
    "PEEOY",
    "PEEPE",
    "PEEPS",
    "PEERS",
    "PEERY",
    "PEEVE",
    "PEGGY",
    "PEGHS",
    "PEINS",
    "PEISE",
    "PEIZE",
    "PEKAN",
    "PEKES",
    "PEKIN",
    "PEKOE",
    "PELAS",
    "PELAU",
    "PELES",
    "PELFS",
    "PELLS",
    "PELMA",
    "PELON",
    "PELTA",
    "PELTS",
    "PENDS",
    "PENDU",
    "PENED",
    "PENES",
    "PENGO",
    "PENIE",
    "PENIS",
    "PENKS",
    "PENNA",
    "PENNI",
    "PENTS",
    "PEONS",
    "PEONY",
    "PEPLA",
    "PEPOS",
    "PEPPY",
    "PEPSI",
    "PERAI",
    "PERCE",
    "PERCS",
    "PERDU",
    "PERDY",
    "PEREA",
    "PERES",
    "PERIS",
    "PERKS",
    "PERMS",
    "PERNS",
    "PEROG",
    "PERPS",
    "PERRY",
    "PERSE",
    "PERST",
    "PERTS",
    "PERVE",
    "PERVO",
    "PERVS",
    "PERVY",
    "PESOS",
    "PESTS",
    "PESTY",
    "PETAR",
    "PETER",
    "PETIT",
    "PETRE",
    "PETRI",
    "PETTI",
    "PETTO",
    "PEWEE",
    "PEWIT",
    "PEYSE",
    "PHAGE",
    "PHANG",
    "PHARE",
    "PHARM",
    "PHEER",
    "PHENE",
    "PHEON",
    "PHESE",
    "PHIAL",
    "PHISH",
    "PHIZZ",
    "PHLOX",
    "PHOCA",
    "PHONO",
    "PHONS",
    "PHOTS",
    "PHPHT",
    "PHUTS",
    "PHYLA",
    "PHYLE",
    "PIANI",
    "PIANS",
    "PIBAL",
    "PICAL",
    "PICAS",
    "PICCY",
    "PICKS",
    "PICOT",
    "PICRA",
    "PICUL",
    "PIEND",
    "PIERS",
    "PIERT",
    "PIETA",
    "PIETS",
    "PIEZO",
    "PIGHT",
    "PIGMY",
    "PIING",
    "PIKAS",
    "PIKAU",
    "PIKED",
    "PIKER",
    "PIKES",
    "PIKEY",
    "PIKIS",
    "PIKUL",
    "PILAE",
    "PILAF",
    "PILAO",
    "PILAR",
    "PILAU",
    "PILAW",
    "PILCH",
    "PILEA",
    "PILED",
    "PILEI",
    "PILER",
    "PILES",
    "PILIS",
    "PILLS",
    "PILOW",
    "PILUM",
    "PILUS",
    "PIMAS",
    "PIMPS",
    "PINAS",
    "PINED",
    "PINES",
    "PINGO",
    "PINGS",
    "PINKO",
    "PINKS",
    "PINNA",
    "PINNY",
    "PINON",
    "PINOT",
    "PINTA",
    "PINTS",
    "PINUP",
    "PIONS",
    "PIONY",
    "PIOUS",
    "PIOYE",
    "PIOYS",
    "PIPAL",
    "PIPAS",
    "PIPED",
    "PIPES",
    "PIPET",
    "PIPIS",
    "PIPIT",
    "PIPPY",
    "PIPUL",
    "PIRAI",
    "PIRLS",
    "PIRNS",
    "PIROG",
    "PISCO",
    "PISES",
    "PISKY",
    "PISOS",
    "PISSY",
    "PISTE",
    "PITAS",
    "PITHS",
    "PITON",
    "PITOT",
    "PITTA",
    "PIUMS",
    "PIXES",
    "PIZED",
    "PIZES",
    "PLAAS",
    "PLACK",
    "PLAGE",
    "PLANS",
    "PLAPS",
    "PLASH",
    "PLASM",
    "PLAST",
    "PLATS",
    "PLATT",
    "PLATY",
    "PLAYA",
    "PLAYS",
    "PLEAS",
    "PLEBE",
    "PLEBS",
    "PLENA",
    "PLEON",
    "PLESH",
    "PLEWS",
    "PLICA",
    "PLIES",
    "PLIMS",
    "PLING",
    "PLINK",
    "PLOAT",
    "PLODS",
    "PLONG",
    "PLONK",
    "PLOOK",
    "PLOPS",
    "PLOTS",
    "PLOTZ",
    "PLOUK",
    "PLOWS",
    "PLOYE",
    "PLOYS",
    "PLUES",
    "PLUFF",
    "PLUGS",
    "PLUMS",
    "PLUMY",
    "PLUOT",
    "PLUTO",
    "PLYER",
    "POACH",
    "POAKA",
    "POAKE",
    "POBOY",
    "POCKS",
    "POCKY",
    "PODAL",
    "PODDY",
    "PODEX",
    "PODGE",
    "PODGY",
    "PODIA",
    "POEMS",
    "POEPS",
    "POETS",
    "POGEY",
    "POGGE",
    "POGOS",
    "POHED",
    "POILU",
    "POIND",
    "POKAL",
    "POKED",
    "POKES",
    "POKEY",
    "POKIE",
    "POLED",
    "POLER",
    "POLES",
    "POLEY",
    "POLIO",
    "POLIS",
    "POLJE",
    "POLKS",
    "POLLS",
    "POLLY",
    "POLOS",
    "POLTS",
    "POLYS",
    "POMBE",
    "POMES",
    "POMMY",
    "POMOS",
    "POMPS",
    "PONCE",
    "PONCY",
    "PONDS",
    "PONES",
    "PONEY",
    "PONGA",
    "PONGO",
    "PONGS",
    "PONGY",
    "PONKS",
    "PONTS",
    "PONTY",
    "PONZU",
    "POODS",
    "POOED",
    "POOFS",
    "POOFY",
    "POOHS",
    "POOJA",
    "POOKA",
    "POOKS",
    "POOLS",
    "POONS",
    "POOPS",
    "POOPY",
    "POORI",
    "POORT",
    "POOTS",
    "POOVE",
    "POOVY",
    "POPES",
    "POPPA",
    "POPSY",
    "PORAE",
    "PORAL",
    "PORED",
    "PORER",
    "PORES",
    "PORGE",
    "PORGY",
    "PORIN",
    "PORKS",
    "PORKY",
    "PORNO",
    "PORNS",
    "PORNY",
    "PORTA",
    "PORTS",
    "PORTY",
    "POSED",
    "POSES",
    "POSEY",
    "POSHO",
    "POSTS",
    "POTAE",
    "POTCH",
    "POTED",
    "POTES",
    "POTIN",
    "POTOO",
    "POTSY",
    "POTTO",
    "POTTS",
    "POTTY",
    "POUFF",
    "POUFS",
    "POUKE",
    "POUKS",
    "POULE",
    "POULP",
    "POULT",
    "POUPE",
    "POUPT",
    "POURS",
    "POUTS",
    "POWAN",
    "POWIN",
    "POWND",
    "POWNS",
    "POWNY",
    "POWRE",
    "POXED",
    "POXES",
    "POYNT",
    "POYOU",
    "POYSE",
    "POZZY",
    "PRAAM",
    "PRADS",
    "PRAHU",
    "PRAMS",
    "PRANA",
    "PRANG",
    "PRAOS",
    "PRASE",
    "PRATE",
    "PRATS",
    "PRATT",
    "PRATY",
    "PRAUS",
    "PRAYS",
    "PREDY",
    "PREED",
    "PREES",
    "PREIF",
    "PREMS",
    "PREMY",
    "PRENT",
    "PREON",
    "PREOP",
    "PREPS",
    "PRESA",
    "PRESE",
    "PREST",
    "PREVE",
    "PREXY",
    "PREYS",
    "PRIAL",
    "PRICY",
    "PRIEF",
    "PRIER",
    "PRIES",
    "PRIGS",
    "PRILL",
    "PRIMA",
    "PRIMI",
    "PRIMP",
    "PRIMS",
    "PRIMY",
    "PRINK",
    "PRION",
    "PRISE",
    "PRISS",
    "PROAS",
    "PROBS",
    "PRODS",
    "PROEM",
    "PROFS",
    "PROGS",
    "PROIN",
    "PROKE",
    "PROLE",
    "PROLL",
    "PROMO",
    "PROMS",
    "PRONK",
    "PROPS",
    "PRORE",
    "PROSO",
    "PROSS",
    "PROST",
    "PROSY",
    "PROTO",
    "PROUL",
    "PROWS",
    "PROYN",
    "PRUNT",
    "PRUTA",
    "PRYER",
    "PRYSE",
    "PSEUD",
    "PSHAW",
    "PSION",
    "PSOAE",
    "PSOAI",
    "PSOAS",
    "PSORA",
    "PSYCH",
    "PSYOP",
    "PUBCO",
    "PUBES",
    "PUBIS",
    "PUCAN",
    "PUCER",
    "PUCES",
    "PUCKA",
    "PUCKS",
    "PUDDY",
    "PUDGE",
    "PUDIC",
    "PUDOR",
    "PUDSY",
    "PUDUS",
    "PUERS",
    "PUFFA",
    "PUFFS",
    "PUGGY",
    "PUGIL",
    "PUHAS",
    "PUJAH",
    "PUJAS",
    "PUKAS",
    "PUKED",
    "PUKER",
    "PUKES",
    "PUKEY",
    "PUKKA",
    "PUKUS",
    "PULAO",
    "PULAS",
    "PULED",
    "PULER",
    "PULES",
    "PULIK",
    "PULIS",
    "PULKA",
    "PULKS",
    "PULLI",
    "PULLS",
    "PULLY",
    "PULMO",
    "PULPS",
    "PULUS",
    "PUMAS",
    "PUMIE",
    "PUMPS",
    "PUNAS",
    "PUNCE",
    "PUNGA",
    "PUNGS",
    "PUNJI",
    "PUNKA",
    "PUNKS",
    "PUNKY",
    "PUNNY",
    "PUNTO",
    "PUNTS",
    "PUNTY",
    "PUPAE",
    "PUPAS",
    "PUPUS",
    "PURDA",
    "PURED",
    "PURES",
    "PURIN",
    "PURIS",
    "PURLS",
    "PURPY",
    "PURRS",
    "PURSY",
    "PURTY",
    "PUSES",
    "PUSLE",
    "PUTID",
    "PUTON",
    "PUTTI",
    "PUTTO",
    "PUTTS",
    "PUZEL",
    "PWNED",
    "PYATS",
    "PYETS",
    "PYGAL",
    "PYINS",
    "PYLON",
    "PYNED",
    "PYNES",
    "PYOID",
    "PYOTS",
    "PYRAL",
    "PYRAN",
    "PYRES",
    "PYREX",
    "PYRIC",
    "PYROS",
    "PYXED",
    "PYXES",
    "PYXIE",
    "PYXIS",
    "PZAZZ",
    "QADIS",
    "QAIDS",
    "QAJAQ",
    "QANAT",
    "QAPIK",
    "QIBLA",
    "QOPHS",
    "QORMA",
    "QUADS",
    "QUAFF",
    "QUAGS",
    "QUAIR",
    "QUAIS",
    "QUAKY",
    "QUALE",
    "QUANT",
    "QUARE",
    "QUASS",
    "QUATE",
    "QUATS",
    "QUAYD",
    "QUAYS",
    "QUBIT",
    "QUEAN",
    "QUEME",
    "QUENA",
    "QUERN",
    "QUEYN",
    "QUEYS",
    "QUICH",
    "QUIDS",
    "QUIFF",
    "QUIMS",
    "QUINA",
    "QUINE",
    "QUINO",
    "QUINS",
    "QUINT",
    "QUIPO",
    "QUIPS",
    "QUIPU",
    "QUIRE",
    "QUIRT",
    "QUIST",
    "QUITS",
    "QUOAD",
    "QUODS",
    "QUOIF",
    "QUOIN",
    "QUOIT",
    "QUOLL",
    "QUONK",
    "QUOPS",
    "QURSH",
    "QUYTE",
    "RABAT",
    "RABIC",
    "RABIS",
    "RACED",
    "RACES",
    "RACHE",
    "RACKS",
    "RACON",
    "RADGE",
    "RADIX",
    "RADON",
    "RAFFS",
    "RAFTS",
    "RAGAS",
    "RAGDE",
    "RAGED",
    "RAGEE",
    "RAGER",
    "RAGES",
    "RAGGA",
    "RAGGS",
    "RAGGY",
    "RAGIS",
    "RAGUS",
    "RAHED",
    "RAHUI",
    "RAIAS",
    "RAIDS",
    "RAIKS",
    "RAILE",
    "RAILS",
    "RAINE",
    "RAINS",
    "RAIRD",
    "RAITA",
    "RAITS",
    "RAJAS",
    "RAJES",
    "RAKED",
    "RAKEE",
    "RAKER",
    "RAKES",
    "RAKIA",
    "RAKIS",
    "RAKUS",
    "RALES",
    "RAMAL",
    "RAMEE",
    "RAMET",
    "RAMIE",
    "RAMIN",
    "RAMIS",
    "RAMMY",
    "RAMPS",
    "RAMUS",
    "RANAS",
    "RANCE",
    "RANDS",
    "RANEE",
    "RANGA",
    "RANGI",
    "RANGS",
    "RANGY",
    "RANID",
    "RANIS",
    "RANKE",
    "RANKS",
    "RANTS",
    "RAPED",
    "RAPER",
    "RAPES",
    "RAPHE",
    "RAPPE",
    "RARED",
    "RAREE",
    "RARES",
    "RARKS",
    "RASED",
    "RASER",
    "RASES",
    "RASPS",
    "RASSE",
    "RASTA",
    "RATAL",
    "RATAN",
    "RATAS",
    "RATCH",
    "RATED",
    "RATEL",
    "RATER",
    "RATES",
    "RATHA",
    "RATHE",
    "RATHS",
    "RATOO",
    "RATOS",
    "RATUS",
    "RAUNS",
    "RAUPO",
    "RAVED",
    "RAVEL",
    "RAVER",
    "RAVES",
    "RAVEY",
    "RAVIN",
    "RAWER",
    "RAWIN",
    "RAWLY",
    "RAWNS",
    "RAXED",
    "RAXES",
    "RAYAH",
    "RAYAS",
    "RAYED",
    "RAYLE",
    "RAYNE",
    "RAZED",
    "RAZEE",
    "RAZER",
    "RAZES",
    "RAZOO",
    "READD",
    "READS",
    "REAIS",
    "REAKS",
    "REALO",
    "REALS",
    "REAME",
    "REAMS",
    "REAMY",
    "REANS",
    "REAPS",
    "REARS",
    "REAST",
    "REATA",
    "REATE",
    "REAVE",
    "REBBE",
    "REBEC",
    "REBID",
    "REBIT",
    "REBOP",
    "REBUY",
    "RECAL",
    "RECCE",
    "RECCO",
    "RECCY",
    "RECIT",
    "RECKS",
    "RECON",
    "RECTA",
    "RECTI",
    "RECTO",
    "REDAN",
    "REDDS",
    "REDDY",
    "REDED",
    "REDES",
    "REDIA",
    "REDID",
    "REDIP",
    "REDLY",
    "REDON",
    "REDOS",
    "REDOX",
    "REDRY",
    "REDUB",
    "REDUX",
    "REDYE",
    "REECH",
    "REEDE",
    "REEDS",
    "REEFS",
    "REEFY",
    "REEKS",
    "REEKY",
    "REELS",
    "REENS",
    "REEST",
    "REEVE",
    "REFED",
    "REFEL",
    "REFFO",
    "REFIS",
    "REFIX",
    "REFLY",
    "REFRY",
    "REGAR",
    "REGES",
    "REGGO",
    "REGIE",
    "REGMA",
    "REGNA",
    "REGOS",
    "REGUR",
    "REHEM",
    "REIFS",
    "REIFY",
    "REIKI",
    "REIKS",
    "REINK",
    "REINS",
    "REIRD",
    "REIST",
    "REIVE",
    "REJIG",
    "REJON",
    "REKED",
    "REKES",
    "REKEY",
    "RELET",
    "RELIE",
    "RELIT",
    "RELLO",
    "REMAN",
    "REMAP",
    "REMEN",
    "REMET",
    "REMEX",
    "REMIX",
    "RENAY",
    "RENDS",
    "RENEY",
    "RENGA",
    "RENIG",
    "RENIN",
    "RENNE",
    "RENOS",
    "RENTE",
    "RENTS",
    "REOIL",
    "REORG",
    "REPEG",
    "REPIN",
    "REPLA",
    "REPOS",
    "REPOT",
    "REPPS",
    "REPRO",
    "RERAN",
    "RERIG",
    "RESAT",
    "RESAW",
    "RESAY",
    "RESEE",
    "RESES",
    "RESEW",
    "RESID",
    "RESIT",
    "RESOD",
    "RESOW",
    "RESTO",
    "RESTS",
    "RESTY",
    "RESUS",
    "RETAG",
    "RETAX",
    "RETEM",
    "RETIA",
    "RETIE",
    "RETOX",
    "REVET",
    "REVIE",
    "REWAN",
    "REWAX",
    "REWED",
    "REWET",
    "REWIN",
    "REWON",
    "REWTH",
    "REXES",
    "REZES",
    "RHEAS",
    "RHEME",
    "RHEUM",
    "RHIES",
    "RHIME",
    "RHINE",
    "RHODY",
    "RHOMB",
    "RHONE",
    "RHUMB",
    "RHYNE",
    "RHYTA",
    "RIADS",
    "RIALS",
    "RIANT",
    "RIATA",
    "RIBAS",
    "RIBBY",
    "RIBES",
    "RICED",
    "RICER",
    "RICES",
    "RICEY",
    "RICHT",
    "RICIN",
    "RICKS",
    "RIDES",
    "RIDGY",
    "RIDIC",
    "RIELS",
    "RIEMS",
    "RIEVE",
    "RIFER",
    "RIFFS",
    "RIFTE",
    "RIFTS",
    "RIFTY",
    "RIGGS",
    "RIGOL",
    "RILED",
    "RILES",
    "RILEY",
    "RILLE",
    "RILLS",
    "RIMAE",
    "RIMED",
    "RIMER",
    "RIMES",
    "RIMUS",
    "RINDS",
    "RINDY",
    "RINES",
    "RINGS",
    "RINKS",
    "RIOJA",
    "RIOTS",
    "RIPED",
    "RIPES",
    "RIPPS",
    "RISES",
    "RISHI",
    "RISKS",
    "RISPS",
    "RISUS",
    "RITES",
    "RITTS",
    "RITZY",
    "RIVAS",
    "RIVED",
    "RIVEL",
    "RIVEN",
    "RIVES",
    "RIYAL",
    "RIZAS",
    "ROADS",
    "ROAMS",
    "ROANS",
    "ROARS",
    "ROARY",
    "ROATE",
    "ROBED",
    "ROBES",
    "ROBLE",
    "ROCKS",
    "RODED",
    "RODES",
    "ROGUY",
    "ROHES",
    "ROIDS",
    "ROILS",
    "ROILY",
    "ROINS",
    "ROIST",
    "ROJAK",
    "ROJIS",
    "ROKED",
    "ROKER",
    "ROKES",
    "ROLAG",
    "ROLES",
    "ROLFS",
    "ROLLS",
    "ROMAL",
    "ROMAN",
    "ROMEO",
    "ROMPS",
    "RONDE",
    "RONDO",
    "RONEO",
    "RONES",
    "RONIN",
    "RONNE",
    "RONTE",
    "RONTS",
    "ROODS",
    "ROOFS",
    "ROOFY",
    "ROOKS",
    "ROOKY",
    "ROOMS",
    "ROONS",
    "ROOPS",
    "ROOPY",
    "ROOSA",
    "ROOSE",
    "ROOTS",
    "ROOTY",
    "ROPED",
    "ROPER",
    "ROPES",
    "ROPEY",
    "ROQUE",
    "RORAL",
    "RORES",
    "RORIC",
    "RORID",
    "RORIE",
    "RORTS",
    "RORTY",
    "ROSED",
    "ROSES",
    "ROSET",
    "ROSHI",
    "ROSIN",
    "ROSIT",
    "ROSTI",
    "ROSTS",
    "ROTAL",
    "ROTAN",
    "ROTAS",
    "ROTCH",
    "ROTED",
    "ROTES",
    "ROTIS",
    "ROTLS",
    "ROTON",
    "ROTOS",
    "ROTTE",
    "ROUEN",
    "ROUES",
    "ROULE",
    "ROULS",
    "ROUMS",
    "ROUPS",
    "ROUPY",
    "ROUST",
    "ROUTH",
    "ROUTS",
    "ROVED",
    "ROVEN",
    "ROVES",
    "ROWAN",
    "ROWED",
    "ROWEL",
    "ROWEN",
    "ROWIE",
    "ROWME",
    "ROWND",
    "ROWTH",
    "ROWTS",
    "ROYNE",
    "ROYST",
    "ROZET",
    "ROZIT",
    "RUANA",
    "RUBAI",
    "RUBBY",
    "RUBEL",
    "RUBES",
    "RUBIN",
    "RUBLE",
    "RUBLI",
    "RUBUS",
    "RUCHE",
    "RUCKS",
    "RUDAS",
    "RUDDS",
    "RUDES",
    "RUDIE",
    "RUDIS",
    "RUEDA",
    "RUERS",
    "RUFFE",
    "RUFFS",
    "RUGAE",
    "RUGAL",
    "RUGGY",
    "RUING",
    "RUINS",
    "RUKHS",
    "RULED",
    "RULES",
    "RUMAL",
    "RUMBO",
    "RUMEN",
    "RUMES",
    "RUMLY",
    "RUMMY",
    "RUMPO",
    "RUMPS",
    "RUMPY",
    "RUNCH",
    "RUNDS",
    "RUNED",
    "RUNES",
    "RUNGS",
    "RUNIC",
    "RUNNY",
    "RUNTS",
    "RUNTY",
    "RUPIA",
    "RURPS",
    "RURUS",
    "RUSAS",
    "RUSES",
    "RUSHY",
    "RUSKS",
    "RUSMA",
    "RUSSE",
    "RUSTS",
    "RUTHS",
    "RUTIN",
    "RUTTY",
    "RYALS",
    "RYBAT",
    "RYKED",
    "RYKES",
    "RYMME",
    "RYNDS",
    "RYOTS",
    "RYPER",
    "SAAGS",
    "SABAL",
    "SABED",
    "SABER",
    "SABES",
    "SABHA",
    "SABIN",
    "SABIR",
    "SABLE",
    "SABOT",
    "SABRA",
    "SABRE",
    "SACKS",
    "SACRA",
    "SADDO",
    "SADES",
    "SADHE",
    "SADHU",
    "SADIS",
    "SADOS",
    "SADZA",
    "SAFED",
    "SAFES",
    "SAGAS",
    "SAGER",
    "SAGES",
    "SAGGY",
    "SAGOS",
    "SAGUM",
    "SAHEB",
    "SAHIB",
    "SAICE",
    "SAICK",
    "SAICS",
    "SAIDS",
    "SAIGA",
    "SAILS",
    "SAIMS",
    "SAINE",
    "SAINS",
    "SAIRS",
    "SAIST",
    "SAITH",
    "SAJOU",
    "SAKAI",
    "SAKER",
    "SAKES",
    "SAKIA",
    "SAKIS",
    "SAKTI",
    "SALAL",
    "SALAT",
    "SALEP",
    "SALES",
    "SALET",
    "SALIC",
    "SALIX",
    "SALLE",
    "SALMI",
    "SALOL",
    "SALOP",
    "SALPA",
    "SALPS",
    "SALSE",
    "SALTO",
    "SALTS",
    "SALUE",
    "SALUT",
    "SAMAN",
    "SAMAS",
    "SAMBA",
    "SAMBO",
    "SAMEK",
    "SAMEL",
    "SAMEN",
    "SAMES",
    "SAMEY",
    "SAMFU",
    "SAMMY",
    "SAMPI",
    "SAMPS",
    "SANDS",
    "SANED",
    "SANES",
    "SANGA",
    "SANGH",
    "SANGO",
    "SANGS",
    "SANKO",
    "SANSA",
    "SANTO",
    "SANTS",
    "SAOLA",
    "SAPAN",
    "SAPID",
    "SAPOR",
    "SARAN",
    "SARDS",
    "SARED",
    "SAREE",
    "SARGE",
    "SARGO",
    "SARIN",
    "SARIS",
    "SARKS",
    "SARKY",
    "SAROD",
    "SAROS",
    "SARUS",
    "SASER",
    "SASIN",
    "SASSE",
    "SATAI",
    "SATAY",
    "SATED",
    "SATEM",
    "SATES",
    "SATIS",
    "SAUBA",
    "SAUCH",
    "SAUGH",
    "SAULS",
    "SAULT",
    "SAUNT",
    "SAURY",
    "SAUTS",
    "SAVED",
    "SAVER",
    "SAVES",
    "SAVEY",
    "SAVIN",
    "SAWAH",
    "SAWED",
    "SAWER",
    "SAXES",
    "SAYED",
    "SAYER",
    "SAYID",
    "SAYNE",
    "SAYON",
    "SAYST",
    "SAZES",
    "SCABS",
    "SCADS",
    "SCAFF",
    "SCAGS",
    "SCAIL",
    "SCALA",
    "SCALL",
    "SCAMS",
    "SCAND",
    "SCANS",
    "SCAPA",
    "SCAPE",
    "SCAPI",
    "SCARP",
    "SCARS",
    "SCART",
    "SCATH",
    "SCATS",
    "SCATT",
    "SCAUD",
    "SCAUP",
    "SCAUR",
    "SCAWS",
    "SCEAT",
    "SCENA",
    "SCEND",
    "SCHAV",
    "SCHMO",
    "SCHUL",
    "SCHWA",
    "SCLIM",
    "SCODY",
    "SCOGS",
    "SCOOG",
    "SCOOT",
    "SCOPA",
    "SCOPS",
    "SCOTS",
    "SCOUG",
    "SCOUP",
    "SCOWP",
    "SCOWS",
    "SCRAB",
    "SCRAE",
    "SCRAG",
    "SCRAN",
    "SCRAT",
    "SCRAW",
    "SCRAY",
    "SCRIM",
    "SCRIP",
    "SCROB",
    "SCROD",
    "SCROG",
    "SCROW",
    "SCUDI",
    "SCUDO",
    "SCUDS",
    "SCUFF",
    "SCUFT",
    "SCUGS",
    "SCULK",
    "SCULL",
    "SCULP",
    "SCULS",
    "SCUMS",
    "SCUPS",
    "SCURF",
    "SCURS",
    "SCUSE",
    "SCUTA",
    "SCUTE",
    "SCUTS",
    "SCUZZ",
    "SCYES",
    "SDAYN",
    "SDEIN",
    "SEALS",
    "SEAME",
    "SEAMS",
    "SEAMY",
    "SEANS",
    "SEARE",
    "SEARS",
    "SEASE",
    "SEATS",
    "SEAZE",
    "SEBUM",
    "SECCO",
    "SECHS",
    "SECTS",
    "SEDER",
    "SEDES",
    "SEDGE",
    "SEDGY",
    "SEDUM",
    "SEEDS",
    "SEEKS",
    "SEELD",
    "SEELS",
    "SEELY",
    "SEEMS",
    "SEEPS",
    "SEEPY",
    "SEERS",
    "SEFER",
    "SEGAR",
    "SEGNI",
    "SEGNO",
    "SEGOL",
    "SEGOS",
    "SEHRI",
    "SEIFS",
    "SEILS",
    "SEINE",
    "SEIRS",
    "SEISE",
    "SEISM",
    "SEITY",
    "SEIZA",
    "SEKOS",
    "SEKTS",
    "SELAH",
    "SELES",
    "SELFS",
    "SELLA",
    "SELLE",
    "SELLS",
    "SELVA",
    "SEMEE",
    "SEMES",
    "SEMIE",
    "SEMIS",
    "SENAS",
    "SENDS",
    "SENES",
    "SENGI",
    "SENNA",
    "SENOR",
    "SENSA",
    "SENSI",
    "SENTE",
    "SENTI",
    "SENTS",
    "SENVY",
    "SENZA",
    "SEPAD",
    "SEPAL",
    "SEPIC",
    "SEPOY",
    "SEPTA",
    "SEPTS",
    "SERAC",
    "SERAI",
    "SERAL",
    "SERED",
    "SERER",
    "SERES",
    "SERFS",
    "SERGE",
    "SERIC",
    "SERIN",
    "SERKS",
    "SERON",
    "SEROW",
    "SERRA",
    "SERRE",
    "SERRS",
    "SERRY",
    "SERVO",
    "SESEY",
    "SESSA",
    "SETAE",
    "SETAL",
    "SETON",
    "SETTS",
    "SEWAN",
    "SEWAR",
    "SEWED",
    "SEWEL",
    "SEWEN",
    "SEWIN",
    "SEXED",
    "SEXER",
    "SEXES",
    "SEXTO",
    "SEXTS",
    "SEYEN",
    "SHADS",
    "SHAGS",
    "SHAHS",
    "SHAKO",
    "SHAKT",
    "SHALM",
    "SHALY",
    "SHAMA",
    "SHAMS",
    "SHAND",
    "SHANS",
    "SHAPS",
    "SHARN",
    "SHASH",
    "SHAUL",
    "SHAWM",
    "SHAWN",
    "SHAWS",
    "SHAYA",
    "SHAYS",
    "SHCHI",
    "SHEAF",
    "SHEAL",
    "SHEAS",
    "SHEDS",
    "SHEEL",
    "SHEND",
    "SHENT",
    "SHEOL",
    "SHERD",
    "SHERE",
    "SHERO",
    "SHETS",
    "SHEVA",
    "SHEWN",
    "SHEWS",
    "SHIAI",
    "SHIEL",
    "SHIER",
    "SHIES",
    "SHILL",
    "SHILY",
    "SHIMS",
    "SHINS",
    "SHIPS",
    "SHIRR",
    "SHIRS",
    "SHISH",
    "SHISO",
    "SHIST",
    "SHITE",
    "SHITS",
    "SHIUR",
    "SHIVA",
    "SHIVE",
    "SHIVS",
    "SHLEP",
    "SHLUB",
    "SHMEK",
    "SHMOE",
    "SHOAT",
    "SHOED",
    "SHOER",
    "SHOES",
    "SHOGI",
    "SHOGS",
    "SHOJI",
    "SHOJO",
    "SHOLA",
    "SHOOL",
    "SHOON",
    "SHOOS",
    "SHOPE",
    "SHOPS",
    "SHORL",
    "SHOTE",
    "SHOTS",
    "SHOTT",
    "SHOWD",
    "SHOWS",
    "SHOYU",
    "SHRED",
    "SHRIS",
    "SHROW",
    "SHTIK",
    "SHTUM",
    "SHTUP",
    "SHULE",
    "SHULN",
    "SHULS",
    "SHUNS",
    "SHURA",
    "SHUTE",
    "SHUTS",
    "SHWAS",
    "SHYER",
    "SIALS",
    "SIBBS",
    "SIBYL",
    "SICES",
    "SICHT",
    "SICKO",
    "SICKS",
    "SICKY",
    "SIDAS",
    "SIDED",
    "SIDER",
    "SIDES",
    "SIDHA",
    "SIDHE",
    "SIDLE",
    "SIELD",
    "SIENS",
    "SIENT",
    "SIETH",
    "SIEUR",
    "SIFTS",
    "SIGHS",
    "SIGIL",
    "SIGLA",
    "SIGNA",
    "SIGNS",
    "SIJOS",
    "SIKAS",
    "SIKER",
    "SIKES",
    "SILDS",
    "SILED",
    "SILEN",
    "SILER",
    "SILES",
    "SILEX",
    "SILKS",
    "SILLS",
    "SILOS",
    "SILTS",
    "SILTY",
    "SILVA",
    "SIMAR",
    "SIMAS",
    "SIMBA",
    "SIMIS",
    "SIMPS",
    "SIMUL",
    "SINDS",
    "SINED",
    "SINES",
    "SINGS",
    "SINHS",
    "SINKS",
    "SINKY",
    "SINUS",
    "SIPED",
    "SIPES",
    "SIPPY",
    "SIRED",
    "SIREE",
    "SIRES",
    "SIRIH",
    "SIRIS",
    "SIROC",
    "SIRRA",
    "SIRUP",
    "SISAL",
    "SISES",
    "SISTA",
    "SISTS",
    "SITAR",
    "SITED",
    "SITES",
    "SITHE",
    "SITKA",
    "SITUP",
    "SITUS",
    "SIVER",
    "SIXER",
    "SIXES",
    "SIXMO",
    "SIXTE",
    "SIZAR",
    "SIZED",
    "SIZEL",
    "SIZER",
    "SIZES",
    "SKAGS",
    "SKAIL",
    "SKALD",
    "SKANK",
    "SKART",
    "SKATS",
    "SKATT",
    "SKAWS",
    "SKEAN",
    "SKEAR",
    "SKEDS",
    "SKEED",
    "SKEEF",
    "SKEEN",
    "SKEER",
    "SKEES",
    "SKEET",
    "SKEGG",
    "SKEGS",
    "SKEIN",
    "SKELF",
    "SKELL",
    "SKELM",
    "SKELP",
    "SKENE",
    "SKENS",
    "SKEOS",
    "SKEPS",
    "SKERS",
    "SKETS",
    "SKEWS",
    "SKIDS",
    "SKIED",
    "SKIES",
    "SKIEY",
    "SKIMO",
    "SKIMS",
    "SKINK",
    "SKINS",
    "SKINT",
    "SKIOS",
    "SKIPS",
    "SKIRL",
    "SKIRR",
    "SKITE",
    "SKITS",
    "SKIVE",
    "SKIVY",
    "SKLIM",
    "SKOAL",
    "SKODY",
    "SKOFF",
    "SKOGS",
    "SKOLS",
    "SKOOL",
    "SKORT",
    "SKOSH",
    "SKRAN",
    "SKRIK",
    "SKUAS",
    "SKUGS",
    "SKYED",
    "SKYER",
    "SKYEY",
    "SKYFS",
    "SKYRE",
    "SKYRS",
    "SKYTE",
    "SLABS",
    "SLADE",
    "SLAES",
    "SLAGS",
    "SLAID",
    "SLAKE",
    "SLAMS",
    "SLANE",
    "SLANK",
    "SLAPS",
    "SLART",
    "SLATS",
    "SLATY",
    "SLAWS",
    "SLAYS",
    "SLEBS",
    "SLEDS",
    "SLEER",
    "SLEWS",
    "SLEYS",
    "SLIER",
    "SLILY",
    "SLIMS",
    "SLIPE",
    "SLIPS",
    "SLIPT",
    "SLISH",
    "SLITS",
    "SLIVE",
    "SLOAN",
    "SLOBS",
    "SLOES",
    "SLOGS",
    "SLOID",
    "SLOJD",
    "SLOMO",
    "SLOOM",
    "SLOOT",
    "SLOPS",
    "SLOPY",
    "SLORM",
    "SLOTS",
    "SLOVE",
    "SLOWS",
    "SLOYD",
    "SLUBB",
    "SLUBS",
    "SLUED",
    "SLUES",
    "SLUFF",
    "SLUGS",
    "SLUIT",
    "SLUMS",
    "SLURB",
    "SLURS",
    "SLUSE",
    "SLYER",
    "SLYPE",
    "SMAAK",
    "SMAIK",
    "SMALM",
    "SMALT",
    "SMARM",
    "SMAZE",
    "SMEEK",
    "SMEES",
    "SMEIK",
    "SMEKE",
    "SMERK",
    "SMEWS",
    "SMIRR",
    "SMIRS",
    "SMITS",
    "SMOGS",
    "SMOKO",
    "SMOLT",
    "SMOOR",
    "SMOOT",
    "SMORE",
    "SMORG",
    "SMOUT",
    "SMOWT",
    "SMUGS",
    "SMURS",
    "SMUSH",
    "SMUTS",
    "SNABS",
    "SNAFU",
    "SNAGS",
    "SNAPS",
    "SNARF",
    "SNARK",
    "SNARS",
    "SNARY",
    "SNASH",
    "SNATH",
    "SNAWS",
    "SNEAD",
    "SNEAP",
    "SNEBS",
    "SNECK",
    "SNEDS",
    "SNEED",
    "SNEES",
    "SNELL",
    "SNIBS",
    "SNICK",
    "SNIES",
    "SNIFT",
    "SNIGS",
    "SNIPS",
    "SNIPY",
    "SNIRT",
    "SNITS",
    "SNOBS",
    "SNODS",
    "SNOEK",
    "SNOEP",
    "SNOGS",
    "SNOKE",
    "SNOOD",
    "SNOOK",
    "SNOOL",
    "SNOOT",
    "SNOTS",
    "SNOWK",
    "SNOWS",
    "SNUBS",
    "SNUGS",
    "SNUSH",
    "SNYES",
    "SOAKS",
    "SOAPS",
    "SOARE",
    "SOARS",
    "SOAVE",
    "SOBAS",
    "SOCAS",
    "SOCES",
    "SOCKO",
    "SOCKS",
    "SOCLE",
    "SODAS",
    "SODDY",
    "SODIC",
    "SODOM",
    "SOFAR",
    "SOFAS",
    "SOFTA",
    "SOFTS",
    "SOFTY",
    "SOGER",
    "SOHUR",
    "SOILS",
    "SOILY",
    "SOJAS",
    "SOJUS",
    "SOKAH",
    "SOKEN",
    "SOKES",
    "SOKOL",
    "SOLAH",
    "SOLAN",
    "SOLAS",
    "SOLDE",
    "SOLDI",
    "SOLDO",
    "SOLDS",
    "SOLED",
    "SOLEI",
    "SOLER",
    "SOLES",
    "SOLON",
    "SOLOS",
    "SOLUM",
    "SOLUS",
    "SOMAN",
    "SOMAS",
    "SONCE",
    "SONDE",
    "SONES",
    "SONGS",
    "SONLY",
    "SONNE",
    "SONNY",
    "SONSE",
    "SONSY",
    "SOOEY",
    "SOOKS",
    "SOOKY",
    "SOOLE",
    "SOOLS",
    "SOOMS",
    "SOOPS",
    "SOOTE",
    "SOOTS",
    "SOPHS",
    "SOPHY",
    "SOPOR",
    "SOPPY",
    "SOPRA",
    "SORAL",
    "SORAS",
    "SORBO",
    "SORBS",
    "SORDA",
    "SORDO",
    "SORDS",
    "SORED",
    "SOREE",
    "SOREL",
    "SORER",
    "SORES",
    "SOREX",
    "SORGO",
    "SORNS",
    "SORRA",
    "SORTA",
    "SORTS",
    "SORUS",
    "SOTHS",
    "SOTOL",
    "SOUCE",
    "SOUCT",
    "SOUGH",
    "SOUKS",
    "SOULS",
    "SOUMS",
    "SOUPS",
    "SOUPY",
    "SOURS",
    "SOUSE",
    "SOUTS",
    "SOWAR",
    "SOWCE",
    "SOWED",
    "SOWFF",
    "SOWFS",
    "SOWLE",
    "SOWLS",
    "SOWMS",
    "SOWND",
    "SOWNE",
    "SOWPS",
    "SOWSE",
    "SOWTH",
    "SOYAS",
    "SOYLE",
    "SOYUZ",
    "SOZIN",
    "SPACY",
    "SPADO",
    "SPAED",
    "SPAER",
    "SPAES",
    "SPAGS",
    "SPAHI",
    "SPAIL",
    "SPAIN",
    "SPAIT",
    "SPAKE",
    "SPALD",
    "SPALE",
    "SPALL",
    "SPALT",
    "SPAMS",
    "SPANE",
    "SPANG",
    "SPANS",
    "SPARD",
    "SPARS",
    "SPART",
    "SPATE",
    "SPATS",
    "SPAUL",
    "SPAWL",
    "SPAWS",
    "SPAYD",
    "SPAYS",
    "SPAZA",
    "SPAZZ",
    "SPEAL",
    "SPEAN",
    "SPEAT",
    "SPECS",
    "SPECT",
    "SPEEL",
    "SPEER",
    "SPEIL",
    "SPEIR",
    "SPEKS",
    "SPELD",
    "SPELK",
    "SPEOS",
    "SPETS",
    "SPEUG",
    "SPEWS",
    "SPEWY",
    "SPIAL",
    "SPICA",
    "SPIDE",
    "SPIER",
    "SPIES",
    "SPIFF",
    "SPIFS",
    "SPILE",
    "SPIMS",
    "SPINA",
    "SPINK",
    "SPINS",
    "SPIRT",
    "SPIRY",
    "SPITS",
    "SPITZ",
    "SPIVS",
    "SPLAY",
    "SPLOG",
    "SPODE",
    "SPODS",
    "SPOOM",
    "SPOOR",
    "SPOOT",
    "SPORK",
    "SPOSH",
    "SPOTS",
    "SPRAD",
    "SPRAG",
    "SPRAT",
    "SPRED",
    "SPREW",
    "SPRIT",
    "SPROD",
    "SPROG",
    "SPRUE",
    "SPRUG",
    "SPUDS",
    "SPUED",
    "SPUER",
    "SPUES",
    "SPUGS",
    "SPULE",
    "SPUME",
    "SPUMY",
    "SPURS",
    "SPUTA",
    "SPYAL",
    "SPYRE",
    "SQUAB",
    "SQUAW",
    "SQUEG",
    "SQUID",
    "SQUIT",
    "SQUIZ",
    "STABS",
    "STADE",
    "STAGS",
    "STAGY",
    "STAIG",
    "STANE",
    "STANG",
    "STAPH",
    "STAPS",
    "STARN",
    "STARR",
    "STARS",
    "STATS",
    "STAUN",
    "STAWS",
    "STAYS",
    "STEAN",
    "STEAR",
    "STEDD",
    "STEDE",
    "STEDS",
    "STEEK",
    "STEEM",
    "STEEN",
    "STEIL",
    "STELA",
    "STELE",
    "STELL",
    "STEME",
    "STEMS",
    "STEND",
    "STENO",
    "STENS",
    "STENT",
    "STEPS",
    "STEPT",
    "STERE",
    "STETS",
    "STEWS",
    "STEWY",
    "STEYS",
    "STICH",
    "STIED",
    "STIES",
    "STILB",
    "STILE",
    "STIME",
    "STIMS",
    "STIMY",
    "STIPA",
    "STIPE",
    "STIRE",
    "STIRK",
    "STIRP",
    "STIRS",
    "STIVE",
    "STIVY",
    "STOAE",
    "STOAI",
    "STOAS",
    "STOAT",
    "STOBS",
    "STOEP",
    "STOGY",
    "STOIT",
    "STOLN",
    "STOMA",
    "STOND",
    "STONG",
    "STONK",
    "STONN",
    "STOOK",
    "STOOR",
    "STOPE",
    "STOPS",
    "STOPT",
    "STOSS",
    "STOTS",
    "STOTT",
    "STOUN",
    "STOUP",
    "STOUR",
    "STOWN",
    "STOWP",
    "STOWS",
    "STRAD",
    "STRAE",
    "STRAG",
    "STRAK",
    "STREP",
    "STREW",
    "STRIA",
    "STRIG",
    "STRIM",
    "STROP",
    "STROW",
    "STROY",
    "STRUM",
    "STUBS",
    "STUDE",
    "STUDS",
    "STULL",
    "STULM",
    "STUMM",
    "STUMS",
    "STUNS",
    "STUPA",
    "STUPE",
    "STURE",
    "STURT",
    "STYED",
    "STYES",
    "STYLI",
    "STYLO",
    "STYME",
    "STYMY",
    "STYRE",
    "STYTE",
    "SUBAH",
    "SUBAS",
    "SUBBY",
    "SUBER",
    "SUBHA",
    "SUCCI",
    "SUCKS",
    "SUCKY",
    "SUCRE",
    "SUDDS",
    "SUDOR",
    "SUDSY",
    "SUEDE",
    "SUENT",
    "SUERS",
    "SUETE",
    "SUETS",
    "SUETY",
    "SUGAN",
    "SUGHS",
    "SUGOS",
    "SUHUR",
    "SUIDS",
    "SUINT",
    "SUITS",
    "SUJEE",
    "SUKHS",
    "SUKUK",
    "SULCI",
    "SULFA",
    "SULFO",
    "SULKS",
    "SULPH",
    "SULUS",
    "SUMIS",
    "SUMMA",
    "SUMOS",
    "SUMPH",
    "SUMPS",
    "SUNIS",
    "SUNKS",
    "SUNNA",
    "SUNNS",
    "SUNUP",
    "SUPES",
    "SUPRA",
    "SURAH",
    "SURAL",
    "SURAS",
    "SURAT",
    "SURDS",
    "SURED",
    "SURES",
    "SURFS",
    "SURFY",
    "SURGY",
    "SURRA",
    "SUSED",
    "SUSES",
    "SUSUS",
    "SUTOR",
    "SUTRA",
    "SUTTA",
    "SWABS",
    "SWACK",
    "SWADS",
    "SWAGE",
    "SWAGS",
    "SWAIL",
    "SWAIN",
    "SWALE",
    "SWALY",
    "SWAMY",
    "SWANG",
    "SWANK",
    "SWANS",
    "SWAPS",
    "SWAPT",
    "SWARD",
    "SWARE",
    "SWARF",
    "SWART",
    "SWATS",
    "SWAYL",
    "SWAYS",
    "SWEAL",
    "SWEDE",
    "SWEED",
    "SWEEL",
    "SWEER",
    "SWEES",
    "SWEIR",
    "SWELT",
    "SWERF",
    "SWEYS",
    "SWIES",
    "SWIGS",
    "SWILE",
    "SWIMS",
    "SWINK",
    "SWIPE",
    "SWIRE",
    "SWISS",
    "SWITH",
    "SWITS",
    "SWIVE",
    "SWIZZ",
    "SWOBS",
    "SWOLE",
    "SWOLN",
    "SWOPS",
    "SWOPT",
    "SWOTS",
    "SWOUN",
    "SYBBE",
    "SYBIL",
    "SYBOE",
    "SYBOW",
    "SYCEE",
    "SYCES",
    "SYCON",
    "SYENS",
    "SYKER",
    "SYKES",
    "SYLIS",
    "SYLPH",
    "SYLVA",
    "SYMAR",
    "SYNCH",
    "SYNCS",
    "SYNDS",
    "SYNED",
    "SYNES",
    "SYNTH",
    "SYPED",
    "SYPES",
    "SYPHS",
    "SYRAH",
    "SYREN",
    "SYSOP",
    "SYTHE",
    "SYVER",
    "TAALS",
    "TAATA",
    "TABER",
    "TABES",
    "TABID",
    "TABIS",
    "TABLA",
    "TABOR",
    "TABUN",
    "TABUS",
    "TACAN",
    "TACES",
    "TACET",
    "TACHE",
    "TACHO",
    "TACHS",
    "TACKS",
    "TACOS",
    "TACTS",
    "TAELS",
    "TAFIA",
    "TAGGY",
    "TAGMA",
    "TAHAS",
    "TAHRS",
    "TAIGA",
    "TAIGS",
    "TAIKO",
    "TAILS",
    "TAINS",
    "TAIRA",
    "TAISH",
    "TAITS",
    "TAJES",
    "TAKAS",
    "TAKES",
    "TAKHI",
    "TAKIN",
    "TAKIS",
    "TAKKY",
    "TALAK",
    "TALAQ",
    "TALAR",
    "TALAS",
    "TALCS",
    "TALCY",
    "TALEA",
    "TALER",
    "TALES",
    "TALKS",
    "TALKY",
    "TALLS",
    "TALMA",
    "TALPA",
    "TALUK",
    "TALUS",
    "TAMAL",
    "TAMED",
    "TAMES",
    "TAMIN",
    "TAMIS",
    "TAMMY",
    "TAMPS",
    "TANAS",
    "TANGA",
    "TANGI",
    "TANGS",
    "TANHS",
    "TANKA",
    "TANKS",
    "TANKY",
    "TANNA",
    "TANSY",
    "TANTI",
    "TANTO",
    "TANTY",
    "TAPAS",
    "TAPED",
    "TAPEN",
    "TAPES",
    "TAPET",
    "TAPIS",
    "TAPPA",
    "TAPUS",
    "TARAS",
    "TARDO",
    "TARED",
    "TARES",
    "TARGA",
    "TARGE",
    "TARNS",
    "TAROC",
    "TAROK",
    "TAROS",
    "TARPS",
    "TARRE",
    "TARRY",
    "TARSI",
    "TARTS",
    "TARTY",
    "TASAR",
    "TASED",
    "TASER",
    "TASES",
    "TASKS",
    "TASSA",
    "TASSE",
    "TASSO",
    "TATAR",
    "TATER",
    "TATES",
    "TATHS",
    "TATIE",
    "TATOU",
    "TATTS",
    "TATUS",
    "TAUBE",
    "TAULD",
    "TAUON",
    "TAUPE",
    "TAUTS",
    "TAVAH",
    "TAVAS",
    "TAVER",
    "TAWAI",
    "TAWAS",
    "TAWED",
    "TAWER",
    "TAWIE",
    "TAWSE",
    "TAWTS",
    "TAXED",
    "TAXER",
    "TAXES",
    "TAXIS",
    "TAXOL",
    "TAXON",
    "TAXOR",
    "TAXUS",
    "TAYRA",
    "TAZZA",
    "TAZZE",
    "TEADE",
    "TEADS",
    "TEAED",
    "TEAKS",
    "TEALS",
    "TEAMS",
    "TEARS",
    "TEATS",
    "TEAZE",
    "TECHS",
    "TECHY",
    "TECTA",
    "TEELS",
    "TEEMS",
    "TEEND",
    "TEENE",
    "TEENS",
    "TEENY",
    "TEERS",
    "TEFFS",
    "TEGGS",
    "TEGUA",
    "TEGUS",
    "TEHRS",
    "TEIID",
    "TEILS",
    "TEIND",
    "TEINS",
    "TELAE",
    "TELCO",
    "TELES",
    "TELEX",
    "TELIA",
    "TELIC",
    "TELLS",
    "TELLY",
    "TELOI",
    "TELOS",
    "TEMED",
    "TEMES",
    "TEMPI",
    "TEMPS",
    "TEMPT",
    "TEMSE",
    "TENCH",
    "TENDS",
    "TENDU",
    "TENES",
    "TENGE",
    "TENIA",
    "TENNE",
    "TENNO",
    "TENNY",
    "TENON",
    "TENTS",
    "TENTY",
    "TENUE",
    "TEPAL",
    "TEPAS",
    "TEPOY",
    "TERAI",
    "TERAS",
    "TERCE",
    "TEREK",
    "TERES",
    "TERFE",
    "TERFS",
    "TERGA",
    "TERMS",
    "TERNE",
    "TERNS",
    "TERRY",
    "TERTS",
    "TESLA",
    "TESTA",
    "TESTE",
    "TESTS",
    "TETES",
    "TETHS",
    "TETRA",
    "TETRI",
    "TEUCH",
    "TEUGH",
    "TEWED",
    "TEWEL",
    "TEWIT",
    "TEXAS",
    "TEXES",
    "TEXTS",
    "THACK",
    "THAGI",
    "THAIM",
    "THALE",
    "THALI",
    "THANA",
    "THANE",
    "THANG",
    "THANS",
    "THANX",
    "THARM",
    "THARS",
    "THAWS",
    "THAWY",
    "THEBE",
    "THECA",
    "THEED",
    "THEEK",
    "THEES",
    "THEGN",
    "THEIC",
    "THEIN",
    "THELF",
    "THEMA",
    "THENS",
    "THEOW",
    "THERM",
    "THESP",
    "THETE",
    "THEWS",
    "THEWY",
    "THIGS",
    "THILK",
    "THILL",
    "THINE",
    "THINS",
    "THIOL",
    "THIRL",
    "THOFT",
    "THOLE",
    "THOLI",
    "THORO",
    "THORP",
    "THOUS",
    "THOWL",
    "THRAE",
    "THRAW",
    "THRID",
    "THRIP",
    "THROE",
    "THUDS",
    "THUGS",
    "THUJA",
    "THUNK",
    "THURL",
    "THUYA",
    "THYMI",
    "THYMY",
    "TIANS",
    "TIARS",
    "TICAL",
    "TICCA",
    "TICED",
    "TICES",
    "TICHY",
    "TICKS",
    "TICKY",
    "TIDDY",
    "TIDED",
    "TIDES",
    "TIERS",
    "TIFFS",
    "TIFOS",
    "TIFTS",
    "TIGES",
    "TIGON",
    "TIKAS",
    "TIKES",
    "TIKIS",
    "TIKKA",
    "TILAK",
    "TILED",
    "TILER",
    "TILES",
    "TILLS",
    "TILLY",
    "TILTH",
    "TILTS",
    "TIMBO",
    "TIMED",
    "TIMES",
    "TIMON",
    "TIMPS",
    "TINAS",
    "TINCT",
    "TINDS",
    "TINEA",
    "TINED",
    "TINES",
    "TINGE",
    "TINGS",
    "TINKS",
    "TINNY",
    "TINTS",
    "TINTY",
    "TIPIS",
    "TIPPY",
    "TIRED",
    "TIRES",
    "TIRLS",
    "TIROS",
    "TIRRS",
    "TITCH",
    "TITER",
    "TITIS",
    "TITRE",
    "TITTY",
    "TITUP",
    "TIYIN",
    "TIYNS",
    "TIZES",
    "TIZZY",
    "TOADS",
    "TOADY",
    "TOAZE",
    "TOCKS",
    "TOCKY",
    "TOCOS",
    "TODDE",
    "TOEAS",
    "TOFFS",
    "TOFFY",
    "TOFTS",
    "TOFUS",
    "TOGAE",
    "TOGAS",
    "TOGED",
    "TOGES",
    "TOGUE",
    "TOHOS",
    "TOILE",
    "TOILS",
    "TOING",
    "TOISE",
    "TOITS",
    "TOKAY",
    "TOKED",
    "TOKER",
    "TOKES",
    "TOKOS",
    "TOLAN",
    "TOLAR",
    "TOLAS",
    "TOLED",
    "TOLES",
    "TOLLS",
    "TOLLY",
    "TOLTS",
    "TOLUS",
    "TOLYL",
    "TOMAN",
    "TOMBS",
    "TOMES",
    "TOMIA",
    "TOMMY",
    "TOMOS",
    "TONDI",
    "TONDO",
    "TONED",
    "TONER",
    "TONES",
    "TONEY",
    "TONGS",
    "TONKA",
    "TONKS",
    "TONNE",
    "TONUS",
    "TOOLS",
    "TOOMS",
    "TOONS",
    "TOOTS",
    "TOPED",
    "TOPEE",
    "TOPEK",
    "TOPER",
    "TOPES",
    "TOPHE",
    "TOPHI",
    "TOPHS",
    "TOPIS",
    "TOPOI",
    "TOPOS",
    "TOPPY",
    "TOQUE",
    "TORAH",
    "TORAN",
    "TORAS",
    "TORCS",
    "TORES",
    "TORIC",
    "TORII",
    "TOROS",
    "TOROT",
    "TORRS",
    "TORSE",
    "TORSI",
    "TORSK",
    "TORTA",
    "TORTE",
    "TORTS",
    "TOSAS",
    "TOSED",
    "TOSES",
    "TOSHY",
    "TOSSY",
    "TOTED",
    "TOTER",
    "TOTES",
    "TOTTY",
    "TOUKS",
    "TOUNS",
    "TOURS",
    "TOUSE",
    "TOUSY",
    "TOUTS",
    "TOUZE",
    "TOUZY",
    "TOWED",
    "TOWIE",
    "TOWNS",
    "TOWNY",
    "TOWSE",
    "TOWSY",
    "TOWTS",
    "TOWZE",
    "TOWZY",
    "TOYED",
    "TOYER",
    "TOYON",
    "TOYOS",
    "TOZED",
    "TOZES",
    "TOZIE",
    "TRABS",
    "TRADS",
    "TRAGI",
    "TRAIK",
    "TRAMS",
    "TRANK",
    "TRANQ",
    "TRANS",
    "TRANT",
    "TRAPE",
    "TRAPS",
    "TRAPT",
    "TRASS",
    "TRATS",
    "TRATT",
    "TRAVE",
    "TRAYF",
    "TRAYS",
    "TRECK",
    "TREED",
    "TREEN",
    "TREES",
    "TREFA",
    "TREIF",
    "TREKS",
    "TREMA",
    "TREMS",
    "TRESS",
    "TREST",
    "TRETS",
    "TREWS",
    "TREYF",
    "TREYS",
    "TRIAC",
    "TRIDE",
    "TRIER",
    "TRIES",
    "TRIFF",
    "TRIGO",
    "TRIGS",
    "TRIKE",
    "TRILD",
    "TRILL",
    "TRIMS",
    "TRINE",
    "TRINS",
    "TRIOL",
    "TRIOR",
    "TRIOS",
    "TRIPS",
    "TRIPY",
    "TRIST",
    "TROAD",
    "TROAK",
    "TROAT",
    "TROCK",
    "TRODE",
    "TRODS",
    "TROGS",
    "TROIS",
    "TROKE",
    "TROMP",
    "TRONA",
    "TRONC",
    "TRONE",
    "TRONK",
    "TRONS",
    "TROOZ",
    "TROTH",
    "TROTS",
    "TROWS",
    "TROYS",
    "TRUED",
    "TRUES",
    "TRUGO",
    "TRUGS",
    "TRULL",
    "TRYER",
    "TRYKE",
    "TRYMA",
    "TRYPS",
    "TSADE",
    "TSADI",
    "TSARS",
    "TSKED",
    "TSUBA",
    "TSUBO",
    "TUANS",
    "TUART",
    "TUATH",
    "TUBAE",
    "TUBAR",
    "TUBAS",
    "TUBBY",
    "TUBED",
    "TUBES",
    "TUCKS",
    "TUFAS",
    "TUFFE",
    "TUFFS",
    "TUFTS",
    "TUFTY",
    "TUGRA",
    "TUILE",
    "TUINA",
    "TUISM",
    "TUKTU",
    "TULES",
    "TULPA",
    "TULSI",
    "TUMID",
    "TUMMY",
    "TUMPS",
    "TUMPY",
    "TUNAS",
    "TUNDS",
    "TUNED",
    "TUNER",
    "TUNES",
    "TUNGS",
    "TUNNY",
    "TUPEK",
    "TUPIK",
    "TUPLE",
    "TUQUE",
    "TURDS",
    "TURFS",
    "TURFY",
    "TURKS",
    "TURME",
    "TURMS",
    "TURNS",
    "TURNT",
    "TURPS",
    "TURRS",
    "TUSHY",
    "TUSKS",
    "TUSKY",
    "TUTEE",
    "TUTTI",
    "TUTTY",
    "TUTUS",
    "TUXES",
    "TUYER",
    "TWAES",
    "TWAIN",
    "TWALS",
    "TWANK",
    "TWATS",
    "TWAYS",
    "TWEEL",
    "TWEEN",
    "TWEEP",
    "TWEER",
    "TWERK",
    "TWERP",
    "TWIER",
    "TWIGS",
    "TWILL",
    "TWILT",
    "TWINK",
    "TWINS",
    "TWINY",
    "TWIRE",
    "TWIRP",
    "TWITE",
    "TWITS",
    "TWOER",
    "TWYER",
    "TYEES",
    "TYERS",
    "TYIYN",
    "TYKES",
    "TYLER",
    "TYMPS",
    "TYNDE",
    "TYNED",
    "TYNES",
    "TYPAL",
    "TYPED",
    "TYPES",
    "TYPEY",
    "TYPIC",
    "TYPOS",
    "TYPPS",
    "TYPTO",
    "TYRAN",
    "TYRED",
    "TYRES",
    "TYROS",
    "TYTHE",
    "TZARS",
    "UDALS",
    "UDONS",
    "UGALI",
    "UGGED",
    "UHLAN",
    "UHURU",
    "UKASE",
    "ULAMA",
    "ULANS",
    "ULEMA",
    "ULMIN",
    "ULNAD",
    "ULNAE",
    "ULNAR",
    "ULNAS",
    "ULPAN",
    "ULVAS",
    "ULYIE",
    "ULZIE",
    "UMAMI",
    "UMBEL",
    "UMBER",
    "UMBLE",
    "UMBOS",
    "UMBRE",
    "UMIAC",
    "UMIAK",
    "UMIAQ",
    "UMMAH",
    "UMMAS",
    "UMMED",
    "UMPED",
    "UMPHS",
    "UMPIE",
    "UMPTY",
    "UMRAH",
    "UMRAS",
    "UNAIS",
    "UNAPT",
    "UNARM",
    "UNARY",
    "UNAUS",
    "UNBAG",
    "UNBAN",
    "UNBAR",
    "UNBED",
    "UNBID",
    "UNBOX",
    "UNCAP",
    "UNCES",
    "UNCIA",
    "UNCOS",
    "UNCOY",
    "UNCUS",
    "UNDAM",
    "UNDEE",
    "UNDOS",
    "UNDUG",
    "UNETH",
    "UNFIX",
    "UNGAG",
    "UNGET",
    "UNGOD",
    "UNGOT",
    "UNGUM",
    "UNHAT",
    "UNHIP",
    "UNICA",
    "UNITS",
    "UNJAM",
    "UNKED",
    "UNKET",
    "UNKID",
    "UNLAW",
    "UNLAY",
    "UNLED",
    "UNLET",
    "UNLID",
    "UNMAN",
    "UNMEW",
    "UNMIX",
    "UNPAY",
    "UNPEG",
    "UNPEN",
    "UNPIN",
    "UNRED",
    "UNRID",
    "UNRIG",
    "UNRIP",
    "UNSAW",
    "UNSAY",
    "UNSEE",
    "UNSEW",
    "UNSEX",
    "UNSOD",
    "UNTAX",
    "UNTIN",
    "UNWET",
    "UNWIT",
    "UNWON",
    "UPBOW",
    "UPBYE",
    "UPDOS",
    "UPDRY",
    "UPEND",
    "UPJET",
    "UPLAY",
    "UPLED",
    "UPLIT",
    "UPPED",
    "UPRAN",
    "UPRUN",
    "UPSEE",
    "UPSEY",
    "UPTAK",
    "UPTER",
    "UPTIE",
    "URAEI",
    "URALI",
    "URAOS",
    "URARE",
    "URARI",
    "URASE",
    "URATE",
    "URBEX",
    "URBIA",
    "URDEE",
    "UREAL",
    "UREAS",
    "UREDO",
    "UREIC",
    "URENA",
    "URENT",
    "URGED",
    "URGER",
    "URGES",
    "URIAL",
    "URITE",
    "URMAN",
    "URNAL",
    "URNED",
    "URPED",
    "URSAE",
    "URSID",
    "URSON",
    "URUBU",
    "URVAS",
    "USERS",
    "USNEA",
    "USQUE",
    "USURE",
    "USURY",
    "UTERI",
    "UVEAL",
    "UVEAS",
    "UVULA",
    "VACUA",
    "VADED",
    "VADES",
    "VAGAL",
    "VAGUS",
    "VAILS",
    "VAIRE",
    "VAIRS",
    "VAIRY",
    "VAKAS",
    "VAKIL",
    "VALES",
    "VALIS",
    "VALSE",
    "VAMPS",
    "VAMPY",
    "VANDA",
    "VANED",
    "VANES",
    "VANGS",
    "VANTS",
    "VAPED",
    "VAPER",
    "VAPES",
    "VARAN",
    "VARAS",
    "VARDY",
    "VAREC",
    "VARES",
    "VARIA",
    "VARIX",
    "VARNA",
    "VARUS",
    "VARVE",
    "VASAL",
    "VASES",
    "VASTS",
    "VASTY",
    "VATIC",
    "VATUS",
    "VAUCH",
    "VAUTE",
    "VAUTS",
    "VAWTE",
    "VAXES",
    "VEALE",
    "VEALS",
    "VEALY",
    "VEENA",
    "VEEPS",
    "VEERS",
    "VEERY",
    "VEGAS",
    "VEGES",
    "VEGIE",
    "VEGOS",
    "VEHME",
    "VEILS",
    "VEILY",
    "VEINS",
    "VEINY",
    "VELAR",
    "VELDS",
    "VELDT",
    "VELES",
    "VELLS",
    "VELUM",
    "VENAE",
    "VENAL",
    "VENDS",
    "VENDU",
    "VENEY",
    "VENGE",
    "VENIN",
    "VENTS",
    "VENUS",
    "VERBS",
    "VERRA",
    "VERRY",
    "VERST",
    "VERTS",
    "VERTU",
    "VESPA",
    "VESTA",
    "VESTS",
    "VETCH",
    "VEXED",
    "VEXER",
    "VEXES",
    "VEXIL",
    "VEZIR",
    "VIALS",
    "VIAND",
    "VIBES",
    "VIBEX",
    "VIBEY",
    "VICED",
    "VICES",
    "VICHY",
    "VIERS",
    "VIEWS",
    "VIEWY",
    "VIFDA",
    "VIFFS",
    "VIGAS",
    "VIGIA",
    "VILDE",
    "VILER",
    "VILLI",
    "VILLS",
    "VIMEN",
    "VINAL",
    "VINAS",
    "VINCA",
    "VINED",
    "VINER",
    "VINES",
    "VINEW",
    "VINIC",
    "VINOS",
    "VINTS",
    "VIOLD",
    "VIOLS",
    "VIRED",
    "VIREO",
    "VIRES",
    "VIRGA",
    "VIRGE",
    "VIRID",
    "VIRLS",
    "VIRTU",
    "VISAS",
    "VISED",
    "VISES",
    "VISIE",
    "VISNE",
    "VISON",
    "VISTO",
    "VITAE",
    "VITAS",
    "VITEX",
    "VITRO",
    "VITTA",
    "VIVAS",
    "VIVAT",
    "VIVDA",
    "VIVER",
    "VIVES",
    "VIZIR",
    "VIZOR",
    "VLEIS",
    "VLIES",
    "VLOGS",
    "VOARS",
    "VOCAB",
    "VOCES",
    "VODDY",
    "VODOU",
    "VODUN",
    "VOEMA",
    "VOGIE",
    "VOIDS",
    "VOILE",
    "VOIPS",
    "VOLAE",
    "VOLAR",
    "VOLED",
    "VOLES",
    "VOLET",
    "VOLKS",
    "VOLTA",
    "VOLTE",
    "VOLTI",
    "VOLTS",
    "VOLVA",
    "VOLVE",
    "VOMER",
    "VOTED",
    "VOTES",
    "VOUGE",
    "VOULU",
    "VOWED",
    "VOWER",
    "VOXEL",
    "VOZHD",
    "VRAIC",
    "VRILS",
    "VROOM",
    "VROUS",
    "VROUW",
    "VROWS",
    "VUGGS",
    "VUGGY",
    "VUGHS",
    "VUGHY",
    "VULGO",
    "VULNS",
    "VULVA",
    "VUTTY",
    "WAACS",
    "WACKE",
    "WACKO",
    "WACKS",
    "WADDS",
    "WADDY",
    "WADED",
    "WADER",
    "WADES",
    "WADGE",
    "WADIS",
    "WADTS",
    "WAFFS",
    "WAFTS",
    "WAGED",
    "WAGES",
    "WAGGA",
    "WAGYU",
    "WAHOO",
    "WAIDE",
    "WAIFS",
    "WAIFT",
    "WAILS",
    "WAINS",
    "WAIRS",
    "WAITE",
    "WAITS",
    "WAKAS",
    "WAKED",
    "WAKEN",
    "WAKER",
    "WAKES",
    "WAKFS",
    "WALDO",
    "WALDS",
    "WALED",
    "WALER",
    "WALES",
    "WALIE",
    "WALIS",
    "WALKS",
    "WALLA",
    "WALLS",
    "WALLY",
    "WALTY",
    "WAMED",
    "WAMES",
    "WAMUS",
    "WANDS",
    "WANED",
    "WANES",
    "WANEY",
    "WANGS",
    "WANKS",
    "WANKY",
    "WANLE",
    "WANLY",
    "WANNA",
    "WANTS",
    "WANTY",
    "WANZE",
    "WAQFS",
    "WARBS",
    "WARBY",
    "WARDS",
    "WARED",
    "WARES",
    "WAREZ",
    "WARKS",
    "WARMS",
    "WARNS",
    "WARPS",
    "WARRE",
    "WARST",
    "WARTS",
    "WASES",
    "WASHY",
    "WASMS",
    "WASPS",
    "WASPY",
    "WASTS",
    "WATAP",
    "WATTS",
    "WAUFF",
    "WAUGH",
    "WAUKS",
    "WAULK",
    "WAULS",
    "WAURS",
    "WAVED",
    "WAVES",
    "WAVEY",
    "WAWAS",
    "WAWES",
    "WAWLS",
    "WAXED",
    "WAXER",
    "WAXES",
    "WAYED",
    "WAZIR",
    "WAZOO",
    "WEALD",
    "WEALS",
    "WEAMB",
    "WEANS",
    "WEARS",
    "WEBBY",
    "WEBER",
    "WECHT",
    "WEDEL",
    "WEDGY",
    "WEEDS",
    "WEEKE",
    "WEEKS",
    "WEELS",
    "WEEMS",
    "WEENS",
    "WEENY",
    "WEEPS",
    "WEEPY",
    "WEEST",
    "WEETE",
    "WEETS",
    "WEFTE",
    "WEFTS",
    "WEIDS",
    "WEILS",
    "WEIRS",
    "WEISE",
    "WEIZE",
    "WEKAS",
    "WELDS",
    "WELKE",
    "WELKS",
    "WELKT",
    "WELLS",
    "WELLY",
    "WELTS",
    "WEMBS",
    "WENDS",
    "WENGE",
    "WENNY",
    "WENTS",
    "WEROS",
    "WERSH",
    "WESTS",
    "WETAS",
    "WETLY",
    "WEXED",
    "WEXES",
    "WHAMO",
    "WHAMS",
    "WHANG",
    "WHAPS",
    "WHARE",
    "WHATA",
    "WHATS",
    "WHAUP",
    "WHAUR",
    "WHEAL",
    "WHEAR",
    "WHEEN",
    "WHEEP",
    "WHEFT",
    "WHELK",
    "WHELM",
    "WHENS",
    "WHETS",
    "WHEWS",
    "WHEYS",
    "WHIDS",
    "WHIFT",
    "WHIGS",
    "WHILK",
    "WHIMS",
    "WHINS",
    "WHIOS",
    "WHIPS",
    "WHIPT",
    "WHIRR",
    "WHIRS",
    "WHISH",
    "WHISS",
    "WHIST",
    "WHITS",
    "WHITY",
    "WHIZZ",
    "WHOMP",
    "WHOOF",
    "WHOOT",
    "WHOPS",
    "WHORL",
    "WHORT",
    "WHOSO",
    "WHOWS",
    "WHUMP",
    "WHUPS",
    "WHYDA",
    "WICCA",
    "WICKS",
    "WICKY",
    "WIDDY",
    "WIDES",
    "WIELS",
    "WIFED",
    "WIFES",
    "WIFEY",
    "WIFIE",
    "WIFTY",
    "WIGAN",
    "WIGGA",
    "WIGGY",
    "WIKIS",
    "WILCO",
    "WILDS",
    "WILED",
    "WILES",
    "WILGA",
    "WILIS",
    "WILJA",
    "WILLS",
    "WILTS",
    "WIMPS",
    "WINDS",
    "WINED",
    "WINES",
    "WINEY",
    "WINGE",
    "WINGS",
    "WINGY",
    "WINKS",
    "WINNA",
    "WINNS",
    "WINOS",
    "WINZE",
    "WIPED",
    "WIPER",
    "WIPES",
    "WIRED",
    "WIRER",
    "WIRES",
    "WIRRA",
    "WISED",
    "WISES",
    "WISHA",
    "WISHT",
    "WISPS",
    "WISTS",
    "WITAN",
    "WITED",
    "WITES",
    "WITHE",
    "WITHS",
    "WITHY",
    "WIVED",
    "WIVER",
    "WIVES",
    "WIZEN",
    "WIZES",
    "WOADS",
    "WOALD",
    "WOCKS",
    "WODGE",
    "WOFUL",
    "WOJUS",
    "WOKER",
    "WOKKA",
    "WOLDS",
    "WOLFS",
    "WOLLY",
    "WOLVE",
    "WOMBS",
    "WOMBY",
    "WOMYN",
    "WONGA",
    "WONGI",
    "WONKS",
    "WONKY",
    "WONTS",
    "WOODS",
    "WOOED",
    "WOOFS",
    "WOOFY",
    "WOOLD",
    "WOOLS",
    "WOONS",
    "WOOPS",
    "WOOPY",
    "WOOSE",
    "WOOSH",
    "WOOTZ",
    "WORDS",
    "WORKS",
    "WORMS",
    "WORMY",
    "WORTS",
    "WOWED",
    "WOWEE",
    "WOXEN",
    "WRANG",
    "WRAPS",
    "WRAPT",
    "WRAST",
    "WRATE",
    "WRAWL",
    "WRENS",
    "WRICK",
    "WRIED",
    "WRIER",
    "WRIES",
    "WRITS",
    "WROKE",
    "WROOT",
    "WROTH",
    "WRYER",
    "WUDDY",
    "WUDUS",
    "WULLS",
    "WURST",
    "WUSES",
    "WUSHU",
    "WUSSY",
    "WUXIA",
    "WYLED",
    "WYLES",
    "WYNDS",
    "WYNNS",
    "WYTED",
    "WYTES",
    "XEBEC",
    "XENIA",
    "XENIC",
    "XENON",
    "XERIC",
    "XEROX",
    "XERUS",
    "XOANA",
    "XRAYS",
    "XYLAN",
    "XYLEM",
    "XYLIC",
    "XYLOL",
    "XYLYL",
    "XYSTI",
    "XYSTS",
    "YAARS",
    "YABAS",
    "YABBA",
    "YABBY",
    "YACCA",
    "YACKA",
    "YACKS",
    "YAFFS",
    "YAGER",
    "YAGES",
    "YAGIS",
    "YAHOO",
    "YAIRD",
    "YAKKA",
    "YAKOW",
    "YALES",
    "YAMEN",
    "YAMPY",
    "YAMUN",
    "YANGS",
    "YANKS",
    "YAPOK",
    "YAPON",
    "YAPPS",
    "YAPPY",
    "YARAK",
    "YARCO",
    "YARDS",
    "YARER",
    "YARFA",
    "YARKS",
    "YARNS",
    "YARRS",
    "YARTA",
    "YARTO",
    "YATES",
    "YAUDS",
    "YAULD",
    "YAUPS",
    "YAWED",
    "YAWEY",
    "YAWLS",
    "YAWNS",
    "YAWNY",
    "YAWPS",
    "YBORE",
    "YCLAD",
    "YCLED",
    "YCOND",
    "YDRAD",
    "YDRED",
    "YEADS",
    "YEAHS",
    "YEALM",
    "YEANS",
    "YEARD",
    "YEARS",
    "YECCH",
    "YECHS",
    "YECHY",
    "YEDES",
    "YEEDS",
    "YEESH",
    "YEGGS",
    "YELKS",
    "YELLS",
    "YELMS",
    "YELPS",
    "YELTS",
    "YENTA",
    "YENTE",
    "YERBA",
    "YERDS",
    "YERKS",
    "YESES",
    "YESKS",
    "YESTS",
    "YESTY",
    "YETIS",
    "YETTS",
    "YEUKS",
    "YEUKY",
    "YEVEN",
    "YEVES",
    "YEWEN",
    "YEXED",
    "YEXES",
    "YFERE",
    "YIKED",
    "YIKES",
    "YILLS",
    "YINCE",
    "YIPES",
    "YIPPY",
    "YIRDS",
    "YIRKS",
    "YIRRS",
    "YIRTH",
    "YITES",
    "YITIE",
    "YLEMS",
    "YLIKE",
    "YLKES",
    "YMOLT",
    "YMPES",
    "YOBBO",
    "YOBBY",
    "YOCKS",
    "YODEL",
    "YODHS",
    "YODLE",
    "YOGAS",
    "YOGEE",
    "YOGHS",
    "YOGIC",
    "YOGIN",
    "YOGIS",
    "YOICK",
    "YOJAN",
    "YOKED",
    "YOKEL",
    "YOKER",
    "YOKES",
    "YOKUL",
    "YOLKS",
    "YOLKY",
    "YOMIM",
    "YOMPS",
    "YONIC",
    "YONIS",
    "YONKS",
    "YOOFS",
    "YOOPS",
    "YORES",
    "YORKS",
    "YORPS",
    "YOUKS",
    "YOURN",
    "YOURS",
    "YOURT",
    "YOUSE",
    "YOWED",
    "YOWES",
    "YOWIE",
    "YOWLS",
    "YOWZA",
    "YRAPT",
    "YRENT",
    "YRIVD",
    "YRNEH",
    "YSAME",
    "YTOST",
    "YUANS",
    "YUCAS",
    "YUCCA",
    "YUCCH",
    "YUCKO",
    "YUCKS",
    "YUCKY",
    "YUFTS",
    "YUGAS",
    "YUKED",
    "YUKES",
    "YUKKY",
    "YUKOS",
    "YULAN",
    "YULES",
    "YUMMO",
    "YUMMY",
    "YUMPS",
    "YUPON",
    "YUPPY",
    "YURTA",
    "YURTS",
    "YUZUS",
    "ZABRA",
    "ZACKS",
    "ZAIDA",
    "ZAIDY",
    "ZAIRE",
    "ZAKAT",
    "ZAMAN",
    "ZAMBO",
    "ZAMIA",
    "ZANJA",
    "ZANTE",
    "ZANZA",
    "ZANZE",
    "ZAPPY",
    "ZARFS",
    "ZARIS",
    "ZATIS",
    "ZAXES",
    "ZAYIN",
    "ZAZEN",
    "ZEALS",
    "ZEBEC",
    "ZEBUB",
    "ZEBUS",
    "ZEDAS",
    "ZEINS",
    "ZENDO",
    "ZERDA",
    "ZERKS",
    "ZEROS",
    "ZESTS",
    "ZETAS",
    "ZEXES",
    "ZEZES",
    "ZHOMO",
    "ZIBET",
    "ZIFFS",
    "ZIGAN",
    "ZILAS",
    "ZILCH",
    "ZILLA",
    "ZILLS",
    "ZIMBI",
    "ZIMBS",
    "ZINCO",
    "ZINCS",
    "ZINCY",
    "ZINEB",
    "ZINES",
    "ZINGS",
    "ZINGY",
    "ZINKE",
    "ZINKY",
    "ZIPPO",
    "ZIPPY",
    "ZIRAM",
    "ZITIS",
    "ZIZEL",
    "ZIZIT",
    "ZLOTE",
    "ZLOTY",
    "ZOAEA",
    "ZOBOS",
    "ZOBUS",
    "ZOCCO",
    "ZOEAE",
    "ZOEAL",
    "ZOEAS",
    "ZOISM",
    "ZOIST",
    "ZOMBI",
    "ZONAE",
    "ZONDA",
    "ZONED",
    "ZONER",
    "ZONES",
    "ZONKS",
    "ZOOEA",
    "ZOOEY",
    "ZOOID",
    "ZOOKS",
    "ZOOMS",
    "ZOONS",
    "ZOOTY",
    "ZOPPA",
    "ZOPPO",
    "ZORIL",
    "ZORIS",
    "ZORRO",
    "ZOUKS",
    "ZOWEE",
    "ZOWIE",
    "ZULUS",
    "ZUPAN",
    "ZUPAS",
    "ZUPPA",
    "ZURFS",
    "ZUZIM",
    "ZYGAL",
    "ZYGON",
    "ZYMES",
    "ZYMIC"
  ];
  var validguesses_default = VALID_GUESSES;

  // src/wordle/targetwords.js
  var TARGET_WORDS = [
    "CIGAR",
    "REBUT",
    "SISSY",
    "HUMPH",
    "AWAKE",
    "BLUSH",
    "FOCAL",
    "EVADE",
    "NAVAL",
    "SERVE",
    "HEATH",
    "DWARF",
    "MODEL",
    "KARMA",
    "STINK",
    "GRADE",
    "QUIET",
    "BENCH",
    "ABATE",
    "FEIGN",
    "MAJOR",
    "DEATH",
    "FRESH",
    "CRUST",
    "STOOL",
    "COLON",
    "ABASE",
    "MARRY",
    "REACT",
    "BATTY",
    "PRIDE",
    "FLOSS",
    "HELIX",
    "CROAK",
    "STAFF",
    "PAPER",
    "UNFED",
    "WHELP",
    "TRAWL",
    "OUTDO",
    "ADOBE",
    "CRAZY",
    "SOWER",
    "REPAY",
    "DIGIT",
    "CRATE",
    "CLUCK",
    "SPIKE",
    "MIMIC",
    "POUND",
    "MAXIM",
    "LINEN",
    "UNMET",
    "FLESH",
    "BOOBY",
    "FORTH",
    "FIRST",
    "STAND",
    "BELLY",
    "IVORY",
    "SEEDY",
    "PRINT",
    "YEARN",
    "DRAIN",
    "BRIBE",
    "STOUT",
    "PANEL",
    "CRASS",
    "FLUME",
    "OFFAL",
    "AGREE",
    "ERROR",
    "SWIRL",
    "ARGUE",
    "BLEED",
    "DELTA",
    "FLICK",
    "TOTEM",
    "WOOER",
    "FRONT",
    "SHRUB",
    "PARRY",
    "BIOME",
    "LAPEL",
    "START",
    "GREET",
    "GONER",
    "GOLEM",
    "LUSTY",
    "LOOPY",
    "ROUND",
    "AUDIT",
    "LYING",
    "GAMMA",
    "LABOR",
    "ISLET",
    "CIVIC",
    "FORGE",
    "CORNY",
    "MOULT",
    "BASIC",
    "SALAD",
    "AGATE",
    "SPICY",
    "SPRAY",
    "ESSAY",
    "FJORD",
    "SPEND",
    "KEBAB",
    "GUILD",
    "ABACK",
    "MOTOR",
    "ALONE",
    "HATCH",
    "HYPER",
    "THUMB",
    "DOWRY",
    "OUGHT",
    "BELCH",
    "DUTCH",
    "PILOT",
    "TWEED",
    "COMET",
    "JAUNT",
    "ENEMA",
    "STEED",
    "ABYSS",
    "GROWL",
    "FLING",
    "DOZEN",
    "BOOZY",
    "ERODE",
    "WORLD",
    "GOUGE",
    "CLICK",
    "BRIAR",
    "GREAT",
    "ALTAR",
    "PULPY",
    "BLURT",
    "COAST",
    "DUCHY",
    "GROIN",
    "FIXER",
    "GROUP",
    "ROGUE",
    "BADLY",
    "SMART",
    "PITHY",
    "GAUDY",
    "CHILL",
    "HERON",
    "VODKA",
    "FINER",
    "SURER",
    "RADIO",
    "ROUGE",
    "PERCH",
    "RETCH",
    "WROTE",
    "CLOCK",
    "TILDE",
    "STORE",
    "PROVE",
    "BRING",
    "SOLVE",
    "CHEAT",
    "GRIME",
    "EXULT",
    "USHER",
    "EPOCH",
    "TRIAD",
    "BREAK",
    "RHINO",
    "VIRAL",
    "CONIC",
    "MASSE",
    "SONIC",
    "VITAL",
    "TRACE",
    "USING",
    "PEACH",
    "CHAMP",
    "BATON",
    "BRAKE",
    "PLUCK",
    "CRAZE",
    "GRIPE",
    "WEARY",
    "PICKY",
    "ACUTE",
    "FERRY",
    "ASIDE",
    "TAPIR",
    "TROLL",
    "UNIFY",
    "REBUS",
    "BOOST",
    "TRUSS",
    "SIEGE",
    "TIGER",
    "BANAL",
    "SLUMP",
    "CRANK",
    "GORGE",
    "QUERY",
    "DRINK",
    "FAVOR",
    "ABBEY",
    "TANGY",
    "PANIC",
    "SOLAR",
    "SHIRE",
    "PROXY",
    "POINT",
    "ROBOT",
    "PRICK",
    "WINCE",
    "CRIMP",
    "KNOLL",
    "SUGAR",
    "WHACK",
    "MOUNT",
    "PERKY",
    "COULD",
    "WRUNG",
    "LIGHT",
    "THOSE",
    "MOIST",
    "SHARD",
    "PLEAT",
    "ALOFT",
    "SKILL",
    "ELDER",
    "FRAME",
    "HUMOR",
    "PAUSE",
    "ULCER",
    "ULTRA",
    "ROBIN",
    "CYNIC",
    "AGORA",
    "AROMA",
    "CAULK",
    "SHAKE",
    "PUPAL",
    "DODGE",
    "SWILL",
    "TACIT",
    "OTHER",
    "THORN",
    "TROVE",
    "BLOKE",
    "VIVID",
    "SPILL",
    "CHANT",
    "CHOKE",
    "RUPEE",
    "NASTY",
    "MOURN",
    "AHEAD",
    "BRINE",
    "CLOTH",
    "HOARD",
    "SWEET",
    "MONTH",
    "LAPSE",
    "WATCH",
    "TODAY",
    "FOCUS",
    "SMELT",
    "TEASE",
    "CATER",
    "MOVIE",
    "LYNCH",
    "SAUTE",
    "ALLOW",
    "RENEW",
    "THEIR",
    "SLOSH",
    "PURGE",
    "CHEST",
    "DEPOT",
    "EPOXY",
    "NYMPH",
    "FOUND",
    "SHALL",
    "HARRY",
    "STOVE",
    "LOWLY",
    "SNOUT",
    "TROPE",
    "FEWER",
    "SHAWL",
    "NATAL",
    "FIBRE",
    "COMMA",
    "FORAY",
    "SCARE",
    "STAIR",
    "BLACK",
    "SQUAD",
    "ROYAL",
    "CHUNK",
    "MINCE",
    "SLAVE",
    "SHAME",
    "CHEEK",
    "AMPLE",
    "FLAIR",
    "FOYER",
    "CARGO",
    "OXIDE",
    "PLANT",
    "OLIVE",
    "INERT",
    "ASKEW",
    "HEIST",
    "SHOWN",
    "ZESTY",
    "HASTY",
    "TRASH",
    "FELLA",
    "LARVA",
    "FORGO",
    "STORY",
    "HAIRY",
    "TRAIN",
    "HOMER",
    "BADGE",
    "MIDST",
    "CANNY",
    "FETUS",
    "BUTCH",
    "FARCE",
    "SLUNG",
    "TIPSY",
    "METAL",
    "YIELD",
    "DELVE",
    "BEING",
    "SCOUR",
    "GLASS",
    "GAMER",
    "SCRAP",
    "MONEY",
    "HINGE",
    "ALBUM",
    "VOUCH",
    "ASSET",
    "TIARA",
    "CREPT",
    "BAYOU",
    "ATOLL",
    "MANOR",
    "CREAK",
    "SHOWY",
    "PHASE",
    "FROTH",
    "DEPTH",
    "GLOOM",
    "FLOOD",
    "TRAIT",
    "GIRTH",
    "PIETY",
    "PAYER",
    "GOOSE",
    "FLOAT",
    "DONOR",
    "ATONE",
    "PRIMO",
    "APRON",
    "BLOWN",
    "CACAO",
    "LOSER",
    "INPUT",
    "GLOAT",
    "AWFUL",
    "BRINK",
    "SMITE",
    "BEADY",
    "RUSTY",
    "RETRO",
    "DROLL",
    "GAWKY",
    "HUTCH",
    "PINTO",
    "GAILY",
    "EGRET",
    "LILAC",
    "SEVER",
    "FIELD",
    "FLUFF",
    "HYDRO",
    "FLACK",
    "AGAPE",
    "WENCH",
    "VOICE",
    "STEAD",
    "STALK",
    "BERTH",
    "MADAM",
    "NIGHT",
    "BLAND",
    "LIVER",
    "WEDGE",
    "AUGUR",
    "ROOMY",
    "WACKY",
    "FLOCK",
    "ANGRY",
    "BOBBY",
    "TRITE",
    "APHID",
    "TRYST",
    "MIDGE",
    "POWER",
    "ELOPE",
    "CINCH",
    "MOTTO",
    "STOMP",
    "UPSET",
    "BLUFF",
    "CRAMP",
    "QUART",
    "COYLY",
    "YOUTH",
    "RHYME",
    "BUGGY",
    "ALIEN",
    "SMEAR",
    "UNFIT",
    "PATTY",
    "CLING",
    "GLEAN",
    "LABEL",
    "HUNKY",
    "KHAKI",
    "POKER",
    "GRUEL",
    "TWICE",
    "TWANG",
    "SHRUG",
    "TREAT",
    "UNLIT",
    "WASTE",
    "MERIT",
    "WOVEN",
    "OCTAL",
    "NEEDY",
    "CLOWN",
    "WIDOW",
    "IRONY",
    "RUDER",
    "GAUZE",
    "CHIEF",
    "ONSET",
    "PRIZE",
    "FUNGI",
    "CHARM",
    "GULLY",
    "INTER",
    "WHOOP",
    "TAUNT",
    "LEERY",
    "CLASS",
    "THEME",
    "LOFTY",
    "TIBIA",
    "BOOZE",
    "ALPHA",
    "THYME",
    "ECLAT",
    "DOUBT",
    "PARER",
    "CHUTE",
    "STICK",
    "TRICE",
    "ALIKE",
    "SOOTH",
    "RECAP",
    "SAINT",
    "LIEGE",
    "GLORY",
    "GRATE",
    "ADMIT",
    "BRISK",
    "SOGGY",
    "USURP",
    "SCALD",
    "SCORN",
    "LEAVE",
    "TWINE",
    "STING",
    "BOUGH",
    "MARSH",
    "SLOTH",
    "DANDY",
    "VIGOR",
    "HOWDY",
    "ENJOY",
    "VALID",
    "IONIC",
    "EQUAL",
    "UNSET",
    "FLOOR",
    "CATCH",
    "SPADE",
    "STEIN",
    "EXIST",
    "QUIRK",
    "DENIM",
    "GROVE",
    "SPIEL",
    "MUMMY",
    "FAULT",
    "FOGGY",
    "FLOUT",
    "CARRY",
    "SNEAK",
    "LIBEL",
    "WALTZ",
    "APTLY",
    "PINEY",
    "INEPT",
    "ALOUD",
    "PHOTO",
    "DREAM",
    "STALE",
    "VOMIT",
    "OMBRE",
    "FANNY",
    "UNITE",
    "SNARL",
    "BAKER",
    "THERE",
    "GLYPH",
    "POOCH",
    "HIPPY",
    "SPELL",
    "FOLLY",
    "LOUSE",
    "GULCH",
    "VAULT",
    "GODLY",
    "THREW",
    "FLEET",
    "GRAVE",
    "INANE",
    "SHOCK",
    "CRAVE",
    "SPITE",
    "VALVE",
    "SKIMP",
    "CLAIM",
    "RAINY",
    "MUSTY",
    "PIQUE",
    "DADDY",
    "QUASI",
    "ARISE",
    "AGING",
    "VALET",
    "OPIUM",
    "AVERT",
    "STUCK",
    "RECUT",
    "MULCH",
    "GENRE",
    "PLUME",
    "RIFLE",
    "COUNT",
    "INCUR",
    "TOTAL",
    "WREST",
    "MOCHA",
    "DETER",
    "STUDY",
    "LOVER",
    "SAFER",
    "RIVET",
    "FUNNY",
    "SMOKE",
    "MOUND",
    "UNDUE",
    "SEDAN",
    "PAGAN",
    "SWINE",
    "GUILE",
    "GUSTY",
    "EQUIP",
    "TOUGH",
    "CANOE",
    "CHAOS",
    "COVET",
    "HUMAN",
    "UDDER",
    "LUNCH",
    "BLAST",
    "STRAY",
    "MANGA",
    "MELEE",
    "LEFTY",
    "QUICK",
    "PASTE",
    "GIVEN",
    "OCTET",
    "RISEN",
    "GROAN",
    "LEAKY",
    "GRIND",
    "CARVE",
    "LOOSE",
    "SADLY",
    "SPILT",
    "APPLE",
    "SLACK",
    "HONEY",
    "FINAL",
    "SHEEN",
    "EERIE",
    "MINTY",
    "SLICK",
    "DERBY",
    "WHARF",
    "SPELT",
    "COACH",
    "ERUPT",
    "SINGE",
    "PRICE",
    "SPAWN",
    "FAIRY",
    "JIFFY",
    "FILMY",
    "STACK",
    "CHOSE",
    "SLEEP",
    "ARDOR",
    "NANNY",
    "NIECE",
    "WOOZY",
    "HANDY",
    "GRACE",
    "DITTO",
    "STANK",
    "CREAM",
    "USUAL",
    "DIODE",
    "VALOR",
    "ANGLE",
    "NINJA",
    "MUDDY",
    "CHASE",
    "REPLY",
    "PRONE",
    "SPOIL",
    "HEART",
    "SHADE",
    "DINER",
    "ARSON",
    "ONION",
    "SLEET",
    "DOWEL",
    "COUCH",
    "PALSY",
    "BOWEL",
    "SMILE",
    "EVOKE",
    "CREEK",
    "LANCE",
    "EAGLE",
    "IDIOT",
    "SIREN",
    "BUILT",
    "EMBED",
    "AWARD",
    "DROSS",
    "ANNUL",
    "GOODY",
    "FROWN",
    "PATIO",
    "LADEN",
    "HUMID",
    "ELITE",
    "LYMPH",
    "EDIFY",
    "MIGHT",
    "RESET",
    "VISIT",
    "GUSTO",
    "PURSE",
    "VAPOR",
    "CROCK",
    "WRITE",
    "SUNNY",
    "LOATH",
    "CHAFF",
    "SLIDE",
    "QUEER",
    "VENOM",
    "STAMP",
    "SORRY",
    "STILL",
    "ACORN",
    "APING",
    "PUSHY",
    "TAMER",
    "HATER",
    "MANIA",
    "AWOKE",
    "BRAWN",
    "SWIFT",
    "EXILE",
    "BIRCH",
    "LUCKY",
    "FREER",
    "RISKY",
    "GHOST",
    "PLIER",
    "LUNAR",
    "WINCH",
    "SNARE",
    "NURSE",
    "HOUSE",
    "BORAX",
    "NICER",
    "LURCH",
    "EXALT",
    "ABOUT",
    "SAVVY",
    "TOXIN",
    "TUNIC",
    "PRIED",
    "INLAY",
    "CHUMP",
    "LANKY",
    "CRESS",
    "EATER",
    "ELUDE",
    "CYCLE",
    "KITTY",
    "BOULE",
    "MORON",
    "TENET",
    "PLACE",
    "LOBBY",
    "PLUSH",
    "VIGIL",
    "INDEX",
    "BLINK",
    "CLUNG",
    "QUALM",
    "CROUP",
    "CLINK",
    "JUICY",
    "STAGE",
    "DECAY",
    "NERVE",
    "FLIER",
    "SHAFT",
    "CROOK",
    "CLEAN",
    "CHINA",
    "RIDGE",
    "VOWEL",
    "GNOME",
    "SNUCK",
    "ICING",
    "SPINY",
    "RIGOR",
    "SNAIL",
    "FLOWN",
    "RABID",
    "PROSE",
    "THANK",
    "POPPY",
    "BUDGE",
    "FIBER",
    "MOLDY",
    "DOWDY",
    "KNEEL",
    "TRACK",
    "CADDY",
    "QUELL",
    "DUMPY",
    "PALER",
    "SWORE",
    "REBAR",
    "SCUBA",
    "SPLAT",
    "FLYER",
    "HORNY",
    "MASON",
    "DOING",
    "OZONE",
    "AMPLY",
    "MOLAR",
    "OVARY",
    "BESET",
    "QUEUE",
    "CLIFF",
    "MAGIC",
    "TRUCE",
    "SPORT",
    "FRITZ",
    "EDICT",
    "TWIRL",
    "VERSE",
    "LLAMA",
    "EATEN",
    "RANGE",
    "WHISK",
    "HOVEL",
    "REHAB",
    "MACAW",
    "SIGMA",
    "SPOUT",
    "VERVE",
    "SUSHI",
    "DYING",
    "FETID",
    "BRAIN",
    "BUDDY",
    "THUMP",
    "SCION",
    "CANDY",
    "CHORD",
    "BASIN",
    "MARCH",
    "CROWD",
    "ARBOR",
    "GAYLY",
    "MUSKY",
    "STAIN",
    "DALLY",
    "BLESS",
    "BRAVO",
    "STUNG",
    "TITLE",
    "RULER",
    "KIOSK",
    "BLOND",
    "ENNUI",
    "LAYER",
    "FLUID",
    "TATTY",
    "SCORE",
    "CUTIE",
    "ZEBRA",
    "BARGE",
    "MATEY",
    "BLUER",
    "AIDER",
    "SHOOK",
    "RIVER",
    "PRIVY",
    "BETEL",
    "FRISK",
    "BONGO",
    "BEGUN",
    "AZURE",
    "WEAVE",
    "GENIE",
    "SOUND",
    "GLOVE",
    "BRAID",
    "SCOPE",
    "WRYLY",
    "ROVER",
    "ASSAY",
    "OCEAN",
    "BLOOM",
    "IRATE",
    "LATER",
    "WOKEN",
    "SILKY",
    "WRECK",
    "DWELT",
    "SLATE",
    "SMACK",
    "SOLID",
    "AMAZE",
    "HAZEL",
    "WRIST",
    "JOLLY",
    "GLOBE",
    "FLINT",
    "ROUSE",
    "CIVIL",
    "VISTA",
    "RELAX",
    "COVER",
    "ALIVE",
    "BEECH",
    "JETTY",
    "BLISS",
    "VOCAL",
    "OFTEN",
    "DOLLY",
    "EIGHT",
    "JOKER",
    "SINCE",
    "EVENT",
    "ENSUE",
    "SHUNT",
    "DIVER",
    "POSER",
    "WORST",
    "SWEEP",
    "ALLEY",
    "CREED",
    "ANIME",
    "LEAFY",
    "BOSOM",
    "DUNCE",
    "STARE",
    "PUDGY",
    "WAIVE",
    "CHOIR",
    "STOOD",
    "SPOKE",
    "OUTGO",
    "DELAY",
    "BILGE",
    "IDEAL",
    "CLASP",
    "SEIZE",
    "HOTLY",
    "LAUGH",
    "SIEVE",
    "BLOCK",
    "MEANT",
    "GRAPE",
    "NOOSE",
    "HARDY",
    "SHIED",
    "DRAWL",
    "DAISY",
    "PUTTY",
    "STRUT",
    "BURNT",
    "TULIP",
    "CRICK",
    "IDYLL",
    "VIXEN",
    "FUROR",
    "GEEKY",
    "COUGH",
    "NAIVE",
    "SHOAL",
    "STORK",
    "BATHE",
    "AUNTY",
    "CHECK",
    "PRIME",
    "BRASS",
    "OUTER",
    "FURRY",
    "RAZOR",
    "ELECT",
    "EVICT",
    "IMPLY",
    "DEMUR",
    "QUOTA",
    "HAVEN",
    "CAVIL",
    "SWEAR",
    "CRUMP",
    "DOUGH",
    "GAVEL",
    "WAGON",
    "SALON",
    "NUDGE",
    "HAREM",
    "PITCH",
    "SWORN",
    "PUPIL",
    "EXCEL",
    "STONY",
    "CABIN",
    "UNZIP",
    "QUEEN",
    "TROUT",
    "POLYP",
    "EARTH",
    "STORM",
    "UNTIL",
    "TAPER",
    "ENTER",
    "CHILD",
    "ADOPT",
    "MINOR",
    "FATTY",
    "HUSKY",
    "BRAVE",
    "FILET",
    "SLIME",
    "GLINT",
    "TREAD",
    "STEAL",
    "REGAL",
    "GUEST",
    "EVERY",
    "MURKY",
    "SHARE",
    "SPORE",
    "HOIST",
    "BUXOM",
    "INNER",
    "OTTER",
    "DIMLY",
    "LEVEL",
    "SUMAC",
    "DONUT",
    "STILT",
    "ARENA",
    "SHEET",
    "SCRUB",
    "FANCY",
    "SLIMY",
    "PEARL",
    "SILLY",
    "PORCH",
    "DINGO",
    "SEPIA",
    "AMBLE",
    "SHADY",
    "BREAD",
    "FRIAR",
    "REIGN",
    "DAIRY",
    "QUILL",
    "CROSS",
    "BROOD",
    "TUBER",
    "SHEAR",
    "POSIT",
    "BLANK",
    "VILLA",
    "SHANK",
    "PIGGY",
    "FREAK",
    "WHICH",
    "AMONG",
    "FECAL",
    "SHELL",
    "WOULD",
    "ALGAE",
    "LARGE",
    "RABBI",
    "AGONY",
    "AMUSE",
    "BUSHY",
    "COPSE",
    "SWOON",
    "KNIFE",
    "POUCH",
    "ASCOT",
    "PLANE",
    "CROWN",
    "URBAN",
    "SNIDE",
    "RELAY",
    "ABIDE",
    "VIOLA",
    "RAJAH",
    "STRAW",
    "DILLY",
    "CRASH",
    "AMASS",
    "THIRD",
    "TRICK",
    "TUTOR",
    "WOODY",
    "BLURB",
    "GRIEF",
    "DISCO",
    "WHERE",
    "SASSY",
    "BEACH",
    "SAUNA",
    "COMIC",
    "CLUED",
    "CREEP",
    "CASTE",
    "GRAZE",
    "SNUFF",
    "FROCK",
    "GONAD",
    "DRUNK",
    "PRONG",
    "LURID",
    "STEEL",
    "HALVE",
    "BUYER",
    "VINYL",
    "UTILE",
    "SMELL",
    "ADAGE",
    "WORRY",
    "TASTY",
    "LOCAL",
    "TRADE",
    "FINCH",
    "ASHEN",
    "MODAL",
    "GAUNT",
    "CLOVE",
    "ENACT",
    "ADORN",
    "ROAST",
    "SPECK",
    "SHEIK",
    "MISSY",
    "GRUNT",
    "SNOOP",
    "PARTY",
    "TOUCH",
    "MAFIA",
    "EMCEE",
    "ARRAY",
    "SOUTH",
    "VAPID",
    "JELLY",
    "SKULK",
    "ANGST",
    "TUBAL",
    "LOWER",
    "CREST",
    "SWEAT",
    "CYBER",
    "ADORE",
    "TARDY",
    "SWAMI",
    "NOTCH",
    "GROOM",
    "ROACH",
    "HITCH",
    "YOUNG",
    "ALIGN",
    "READY",
    "FROND",
    "STRAP",
    "PUREE",
    "REALM",
    "VENUE",
    "SWARM",
    "OFFER",
    "SEVEN",
    "DRYER",
    "DIARY",
    "DRYLY",
    "DRANK",
    "ACRID",
    "HEADY",
    "THETA",
    "JUNTO",
    "PIXIE",
    "QUOTH",
    "BONUS",
    "SHALT",
    "PENNE",
    "AMEND",
    "DATUM",
    "BUILD",
    "PIANO",
    "SHELF",
    "LODGE",
    "SUING",
    "REARM",
    "CORAL",
    "RAMEN",
    "WORTH",
    "PSALM",
    "INFER",
    "OVERT",
    "MAYOR",
    "OVOID",
    "GLIDE",
    "USAGE",
    "POISE",
    "RANDY",
    "CHUCK",
    "PRANK",
    "FISHY",
    "TOOTH",
    "ETHER",
    "DROVE",
    "IDLER",
    "SWATH",
    "STINT",
    "WHILE",
    "BEGAT",
    "APPLY",
    "SLANG",
    "TAROT",
    "RADAR",
    "CREDO",
    "AWARE",
    "CANON",
    "SHIFT",
    "TIMER",
    "BYLAW",
    "SERUM",
    "THREE",
    "STEAK",
    "ILIAC",
    "SHIRK",
    "BLUNT",
    "PUPPY",
    "PENAL",
    "JOIST",
    "BUNNY",
    "SHAPE",
    "BEGET",
    "WHEEL",
    "ADEPT",
    "STUNT",
    "STOLE",
    "TOPAZ",
    "CHORE",
    "FLUKE",
    "AFOOT",
    "BLOAT",
    "BULLY",
    "DENSE",
    "CAPER",
    "SNEER",
    "BOXER",
    "JUMBO",
    "LUNGE",
    "SPACE",
    "AVAIL",
    "SHORT",
    "SLURP",
    "LOYAL",
    "FLIRT",
    "PIZZA",
    "CONCH",
    "TEMPO",
    "DROOP",
    "PLATE",
    "BIBLE",
    "PLUNK",
    "AFOUL",
    "SAVOY",
    "STEEP",
    "AGILE",
    "STAKE",
    "DWELL",
    "KNAVE",
    "BEARD",
    "AROSE",
    "MOTIF",
    "SMASH",
    "BROIL",
    "GLARE",
    "SHOVE",
    "BAGGY",
    "MAMMY",
    "SWAMP",
    "ALONG",
    "RUGBY",
    "WAGER",
    "QUACK",
    "SQUAT",
    "SNAKY",
    "DEBIT",
    "MANGE",
    "SKATE",
    "NINTH",
    "JOUST",
    "TRAMP",
    "SPURN",
    "MEDAL",
    "MICRO",
    "REBEL",
    "FLANK",
    "LEARN",
    "NADIR",
    "MAPLE",
    "COMFY",
    "REMIT",
    "GRUFF",
    "ESTER",
    "LEAST",
    "MOGUL",
    "FETCH",
    "CAUSE",
    "OAKEN",
    "AGLOW",
    "MEATY",
    "GAFFE",
    "SHYLY",
    "RACER",
    "PROWL",
    "THIEF",
    "STERN",
    "POESY",
    "ROCKY",
    "TWEET",
    "WAIST",
    "SPIRE",
    "GROPE",
    "HAVOC",
    "PATSY",
    "TRULY",
    "FORTY",
    "DEITY",
    "UNCLE",
    "SWISH",
    "GIVER",
    "PREEN",
    "BEVEL",
    "LEMUR",
    "DRAFT",
    "SLOPE",
    "ANNOY",
    "LINGO",
    "BLEAK",
    "DITTY",
    "CURLY",
    "CEDAR",
    "DIRGE",
    "GROWN",
    "HORDE",
    "DROOL",
    "SHUCK",
    "CRYPT",
    "CUMIN",
    "STOCK",
    "GRAVY",
    "LOCUS",
    "WIDER",
    "BREED",
    "QUITE",
    "CHAFE",
    "CACHE",
    "BLIMP",
    "DEIGN",
    "FIEND",
    "LOGIC",
    "CHEAP",
    "ELIDE",
    "RIGID",
    "FALSE",
    "RENAL",
    "PENCE",
    "ROWDY",
    "SHOOT",
    "BLAZE",
    "ENVOY",
    "POSSE",
    "BRIEF",
    "NEVER",
    "ABORT",
    "MOUSE",
    "MUCKY",
    "SULKY",
    "FIERY",
    "MEDIA",
    "TRUNK",
    "YEAST",
    "CLEAR",
    "SKUNK",
    "SCALP",
    "BITTY",
    "CIDER",
    "KOALA",
    "DUVET",
    "SEGUE",
    "CREME",
    "SUPER",
    "GRILL",
    "AFTER",
    "OWNER",
    "EMBER",
    "REACH",
    "NOBLY",
    "EMPTY",
    "SPEED",
    "GIPSY",
    "RECUR",
    "SMOCK",
    "DREAD",
    "MERGE",
    "BURST",
    "KAPPA",
    "AMITY",
    "SHAKY",
    "HOVER",
    "CAROL",
    "SNORT",
    "SYNOD",
    "FAINT",
    "HAUNT",
    "FLOUR",
    "CHAIR",
    "DETOX",
    "SHREW",
    "TENSE",
    "PLIED",
    "QUARK",
    "BURLY",
    "NOVEL",
    "WAXEN",
    "STOIC",
    "JERKY",
    "BLITZ",
    "BEEFY",
    "LYRIC",
    "HUSSY",
    "TOWEL",
    "QUILT",
    "BELOW",
    "BINGO",
    "WISPY",
    "BRASH",
    "SCONE",
    "TOAST",
    "EASEL",
    "SAUCY",
    "VALUE",
    "SPICE",
    "HONOR",
    "ROUTE",
    "SHARP",
    "BAWDY",
    "RADII",
    "SKULL",
    "PHONY",
    "ISSUE",
    "LAGER",
    "SWELL",
    "URINE",
    "GASSY",
    "TRIAL",
    "FLORA",
    "UPPER",
    "LATCH",
    "WIGHT",
    "BRICK",
    "RETRY",
    "HOLLY",
    "DECAL",
    "GRASS",
    "SHACK",
    "DOGMA",
    "MOVER",
    "DEFER",
    "SOBER",
    "OPTIC",
    "CRIER",
    "VYING",
    "NOMAD",
    "FLUTE",
    "HIPPO",
    "SHARK",
    "DRIER",
    "OBESE",
    "BUGLE",
    "TAWNY",
    "CHALK",
    "FEAST",
    "RUDDY",
    "PEDAL",
    "SCARF",
    "CRUEL",
    "BLEAT",
    "TIDAL",
    "SLUSH",
    "SEMEN",
    "WINDY",
    "DUSTY",
    "SALLY",
    "IGLOO",
    "NERDY",
    "JEWEL",
    "SHONE",
    "WHALE",
    "HYMEN",
    "ABUSE",
    "FUGUE",
    "ELBOW",
    "CRUMB",
    "PANSY",
    "WELSH",
    "SYRUP",
    "TERSE",
    "SUAVE",
    "GAMUT",
    "SWUNG",
    "DRAKE",
    "FREED",
    "AFIRE",
    "SHIRT",
    "GROUT",
    "ODDLY",
    "TITHE",
    "PLAID",
    "DUMMY",
    "BROOM",
    "BLIND",
    "TORCH",
    "ENEMY",
    "AGAIN",
    "TYING",
    "PESKY",
    "ALTER",
    "GAZER",
    "NOBLE",
    "ETHOS",
    "BRIDE",
    "EXTOL",
    "DECOR",
    "HOBBY",
    "BEAST",
    "IDIOM",
    "UTTER",
    "THESE",
    "SIXTH",
    "ALARM",
    "ERASE",
    "ELEGY",
    "SPUNK",
    "PIPER",
    "SCALY",
    "SCOLD",
    "HEFTY",
    "CHICK",
    "SOOTY",
    "CANAL",
    "WHINY",
    "SLASH",
    "QUAKE",
    "JOINT",
    "SWEPT",
    "PRUDE",
    "HEAVY",
    "WIELD",
    "FEMME",
    "LASSO",
    "MAIZE",
    "SHALE",
    "SCREW",
    "SPREE",
    "SMOKY",
    "WHIFF",
    "SCENT",
    "GLADE",
    "SPENT",
    "PRISM",
    "STOKE",
    "RIPER",
    "ORBIT",
    "COCOA",
    "GUILT",
    "HUMUS",
    "SHUSH",
    "TABLE",
    "SMIRK",
    "WRONG",
    "NOISY",
    "ALERT",
    "SHINY",
    "ELATE",
    "RESIN",
    "WHOLE",
    "HUNCH",
    "PIXEL",
    "POLAR",
    "HOTEL",
    "SWORD",
    "CLEAT",
    "MANGO",
    "RUMBA",
    "PUFFY",
    "FILLY",
    "BILLY",
    "LEASH",
    "CLOUT",
    "DANCE",
    "OVATE",
    "FACET",
    "CHILI",
    "PAINT",
    "LINER",
    "CURIO",
    "SALTY",
    "AUDIO",
    "SNAKE",
    "FABLE",
    "CLOAK",
    "NAVEL",
    "SPURT",
    "PESTO",
    "BALMY",
    "FLASH",
    "UNWED",
    "EARLY",
    "CHURN",
    "WEEDY",
    "STUMP",
    "LEASE",
    "WITTY",
    "WIMPY",
    "SPOOF",
    "SANER",
    "BLEND",
    "SALSA",
    "THICK",
    "WARTY",
    "MANIC",
    "BLARE",
    "SQUIB",
    "SPOON",
    "PROBE",
    "CREPE",
    "KNACK",
    "FORCE",
    "DEBUT",
    "ORDER",
    "HASTE",
    "TEETH",
    "AGENT",
    "WIDEN",
    "ICILY",
    "SLICE",
    "INGOT",
    "CLASH",
    "JUROR",
    "BLOOD",
    "ABODE",
    "THROW",
    "UNITY",
    "PIVOT",
    "SLEPT",
    "TROOP",
    "SPARE",
    "SEWER",
    "PARSE",
    "MORPH",
    "CACTI",
    "TACKY",
    "SPOOL",
    "DEMON",
    "MOODY",
    "ANNEX",
    "BEGIN",
    "FUZZY",
    "PATCH",
    "WATER",
    "LUMPY",
    "ADMIN",
    "OMEGA",
    "LIMIT",
    "TABBY",
    "MACHO",
    "AISLE",
    "SKIFF",
    "BASIS",
    "PLANK",
    "VERGE",
    "BOTCH",
    "CRAWL",
    "LOUSY",
    "SLAIN",
    "CUBIC",
    "RAISE",
    "WRACK",
    "GUIDE",
    "FOIST",
    "CAMEO",
    "UNDER",
    "ACTOR",
    "REVUE",
    "FRAUD",
    "HARPY",
    "SCOOP",
    "CLIMB",
    "REFER",
    "OLDEN",
    "CLERK",
    "DEBAR",
    "TALLY",
    "ETHIC",
    "CAIRN",
    "TULLE",
    "GHOUL",
    "HILLY",
    "CRUDE",
    "APART",
    "SCALE",
    "OLDER",
    "PLAIN",
    "SPERM",
    "BRINY",
    "ABBOT",
    "RERUN",
    "QUEST",
    "CRISP",
    "BOUND",
    "BEFIT",
    "DRAWN",
    "SUITE",
    "ITCHY",
    "CHEER",
    "BAGEL",
    "GUESS",
    "BROAD",
    "AXIOM",
    "CHARD",
    "CAPUT",
    "LEANT",
    "HARSH",
    "CURSE",
    "PROUD",
    "SWING",
    "OPINE",
    "TASTE",
    "LUPUS",
    "GUMBO",
    "MINER",
    "GREEN",
    "CHASM",
    "LIPID",
    "TOPIC",
    "ARMOR",
    "BRUSH",
    "CRANE",
    "MURAL",
    "ABLED",
    "HABIT",
    "BOSSY",
    "MAKER",
    "DUSKY",
    "DIZZY",
    "LITHE",
    "BROOK",
    "JAZZY",
    "FIFTY",
    "SENSE",
    "GIANT",
    "SURLY",
    "LEGAL",
    "FATAL",
    "FLUNK",
    "BEGAN",
    "PRUNE",
    "SMALL",
    "SLANT",
    "SCOFF",
    "TORUS",
    "NINNY",
    "COVEY",
    "VIPER",
    "TAKEN",
    "MORAL",
    "VOGUE",
    "OWING",
    "TOKEN",
    "ENTRY",
    "BOOTH",
    "VOTER",
    "CHIDE",
    "ELFIN",
    "EBONY",
    "NEIGH",
    "MINIM",
    "MELON",
    "KNEED",
    "DECOY",
    "VOILA",
    "ANKLE",
    "ARROW",
    "MUSHY",
    "TRIBE",
    "CEASE",
    "EAGER",
    "BIRTH",
    "GRAPH",
    "ODDER",
    "TERRA",
    "WEIRD",
    "TRIED",
    "CLACK",
    "COLOR",
    "ROUGH",
    "WEIGH",
    "UNCUT",
    "LADLE",
    "STRIP",
    "CRAFT",
    "MINUS",
    "DICEY",
    "TITAN",
    "LUCID",
    "VICAR",
    "DRESS",
    "DITCH",
    "GYPSY",
    "PASTA",
    "TAFFY",
    "FLAME",
    "SWOOP",
    "ALOOF",
    "SIGHT",
    "BROKE",
    "TEARY",
    "CHART",
    "SIXTY",
    "WORDY",
    "SHEER",
    "LEPER",
    "NOSEY",
    "BULGE",
    "SAVOR",
    "CLAMP",
    "FUNKY",
    "FOAMY",
    "TOXIC",
    "BRAND",
    "PLUMB",
    "DINGY",
    "BUTTE",
    "DRILL",
    "TRIPE",
    "BICEP",
    "TENOR",
    "KRILL",
    "WORSE",
    "DRAMA",
    "HYENA",
    "THINK",
    "RATIO",
    "COBRA",
    "BASIL",
    "SCRUM",
    "BUSED",
    "PHONE",
    "COURT",
    "CAMEL",
    "PROOF",
    "HEARD",
    "ANGEL",
    "PETAL",
    "POUTY",
    "THROB",
    "MAYBE",
    "FETAL",
    "SPRIG",
    "SPINE",
    "SHOUT",
    "CADET",
    "MACRO",
    "DODGY",
    "SATYR",
    "RARER",
    "BINGE",
    "TREND",
    "NUTTY",
    "LEAPT",
    "AMISS",
    "SPLIT",
    "MYRRH",
    "WIDTH",
    "SONAR",
    "TOWER",
    "BARON",
    "FEVER",
    "WAVER",
    "SPARK",
    "BELIE",
    "SLOOP",
    "EXPEL",
    "SMOTE",
    "BALER",
    "ABOVE",
    "NORTH",
    "WAFER",
    "SCANT",
    "FRILL",
    "AWASH",
    "SNACK",
    "SCOWL",
    "FRAIL",
    "DRIFT",
    "LIMBO",
    "FENCE",
    "MOTEL",
    "OUNCE",
    "WREAK",
    "REVEL",
    "TALON",
    "PRIOR",
    "KNELT",
    "CELLO",
    "FLAKE",
    "DEBUG",
    "ANODE",
    "CRIME",
    "SALVE",
    "SCOUT",
    "IMBUE",
    "PINKY",
    "STAVE",
    "VAGUE",
    "CHOCK",
    "FIGHT",
    "VIDEO",
    "STONE",
    "TEACH",
    "CLEFT",
    "FROST",
    "PRAWN",
    "BOOTY",
    "TWIST",
    "APNEA",
    "STIFF",
    "PLAZA",
    "LEDGE",
    "TWEAK",
    "BOARD",
    "GRANT",
    "MEDIC",
    "BACON",
    "CABLE",
    "BRAWL",
    "SLUNK",
    "RASPY",
    "FORUM",
    "DRONE",
    "WOMEN",
    "MUCUS",
    "BOAST",
    "TODDY",
    "COVEN",
    "TUMOR",
    "TRUER",
    "WRATH",
    "STALL",
    "STEAM",
    "AXIAL",
    "PURER",
    "DAILY",
    "TRAIL",
    "NICHE",
    "MEALY",
    "JUICE",
    "NYLON",
    "PLUMP",
    "MERRY",
    "FLAIL",
    "PAPAL",
    "WHEAT",
    "BERRY",
    "COWER",
    "ERECT",
    "BRUTE",
    "LEGGY",
    "SNIPE",
    "SINEW",
    "SKIER",
    "PENNY",
    "JUMPY",
    "RALLY",
    "UMBRA",
    "SCARY",
    "MODEM",
    "GROSS",
    "AVIAN",
    "GREED",
    "SATIN",
    "TONIC",
    "PARKA",
    "SNIFF",
    "LIVID",
    "STARK",
    "TRUMP",
    "GIDDY",
    "REUSE",
    "TABOO",
    "AVOID",
    "QUOTE",
    "DEVIL",
    "LIKEN",
    "GLOSS",
    "GAYER",
    "BERET",
    "NOISE",
    "GLAND",
    "DEALT",
    "SLING",
    "RUMOR",
    "OPERA",
    "THIGH",
    "TONGA",
    "FLARE",
    "WOUND",
    "WHITE",
    "BULKY",
    "ETUDE",
    "HORSE",
    "CIRCA",
    "PADDY",
    "INBOX",
    "FIZZY",
    "GRAIN",
    "EXERT",
    "SURGE",
    "GLEAM",
    "BELLE",
    "SALVO",
    "CRUSH",
    "FRUIT",
    "SAPPY",
    "TAKER",
    "TRACT",
    "OVINE",
    "SPIKY",
    "FRANK",
    "REEDY",
    "FILTH",
    "SPASM",
    "HEAVE",
    "MAMBO",
    "RIGHT",
    "CLANK",
    "TRUST",
    "LUMEN",
    "BORNE",
    "SPOOK",
    "SAUCE",
    "AMBER",
    "LATHE",
    "CARAT",
    "CORER",
    "DIRTY",
    "SLYLY",
    "AFFIX",
    "ALLOY",
    "TAINT",
    "SHEEP",
    "KINKY",
    "WOOLY",
    "MAUVE",
    "FLUNG",
    "YACHT",
    "FRIED",
    "QUAIL",
    "BRUNT",
    "GRIMY",
    "CURVY",
    "CAGEY",
    "RINSE",
    "DEUCE",
    "STATE",
    "GRASP",
    "MILKY",
    "BISON",
    "GRAFT",
    "SANDY",
    "BASTE",
    "FLASK",
    "HEDGE",
    "GIRLY",
    "SWASH",
    "BONEY",
    "COUPE",
    "ENDOW",
    "ABHOR",
    "WELCH",
    "BLADE",
    "TIGHT",
    "GEESE",
    "MISER",
    "MIRTH",
    "CLOUD",
    "CABAL",
    "LEECH",
    "CLOSE",
    "TENTH",
    "PECAN",
    "DROIT",
    "GRAIL",
    "CLONE",
    "GUISE",
    "RALPH",
    "TANGO",
    "BIDDY",
    "SMITH",
    "MOWER",
    "PAYEE",
    "SERIF",
    "DRAPE",
    "FIFTH",
    "SPANK",
    "GLAZE",
    "ALLOT",
    "TRUCK",
    "KAYAK",
    "VIRUS",
    "TESTY",
    "TEPEE",
    "FULLY",
    "ZONAL",
    "METRO",
    "CURRY",
    "GRAND",
    "BANJO",
    "AXION",
    "BEZEL",
    "OCCUR",
    "CHAIN",
    "NASAL",
    "GOOEY",
    "FILER",
    "BRACE",
    "ALLAY",
    "PUBIC",
    "RAVEN",
    "PLEAD",
    "GNASH",
    "FLAKY",
    "MUNCH",
    "DULLY",
    "EKING",
    "THING",
    "SLINK",
    "HURRY",
    "THEFT",
    "SHORN",
    "PYGMY",
    "RANCH",
    "WRING",
    "LEMON",
    "SHORE",
    "MAMMA",
    "FROZE",
    "NEWER",
    "STYLE",
    "MOOSE",
    "ANTIC",
    "DROWN",
    "VEGAN",
    "CHESS",
    "GUPPY",
    "UNION",
    "LEVER",
    "LORRY",
    "IMAGE",
    "CABBY",
    "DRUID",
    "EXACT",
    "TRUTH",
    "DOPEY",
    "SPEAR",
    "CRIED",
    "CHIME",
    "CRONY",
    "STUNK",
    "TIMID",
    "BATCH",
    "GAUGE",
    "ROTOR",
    "CRACK",
    "CURVE",
    "LATTE",
    "WITCH",
    "BUNCH",
    "REPEL",
    "ANVIL",
    "SOAPY",
    "METER",
    "BROTH",
    "MADLY",
    "DRIED",
    "SCENE",
    "KNOWN",
    "MAGMA",
    "ROOST",
    "WOMAN",
    "THONG",
    "PUNCH",
    "PASTY",
    "DOWNY",
    "KNEAD",
    "WHIRL",
    "RAPID",
    "CLANG",
    "ANGER",
    "DRIVE",
    "GOOFY",
    "EMAIL",
    "MUSIC",
    "STUFF",
    "BLEEP",
    "RIDER",
    "MECCA",
    "FOLIO",
    "SETUP",
    "VERSO",
    "QUASH",
    "FAUNA",
    "GUMMY",
    "HAPPY",
    "NEWLY",
    "FUSSY",
    "RELIC",
    "GUAVA",
    "RATTY",
    "FUDGE",
    "FEMUR",
    "CHIRP",
    "FORTE",
    "ALIBI",
    "WHINE",
    "PETTY",
    "GOLLY",
    "PLAIT",
    "FLECK",
    "FELON",
    "GOURD",
    "BROWN",
    "THRUM",
    "FICUS",
    "STASH",
    "DECRY",
    "WISER",
    "JUNTA",
    "VISOR",
    "DAUNT",
    "SCREE",
    "IMPEL",
    "AWAIT",
    "PRESS",
    "WHOSE",
    "TURBO",
    "STOOP",
    "SPEAK",
    "MANGY",
    "EYING",
    "INLET",
    "CRONE",
    "PULSE",
    "MOSSY",
    "STAID",
    "HENCE",
    "PINCH",
    "TEDDY",
    "SULLY",
    "SNORE",
    "RIPEN",
    "SNOWY",
    "ATTIC",
    "GOING",
    "LEACH",
    "MOUTH",
    "HOUND",
    "CLUMP",
    "TONAL",
    "BIGOT",
    "PERIL",
    "PIECE",
    "BLAME",
    "HAUTE",
    "SPIED",
    "UNDID",
    "INTRO",
    "BASAL",
    "SHINE",
    "GECKO",
    "RODEO",
    "GUARD",
    "STEER",
    "LOAMY",
    "SCAMP",
    "SCRAM",
    "MANLY",
    "HELLO",
    "VAUNT",
    "ORGAN",
    "FERAL",
    "KNOCK",
    "EXTRA",
    "CONDO",
    "ADAPT",
    "WILLY",
    "POLKA",
    "RAYON",
    "SKIRT",
    "FAITH",
    "TORSO",
    "MATCH",
    "MERCY",
    "TEPID",
    "SLEEK",
    "RISER",
    "TWIXT",
    "PEACE",
    "FLUSH",
    "CATTY",
    "LOGIN",
    "EJECT",
    "ROGER",
    "RIVAL",
    "UNTIE",
    "REFIT",
    "AORTA",
    "ADULT",
    "JUDGE",
    "ROWER",
    "ARTSY",
    "RURAL",
    "SHAVE"
  ];
  function getTargetWords() {
    return ["GRAND", "CHILD"];
  }

  // src/components/GameBoard.jsx
  function GameBoard({ gameMode, correctGuessCount, setCorrectGuessCount }) {
    let useLocalStorage2 = useLocalStorage;
    if (gameMode === "practice") {
      useLocalStorage2 = (_, arg) => (0, import_react70.useState)(arg);
    }
    const [currentGuessWord, setCurrentGuessWord] = useLocalStorage2("currentGuessWord", "");
    const [targetWords, setTargetWords] = (0, import_react70.useState)([]);
    const [guessedWords, setGuessedWords] = useLocalStorage2("guessedWords", []);
    const [currentDate, setCurrentDate] = useLocalStorage2("currentDate", "");
    const [usedLetters, setUsedLetters] = useLocalStorage2("usedLetters", []);
    const [hasWonGame, setHasWonGame] = (0, import_react70.useState)(false);
    const [hasFinishedGame, setHasFinishedGame] = (0, import_react70.useState)(false);
    const [individualScores, setIndividualScores] = (0, import_react70.useState)({});
    const toast2 = useToast();
    const size2 = useWindowSize();
    const lowerBoxRef = (0, import_react70.useRef)();
    const [lowerBoxDimensions, setLowerBoxDimensions] = (0, import_react70.useState)({ width: 0, height: 0 });
    const { isOpen, onOpen, onClose } = useDisclosure();
    let slices = [[0, 2]];
    if (size2.width < 800) {
      slices = new Array(2).fill(void 0).map((_, i) => [i, i + 1]);
    } else if (size2.width < 1e3) {
      slices = [[0, 2]];
    } else if (size2.width < 1550) {
      slices = [[0, 2]];
    }
    (0, import_react70.useLayoutEffect)(() => {
      if (lowerBoxRef.current) {
        setLowerBoxDimensions({
          width: lowerBoxRef.current.offsetWidth,
          height: lowerBoxRef.current.offsetHeight
        });
      }
    }, []);
    const handleWordleStateChange = (id2, correctCount) => {
      setIndividualScores((individualScores2) => ({ ...individualScores2, [id2]: correctCount }));
    };
    const tryAddLetterToCurrentGuessWord = (letter) => {
      if (currentGuessWord.length < 5) {
        setCurrentGuessWord(currentGuessWord + letter.toUpperCase());
      }
    };
    const tryBackspaceCurrentGuessWord = () => {
      if (currentGuessWord.length > 0) {
        setCurrentGuessWord(currentGuessWord.slice(0, -1));
      }
    };
    const trySubmitCurrentGuessWord = () => {
      if (currentGuessWord.length === 5 && (TARGET_WORDS.includes(currentGuessWord) || validguesses_default.includes(currentGuessWord))) {
        setUsedLetters([...usedLetters, ...currentGuessWord.split("")]);
        setGuessedWords([...guessedWords, currentGuessWord]);
        setCurrentGuessWord("");
      } else {
        toast2({
          title: "Invalid Guess",
          status: "error",
          duration: 3e3,
          isClosable: true
        });
      }
    };
    useEventListener2("keydown", ({ key, keyCode }) => {
      if (keyCode === 8) {
        tryBackspaceCurrentGuessWord();
      } else if (keyCode === 13) {
        trySubmitCurrentGuessWord();
      } else if (keyCode >= 65 && keyCode <= 90) {
        tryAddLetterToCurrentGuessWord(key);
      }
    });
    (0, import_react70.useEffect)(() => {
      const date = new Date().toJSON().slice(0, 10).replace(/-/g, "");
      const selected = getTargetWords(date);
      setTargetWords(selected);
      if (currentDate !== date) {
        setCurrentDate(date);
        setGuessedWords([]);
        setCurrentGuessWord("");
        setUsedLetters([]);
        setHasWonGame(false);
        setHasFinishedGame(false);
      }
    }, []);
    (0, import_react70.useEffect)(() => {
      if (targetWords.length === 0) {
        return;
      }
      let correct = 0;
      for (const word of targetWords) {
        if (guessedWords.includes(word)) {
          correct += 1;
        }
      }
      setCorrectGuessCount(correct);
      setHasWonGame(correct === 2);
      setHasFinishedGame(correct === 2 || guessedWords.length === 10);
    }, [guessedWords, targetWords, setCorrectGuessCount]);
    (0, import_react70.useEffect)(() => {
      if (hasFinishedGame) {
        onOpen();
      }
    }, [hasFinishedGame, onOpen]);
    const hStacks = [];
    for (const slice2 of slices) {
      hStacks.push(/* @__PURE__ */ import_react70.default.createElement(HStack, {
        minHeight: "15em",
        height: "0",
        flexGrow: 1,
        alignItems: "stretch",
        spacing: 3,
        key: slice2
      }, targetWords.slice(slice2[0], slice2[1]).map((targetWord, i) => /* @__PURE__ */ import_react70.default.createElement(Wordle, {
        key: i,
        index: slice2[0] + i,
        currentGuessWord,
        guessedWords,
        targetWord,
        handleWordleStateChange
      }))));
    }
    return /* @__PURE__ */ import_react70.default.createElement(import_react70.default.Fragment, null, /* @__PURE__ */ import_react70.default.createElement(Flex, {
      width: "100vw",
      height: `calc(100% - 5em - ${lowerBoxDimensions.height}px)`,
      overflowY: "auto",
      position: "fixed",
      top: "5em",
      flexDirection: "column",
      alignItems: "center"
    }, /* @__PURE__ */ import_react70.default.createElement(VStack, {
      spacing: 4,
      flexGrow: 1,
      flexDirection: "column"
    }, hStacks)), /* @__PURE__ */ import_react70.default.createElement(Box, {
      ref: lowerBoxRef,
      position: "fixed",
      bottom: "0"
    }, window.location.hostname === "localhost" && /* @__PURE__ */ import_react70.default.createElement(HStack, {
      sx: { marginTop: "1em" },
      padding: "1em",
      backgroundColor: "purple"
    }, /* @__PURE__ */ import_react70.default.createElement(Button, {
      onClick: () => {
        setGuessedWords([...targetWords.slice(0, 15), "TESTS", "TESTS", "TESTS", "TESTS", "TESTS"]);
      }
    }, "Fill 15/16 20/21"), /* @__PURE__ */ import_react70.default.createElement(Button, {
      onClick: () => {
        localStorage.clear();
        window.location.reload();
      }
    }, "Clear localStorage")), /* @__PURE__ */ import_react70.default.createElement(Keyboard, {
      usedLetters,
      tryAddLetterToCurrentGuessWord,
      trySubmitCurrentGuessWord,
      tryBackspaceCurrentGuessWord
    })), /* @__PURE__ */ import_react70.default.createElement(Modal, {
      isOpen,
      onClose,
      size: "xl",
      isCentered: true
    }, /* @__PURE__ */ import_react70.default.createElement(ModalOverlay, null), /* @__PURE__ */ import_react70.default.createElement(ModalContent, null, /* @__PURE__ */ import_react70.default.createElement(ModalHeader, null), /* @__PURE__ */ import_react70.default.createElement(ModalCloseButton, null), /* @__PURE__ */ import_react70.default.createElement(ModalBody, null, /* @__PURE__ */ import_react70.default.createElement(VStack, {
      sx: { marginBottom: "2em" }
    }, hasWonGame ? /* @__PURE__ */ import_react70.default.createElement(Text, null, "Congratulations!!") : /* @__PURE__ */ import_react70.default.createElement(Text, null, "Bad luck!"), /* @__PURE__ */ import_react70.default.createElement(Text, null, "You are going to be grandparents!!"), hasWonGame === false && /* @__PURE__ */ import_react70.default.createElement(Text, {
      textAlign: "center"
    }, "The answers were:", " ", targetWords.join(", ")))))));
  }

  // src/App.jsx
  function App() {
    const [gameMode, setGameMode] = (0, import_react72.useState)("");
    const [correctGuessCount, setCorrectGuessCount] = (0, import_react72.useState)(0);
    return /* @__PURE__ */ import_react72.default.createElement(ChakraProvider3, {
      theme: theme_default
    }, /* @__PURE__ */ import_react72.default.createElement(VStack, {
      spacing: "0"
    }, /* @__PURE__ */ import_react72.default.createElement(TitleBar, {
      gameMode,
      setGameMode,
      correctGuessCount
    }), /* @__PURE__ */ import_react72.default.createElement(GameBoard, {
      gameMode,
      correctGuessCount,
      setCorrectGuessCount
    })));
  }

  // src/index.jsx
  import_react_dom4.default.render(/* @__PURE__ */ import_react74.default.createElement(import_react74.default.StrictMode, null, /* @__PURE__ */ import_react74.default.createElement(ColorModeScript, {
    initialColorMode: theme_default.config.initialColorMode
  }), /* @__PURE__ */ import_react74.default.createElement(App, null)), document.getElementById("root"));
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=main.js.map
